READ 396 MUTANTS
********************************************************************************
MUTANT #1:
RedBlackTreeUtility.mutant.678.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent == NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #2:
RedBlackTreeUtility.mutant.741.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent <= NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #3:
RedBlackTreeUtility.mutant.337.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == (0+1))
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #4:
RedBlackTreeUtility.mutant.347.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff > 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #5:
RedBlackTreeUtility.mutant.239.c: ./RedBlackTreeUtility.c:257
*** Original
--- Mutant
***************
*** 254,260 ****
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! */
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;
--- 254,260 ----
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! -/
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;


********************************************************************************
MUTANT #6:
RedBlackTreeUtility.mutant.842.c: ./RedBlackTreeUtility.c:787
*** Original
--- Mutant
***************
*** 784,790 ****
        
          if( workingNode->rightChildPtr != NULL )
             {
!             displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
--- 784,790 ----
        
          if( workingNode->rightChildPtr != NULL )
             {
!             displayAtTreeLevel ( nodeHeight, workingNode->rightChildPtr,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  


********************************************************************************
MUTANT #7:
RedBlackTreeUtility.mutant.86.c: ./RedBlackTreeUtility.c:106
*** Original
--- Mutant
***************
*** 103,109 ****
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);
--- 103,109 ----
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! %/
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);


********************************************************************************
MUTANT #8:
RedBlackTreeUtility.mutant.708.c: ./RedBlackTreeUtility.c:695
*** Original
--- Mutant
***************
*** 692,698 ****
       oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's left child to new top's right child
!      oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
       if (oldTopPtr->leftChildPtr != NULL)
--- 692,698 ----
       oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's left child to new top's right child
!      /*oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;*/
  
       // check if old top's new left child is not NULL
       if (oldTopPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #9:
RedBlackTreeUtility.mutant.84.c: ./RedBlackTreeUtility.c:106
*** Original
--- Mutant
***************
*** 103,109 ****
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);
--- 103,109 ----
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! -/
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);


********************************************************************************
MUTANT #10:
RedBlackTreeUtility.mutant.162.c: ./RedBlackTreeUtility.c:193
*** Original
--- Mutant
***************
*** 190,196 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 190,196 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! %/
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #11:
RedBlackTreeUtility.mutant.70.c: ./RedBlackTreeUtility.c:80
*** Original
--- Mutant
***************
*** 77,83 ****
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! */
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
--- 77,83 ----
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! +/
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 


********************************************************************************
MUTANT #12:
RedBlackTreeUtility.mutant.85.c: ./RedBlackTreeUtility.c:106
*** Original
--- Mutant
***************
*** 103,109 ****
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);
--- 103,109 ----
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! //
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);


********************************************************************************
MUTANT #13:
RedBlackTreeUtility.mutant.835.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr >= NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #14:
RedBlackTreeUtility.mutant.232.c: ./RedBlackTreeUtility.c:243
*** Original
--- Mutant
***************
*** 240,246 ****
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
!          displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
      }
--- 240,246 ----
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
!          displayPreOrder ( &rowStartFlag,rootPtr);
           printf("\n");
          }
      }


********************************************************************************
MUTANT #15:
RedBlackTreeUtility.mutant.10.c: ./RedBlackTreeUtility.c:21
*** Original
--- Mutant
***************
*** 18,24 ****
  Device input/---: none
  Device output/---: none
  Dependencies: free
! */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)
--- 18,24 ----
  Device input/---: none
  Device output/---: none
  Dependencies: free
! //
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)


********************************************************************************
MUTANT #16:
RedBlackTreeUtility.mutant.696.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if ((1==1) && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #17:
RedBlackTreeUtility.mutant.311.c: ./RedBlackTreeUtility.c:336
*** Original
--- Mutant
***************
*** 333,339 ****
  
           // call resolver function to resolve
           // function: resolveRBT
!          resolveRBT(&treeRoot, insertedNodePtr);
  
           return insertedNodePtr;
          }
--- 333,339 ----
  
           // call resolver function to resolve
           // function: resolveRBT
!          resolveRBT ( insertedNodePtr,&treeRoot);
  
           return insertedNodePtr;
          }


********************************************************************************
MUTANT #18:
RedBlackTreeUtility.mutant.646.c: ./RedBlackTreeUtility.c:646
*** Original
--- Mutant
***************
*** 643,649 ****
       oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's right child to new top's left child
!      oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
       if (oldTopPtr->rightChildPtr != NULL)
--- 643,649 ----
       oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's right child to new top's left child
!      /*oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;*/
  
       // check if old top's new right child is not NULL
       if (oldTopPtr->rightChildPtr != NULL)


********************************************************************************
MUTANT #19:
RedBlackTreeUtility.mutant.661.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent >= NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #20:
RedBlackTreeUtility.mutant.161.c: ./RedBlackTreeUtility.c:193
*** Original
--- Mutant
***************
*** 190,196 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 190,196 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! //
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #21:
RedBlackTreeUtility.mutant.71.c: ./RedBlackTreeUtility.c:80
*** Original
--- Mutant
***************
*** 77,83 ****
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! */
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
--- 77,83 ----
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! -/
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 


********************************************************************************
MUTANT #22:
RedBlackTreeUtility.mutant.680.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent >= NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #23:
RedBlackTreeUtility.mutant.327.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr <= NULL || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #24:
RedBlackTreeUtility.mutant.643.c: ./RedBlackTreeUtility.c:632
*** Original
--- Mutant
***************
*** 629,635 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 629,635 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! %/
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #25:
RedBlackTreeUtility.mutant.21.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (1==1)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #26:
RedBlackTreeUtility.mutant.704.c: ./RedBlackTreeUtility.c:681
*** Original
--- Mutant
***************
*** 678,684 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 678,684 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! //
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #27:
RedBlackTreeUtility.mutant.697.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != (1==1) && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #28:
RedBlackTreeUtility.mutant.72.c: ./RedBlackTreeUtility.c:80
*** Original
--- Mutant
***************
*** 77,83 ****
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! */
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
--- 77,83 ----
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! //
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 


********************************************************************************
MUTANT #29:
RedBlackTreeUtility.mutant.477.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (1==1)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #30:
RedBlackTreeUtility.mutant.512.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr != wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #31:
RedBlackTreeUtility.mutant.720.c: ./RedBlackTreeUtility.c:705
*** Original
--- Mutant
***************
*** 702,708 ****
          }
  
       // point new top's right child to old top
!      newTopPtr->rightChildPtr = oldTopPtr;
  
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
--- 702,708 ----
          }
  
       // point new top's right child to old top
!      /*newTopPtr->rightChildPtr = oldTopPtr;*/
  
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {


********************************************************************************
MUTANT #32:
RedBlackTreeUtility.mutant.378.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr == NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #33:
RedBlackTreeUtility.mutant.1016.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot >= NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #34:
RedBlackTreeUtility.mutant.475.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (!(unclePtr != NULL && unclePtr->color == RED))
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #35:
RedBlackTreeUtility.mutant.415.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (!(parentPtr != NULL))
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #36:
RedBlackTreeUtility.mutant.280.c: ./RedBlackTreeUtility.c:305
*** Original
--- Mutant
***************
*** 302,308 ****
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! */
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables
--- 302,308 ----
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! -/
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #37:
RedBlackTreeUtility.mutant.164.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr <= NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #38:
RedBlackTreeUtility.mutant.656.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (1==1)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #39:
RedBlackTreeUtility.mutant.689.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent = NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #40:
RedBlackTreeUtility.mutant.297.c: ./RedBlackTreeUtility.c:324
*** Original
--- Mutant
***************
*** 321,327 ****
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
!          insertedNodePtr = insertHelper(treeRoot, inData);
          }
  
       // check if insertion was successful (not null)
--- 321,327 ----
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
!          /*insertedNodePtr = insertHelper(treeRoot, inData);*/
          }
  
       // check if insertion was successful (not null)


********************************************************************************
MUTANT #41:
RedBlackTreeUtility.mutant.579.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr > wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #42:
RedBlackTreeUtility.mutant.384.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          /*if (wkgPtr->rightChildPtr != NULL)*/
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #43:
RedBlackTreeUtility.mutant.660.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent <= NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #44:
RedBlackTreeUtility.mutant.331.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr > NULL || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #45:
RedBlackTreeUtility.mutant.98.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr > NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #46:
RedBlackTreeUtility.mutant.169.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      /*if (wkgPtr != NULL)*/
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #47:
RedBlackTreeUtility.mutant.501.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr = NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #48:
RedBlackTreeUtility.mutant.753.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (!(oldParent != NULL && oldParent->rightChildPtr == oldTopPtr))
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #49:
RedBlackTreeUtility.mutant.936.c: ./RedBlackTreeUtility.c:861
*** Original
--- Mutant
***************
*** 858,864 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! */
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 858,864 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! -/
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #50:
RedBlackTreeUtility.mutant.651.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr < NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #51:
RedBlackTreeUtility.mutant.549.c: ./RedBlackTreeUtility.c:525
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  /*else*/
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #52:
RedBlackTreeUtility.mutant.425.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          /*if (grParentPtr != NULL)*/
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #53:
RedBlackTreeUtility.mutant.334.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff < 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #54:
RedBlackTreeUtility.mutant.49.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr < NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #55:
RedBlackTreeUtility.mutant.740.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent == NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #56:
RedBlackTreeUtility.mutant.130.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr <= NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #57:
RedBlackTreeUtility.mutant.126.c: ./RedBlackTreeUtility.c:159
*** Original
--- Mutant
***************
*** 156,162 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 156,162 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! -/
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #58:
RedBlackTreeUtility.mutant.445.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr > NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #59:
RedBlackTreeUtility.mutant.536.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (0==1)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #60:
RedBlackTreeUtility.mutant.185.c: ./RedBlackTreeUtility.c:208
*** Original
--- Mutant
***************
*** 205,211 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 205,211 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf ( wkgPtr->data,"%c/%c", (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #61:
RedBlackTreeUtility.mutant.1113.c: ./RedBlackTreeUtility.c:969
*** Original
--- Mutant
***************
*** 966,972 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! */
  int getMax( int one, int other )
     {
      int max = one;
--- 966,972 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! //
  int getMax( int one, int other )
     {
      int max = one;


********************************************************************************
MUTANT #62:
RedBlackTreeUtility.mutant.218.c: ./RedBlackTreeUtility.c:238
*** Original
--- Mutant
***************
*** 235,241 ****
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
!          displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)
--- 235,241 ----
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
!          displayPostOrder ( &rowStartFlag,rootPtr);
           printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)


********************************************************************************
MUTANT #63:
RedBlackTreeUtility.mutant.361.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr <= NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #64:
RedBlackTreeUtility.mutant.464.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr <= NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #65:
RedBlackTreeUtility.mutant.299.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr <= NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #66:
RedBlackTreeUtility.mutant.530.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr != NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #67:
RedBlackTreeUtility.mutant.653.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      /*if (oldTopPtr->rightChildPtr != NULL)*/
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #68:
RedBlackTreeUtility.mutant.382.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr < NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #69:
RedBlackTreeUtility.mutant.460.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != (1==1) && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #70:
RedBlackTreeUtility.mutant.11.c: ./RedBlackTreeUtility.c:21
*** Original
--- Mutant
***************
*** 18,24 ****
  Device input/---: none
  Device output/---: none
  Dependencies: free
! */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)
--- 18,24 ----
  Device input/---: none
  Device output/---: none
  Dependencies: free
! %/
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)


********************************************************************************
MUTANT #71:
RedBlackTreeUtility.mutant.240.c: ./RedBlackTreeUtility.c:257
*** Original
--- Mutant
***************
*** 254,260 ****
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! */
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;
--- 254,260 ----
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! //
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;


********************************************************************************
MUTANT #72:
RedBlackTreeUtility.mutant.36.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr < NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #73:
RedBlackTreeUtility.mutant.735.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (1==1)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #74:
RedBlackTreeUtility.mutant.509.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && (1==1))
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #75:
RedBlackTreeUtility.mutant.534.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr < NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #76:
RedBlackTreeUtility.mutant.759.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != (1==1) && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #77:
RedBlackTreeUtility.mutant.48.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr > NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #78:
RedBlackTreeUtility.mutant.688.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL || oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #79:
RedBlackTreeUtility.mutant.245.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr > NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #80:
RedBlackTreeUtility.mutant.401.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr <= NULL;
      }
  
  /*


********************************************************************************
MUTANT #81:
RedBlackTreeUtility.mutant.564.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr < NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #82:
RedBlackTreeUtility.mutant.385.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (!(wkgPtr->rightChildPtr != NULL))
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #83:
RedBlackTreeUtility.mutant.644.c: ./RedBlackTreeUtility.c:640
*** Original
--- Mutant
***************
*** 637,643 ****
       RedBlackNodeType* oldParent = oldTopPtr->parentPtr;
  
       // point new top's parent to old top's parent
!      newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
       oldTopPtr->parentPtr = newTopPtr;
--- 637,643 ----
       RedBlackNodeType* oldParent = oldTopPtr->parentPtr;
  
       // point new top's parent to old top's parent
!      /*newTopPtr->parentPtr = oldParent;*/
  
       // point old top's parent to new top
       oldTopPtr->parentPtr = newTopPtr;


********************************************************************************
MUTANT #84:
RedBlackTreeUtility.mutant.1017.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot > NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #85:
RedBlackTreeUtility.mutant.725.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent < NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #86:
RedBlackTreeUtility.mutant.366.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          /*if (wkgPtr->leftChildPtr != NULL)*/
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #87:
RedBlackTreeUtility.mutant.411.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr > NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #88:
RedBlackTreeUtility.mutant.15.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr > NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #89:
RedBlackTreeUtility.mutant.622.c: ./RedBlackTreeUtility.c:592
*** Original
--- Mutant
***************
*** 589,595 ****
                   rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT(treeRoot, parentPtr);
                  }
              }
          }
--- 589,595 ----
                   rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT ( parentPtr,treeRoot);
                  }
              }
          }


********************************************************************************
MUTANT #90:
RedBlackTreeUtility.mutant.518.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (0==1)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #91:
RedBlackTreeUtility.mutant.673.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (1==1)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #92:
RedBlackTreeUtility.mutant.155.c: ./RedBlackTreeUtility.c:177
*** Original
--- Mutant
***************
*** 174,180 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
          }
      }
  
--- 174,180 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf ( wkgPtr->data,"%c/%c", (char)wkgPtr->color);
          }
      }
  


********************************************************************************
MUTANT #93:
RedBlackTreeUtility.mutant.205.c: ./RedBlackTreeUtility.c:233
*** Original
--- Mutant
***************
*** 230,236 ****
       
       if (traverseCode == INORDER_TRAVERSE)
          {
!          displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
--- 230,236 ----
       
       if (traverseCode == INORDER_TRAVERSE)
          {
!          displayInOrder ( &rowStartFlag,rootPtr);
           printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)


********************************************************************************
MUTANT #94:
RedBlackTreeUtility.mutant.356.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (!(diff < 0))
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #95:
RedBlackTreeUtility.mutant.296.c: ./RedBlackTreeUtility.c:324
*** Original
--- Mutant
***************
*** 321,327 ****
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
!          insertedNodePtr = insertHelper(treeRoot, inData);
          }
  
       // check if insertion was successful (not null)
--- 321,327 ----
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
!          insertedNodePtr = insertHelper ( inData,treeRoot);
          }
  
       // check if insertion was successful (not null)


********************************************************************************
MUTANT #96:
RedBlackTreeUtility.mutant.301.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr > NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #97:
RedBlackTreeUtility.mutant.690.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      /*else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)*/
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #98:
RedBlackTreeUtility.mutant.752.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      /*else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)*/
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #99:
RedBlackTreeUtility.mutant.93.c: ./RedBlackTreeUtility.c:124
*** Original
--- Mutant
***************
*** 121,127 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)
--- 121,127 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! //
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #100:
RedBlackTreeUtility.mutant.676.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != (1==1) && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #101:
RedBlackTreeUtility.mutant.60.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr < NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #102:
RedBlackTreeUtility.mutant.563.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr > NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #103:
RedBlackTreeUtility.mutant.390.c: ./RedBlackTreeUtility.c:399
*** Original
--- Mutant
***************
*** 396,402 ****
              }
           
           // otherwise, assume null and create new node, link to right child
!          wkgPtr->rightChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;
--- 396,402 ----
              }
           
           // otherwise, assume null and create new node, link to right child
!          wkgPtr->rightChildPtr = createNodeFromData ( RED,inData);
  
           // link new child back up to working node
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;


********************************************************************************
MUTANT #104:
RedBlackTreeUtility.mutant.832.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1 , ctrlCode , rowStartFlag);
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #105:
RedBlackTreeUtility.mutant.709.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr == NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #106:
RedBlackTreeUtility.mutant.283.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot != NULL)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #107:
RedBlackTreeUtility.mutant.503.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr != parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #108:
RedBlackTreeUtility.mutant.288.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (!(treeRoot == NULL))
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #109:
RedBlackTreeUtility.mutant.307.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (1==1)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #110:
RedBlackTreeUtility.mutant.1112.c: ./RedBlackTreeUtility.c:969
*** Original
--- Mutant
***************
*** 966,972 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! */
  int getMax( int one, int other )
     {
      int max = one;
--- 966,972 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! -/
  int getMax( int one, int other )
     {
      int max = one;


********************************************************************************
MUTANT #111:
RedBlackTreeUtility.mutant.731.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL || oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #112:
RedBlackTreeUtility.mutant.428.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (1==1)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #113:
RedBlackTreeUtility.mutant.380.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr >= NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #114:
RedBlackTreeUtility.mutant.387.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (1==1)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #115:
RedBlackTreeUtility.mutant.517.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (!(parentPtr->leftChildPtr == wkgPtr))
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #116:
RedBlackTreeUtility.mutant.166.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr > NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #117:
RedBlackTreeUtility.mutant.654.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (!(oldTopPtr->rightChildPtr != NULL))
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #118:
RedBlackTreeUtility.mutant.285.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot >= NULL)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #119:
RedBlackTreeUtility.mutant.287.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot < NULL)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #120:
RedBlackTreeUtility.mutant.744.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent < NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #121:
RedBlackTreeUtility.mutant.611.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                   if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #122:
RedBlackTreeUtility.mutant.298.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr == NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #123:
RedBlackTreeUtility.mutant.582.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (0==1)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #124:
RedBlackTreeUtility.mutant.59.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr > NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #125:
RedBlackTreeUtility.mutant.275.c: ./RedBlackTreeUtility.c:286
*** Original
--- Mutant
***************
*** 283,289 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *initializeRBT()
      {
       return NULL;
--- 283,289 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! %/
  RedBlackNodeType *initializeRBT()
      {
       return NULL;


********************************************************************************
MUTANT #126:
RedBlackTreeUtility.mutant.550.c: ./RedBlackTreeUtility.c:525
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #127:
RedBlackTreeUtility.mutant.1015.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot <= NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #128:
RedBlackTreeUtility.mutant.323.c: ./RedBlackTreeUtility.c:361
*** Original
--- Mutant
***************
*** 358,364 ****
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)
--- 358,364 ----
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData / (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)


********************************************************************************
MUTANT #129:
RedBlackTreeUtility.mutant.369.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (1==1)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #130:
RedBlackTreeUtility.mutant.691.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (!(oldParent != NULL && oldParent->rightChildPtr == oldTopPtr))
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #131:
RedBlackTreeUtility.mutant.279.c: ./RedBlackTreeUtility.c:305
*** Original
--- Mutant
***************
*** 302,308 ****
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! */
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables
--- 302,308 ----
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! +/
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #132:
RedBlackTreeUtility.mutant.272.c: ./RedBlackTreeUtility.c:286
*** Original
--- Mutant
***************
*** 283,289 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *initializeRBT()
      {
       return NULL;
--- 283,289 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! +/
  RedBlackNodeType *initializeRBT()
      {
       return NULL;


********************************************************************************
MUTANT #133:
RedBlackTreeUtility.mutant.706.c: ./RedBlackTreeUtility.c:689
*** Original
--- Mutant
***************
*** 686,692 ****
       RedBlackNodeType* oldParent = oldTopPtr->parentPtr;
  
       // point new top's parent to old top's parent
!      newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
       oldTopPtr->parentPtr = newTopPtr;
--- 686,692 ----
       RedBlackNodeType* oldParent = oldTopPtr->parentPtr;
  
       // point new top's parent to old top's parent
!      /*newTopPtr->parentPtr = oldParent;*/
  
       // point old top's parent to new top
       oldTopPtr->parentPtr = newTopPtr;


********************************************************************************
MUTANT #134:
RedBlackTreeUtility.mutant.658.c: ./RedBlackTreeUtility.c:656
*** Original
--- Mutant
***************
*** 653,659 ****
          }
  
       // point new top's left child to old top
!      newTopPtr->leftChildPtr = oldTopPtr;
       
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
--- 653,659 ----
          }
  
       // point new top's left child to old top
!      /*newTopPtr->leftChildPtr = oldTopPtr;*/
       
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {


********************************************************************************
MUTANT #135:
RedBlackTreeUtility.mutant.937.c: ./RedBlackTreeUtility.c:861
*** Original
--- Mutant
***************
*** 858,864 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! */
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 858,864 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! //
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #136:
RedBlackTreeUtility.mutant.595.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr <= NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #137:
RedBlackTreeUtility.mutant.452.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL || parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #138:
RedBlackTreeUtility.mutant.641.c: ./RedBlackTreeUtility.c:632
*** Original
--- Mutant
***************
*** 629,635 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 629,635 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! -/
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #139:
RedBlackTreeUtility.mutant.194.c: ./RedBlackTreeUtility.c:226
*** Original
--- Mutant
***************
*** 223,229 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! */
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;
--- 223,229 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! -/
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;


********************************************************************************
MUTANT #140:
RedBlackTreeUtility.mutant.33.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr <= NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #141:
RedBlackTreeUtility.mutant.669.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL || oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #142:
RedBlackTreeUtility.mutant.355.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < (0-1))
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #143:
RedBlackTreeUtility.mutant.565.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr = NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #144:
RedBlackTreeUtility.mutant.852.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1 , ctrlCode , rowStartFlag);
             }
  
          else


********************************************************************************
MUTANT #145:
RedBlackTreeUtility.mutant.340.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (!(wkgPtr == NULL || diff == 0))
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #146:
RedBlackTreeUtility.mutant.702.c: ./RedBlackTreeUtility.c:681
*** Original
--- Mutant
***************
*** 678,684 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 678,684 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! +/
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #147:
RedBlackTreeUtility.mutant.597.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr > NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #148:
RedBlackTreeUtility.mutant.581.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (!(parentPtr->rightChildPtr == wkgPtr))
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #149:
RedBlackTreeUtility.mutant.864.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1 , ctrlCode , rowStartFlag);
             }              
         }
     }


********************************************************************************
MUTANT #150:
RedBlackTreeUtility.mutant.765.c: ./RedBlackTreeUtility.c:729
*** Original
--- Mutant
***************
*** 726,732 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
--- 726,732 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! -/
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;


********************************************************************************
MUTANT #151:
RedBlackTreeUtility.mutant.722.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent <= NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #152:
RedBlackTreeUtility.mutant.289.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (0==1)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #153:
RedBlackTreeUtility.mutant.328.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff <= 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #154:
RedBlackTreeUtility.mutant.350.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff >= 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #155:
RedBlackTreeUtility.mutant.867.c: ./RedBlackTreeUtility.c:809
*** Original
--- Mutant
***************
*** 806,812 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )
--- 806,812 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! +/
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )


********************************************************************************
MUTANT #156:
RedBlackTreeUtility.mutant.851.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel , rowStartFlag, workingLevel + 1, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #157:
RedBlackTreeUtility.mutant.326.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff != 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #158:
RedBlackTreeUtility.mutant.1107.c: ./RedBlackTreeUtility.c:957
*** Original
--- Mutant
***************
*** 954,960 ****
  
      displayChars( leadingSpaces, SPACE );
    
!     printf( "%c", data );         
     }
  
  /*
--- 954,960 ----
  
      displayChars( leadingSpaces, SPACE );
    
!     printf ( data , "%c");         
     }
  
  /*


********************************************************************************
MUTANT #159:
RedBlackTreeUtility.mutant.127.c: ./RedBlackTreeUtility.c:159
*** Original
--- Mutant
***************
*** 156,162 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 156,162 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! //
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #160:
RedBlackTreeUtility.mutant.409.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr <= NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #161:
RedBlackTreeUtility.mutant.453.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr = NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #162:
RedBlackTreeUtility.mutant.79.c: ./RedBlackTreeUtility.c:90
*** Original
--- Mutant
***************
*** 87,93 ****
       newNode->data = data;
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
!      newNode->rightChildPtr = NULL;
  
       return newNode;
      }
--- 87,93 ----
       newNode->data = data;
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
!      /*newNode->rightChildPtr = NULL;*/
  
       return newNode;
      }


********************************************************************************
MUTANT #163:
RedBlackTreeUtility.mutant.699.c: ./RedBlackTreeUtility.c:668
*** Original
--- Mutant
***************
*** 665,671 ****
          }
  
       // return new top pointer
!      return newTopPtr;
      }
  
  /*
--- 665,671 ----
          }
  
       // return new top pointer
!      /*return newTopPtr;*/
      }
  
  /*


********************************************************************************
MUTANT #164:
RedBlackTreeUtility.mutant.718.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (1==1)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #165:
RedBlackTreeUtility.mutant.671.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (!(oldParent != NULL && oldParent->leftChildPtr == oldTopPtr))
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #166:
RedBlackTreeUtility.mutant.774.c: ./RedBlackTreeUtility.c:754
*** Original
--- Mutant
***************
*** 751,757 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! */
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 751,757 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! -/
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #167:
RedBlackTreeUtility.mutant.743.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent > NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #168:
RedBlackTreeUtility.mutant.1059.c: ./RedBlackTreeUtility.c:937
*** Original
--- Mutant
***************
*** 934,940 ****
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! */
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {
--- 934,940 ----
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! %/
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {


********************************************************************************
MUTANT #169:
RedBlackTreeUtility.mutant.467.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr < NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #170:
RedBlackTreeUtility.mutant.580.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr < wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #171:
RedBlackTreeUtility.mutant.693.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (1==1)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #172:
RedBlackTreeUtility.mutant.193.c: ./RedBlackTreeUtility.c:226
*** Original
--- Mutant
***************
*** 223,229 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! */
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;
--- 223,229 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! +/
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;


********************************************************************************
MUTANT #173:
RedBlackTreeUtility.mutant.935.c: ./RedBlackTreeUtility.c:861
*** Original
--- Mutant
***************
*** 858,864 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! */
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 858,864 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! +/
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #174:
RedBlackTreeUtility.mutant.533.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr > NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #175:
RedBlackTreeUtility.mutant.159.c: ./RedBlackTreeUtility.c:193
*** Original
--- Mutant
***************
*** 190,196 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 190,196 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! +/
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #176:
RedBlackTreeUtility.mutant.663.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent < NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #177:
RedBlackTreeUtility.mutant.773.c: ./RedBlackTreeUtility.c:754
*** Original
--- Mutant
***************
*** 751,757 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! */
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 751,757 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! +/
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #178:
RedBlackTreeUtility.mutant.362.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr >= NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #179:
RedBlackTreeUtility.mutant.313.c: ./RedBlackTreeUtility.c:338
*** Original
--- Mutant
***************
*** 335,341 ****
           // function: resolveRBT
           resolveRBT(&treeRoot, insertedNodePtr);
  
!          return insertedNodePtr;
          }
  
       return treeRoot;
--- 335,341 ----
           // function: resolveRBT
           resolveRBT(&treeRoot, insertedNodePtr);
  
!          /*return insertedNodePtr;*/
          }
  
       return treeRoot;


********************************************************************************
MUTANT #180:
RedBlackTreeUtility.mutant.421.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr >= NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #181:
RedBlackTreeUtility.mutant.820.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1 , ctrlCode , rowStartFlag);
             }
    
          else


********************************************************************************
MUTANT #182:
RedBlackTreeUtility.mutant.618.c: ./RedBlackTreeUtility.c:586
*** Original
--- Mutant
***************
*** 583,589 ****
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
!              else
                  {
                   // rotate right, old top = parent, new top = working node
                   rotateRight(wkgPtr, parentPtr);
--- 583,589 ----
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
!              /*else*/
                  {
                   // rotate right, old top = parent, new top = working node
                   rotateRight(wkgPtr, parentPtr);


********************************************************************************
MUTANT #183:
RedBlackTreeUtility.mutant.105.c: ./RedBlackTreeUtility.c:129
*** Original
--- Mutant
***************
*** 126,132 ****
      {     
       if (wkgPtr != NULL)
          {
!          displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
              {
--- 126,132 ----
      {     
       if (wkgPtr != NULL)
          {
!          displayInOrder ( rowStartFlag,wkgPtr->leftChildPtr);
  
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #184:
RedBlackTreeUtility.mutant.336.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == -1)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #185:
RedBlackTreeUtility.mutant.600.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (0==1)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #186:
RedBlackTreeUtility.mutant.167.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr < NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #187:
RedBlackTreeUtility.mutant.360.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr == NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #188:
RedBlackTreeUtility.mutant.319.c: ./RedBlackTreeUtility.c:357
*** Original
--- Mutant
***************
*** 354,360 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! */
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
--- 354,360 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! //
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #189:
RedBlackTreeUtility.mutant.737.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if ((1==1) && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #190:
RedBlackTreeUtility.mutant.810.c: ./RedBlackTreeUtility.c:775
*** Original
--- Mutant
***************
*** 772,778 ****
         {
          if( workingNode->leftChildPtr != NULL )
             {
!             displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
--- 772,778 ----
         {
          if( workingNode->leftChildPtr != NULL )
             {
!             displayAtTreeLevel ( nodeHeight, workingNode->leftChildPtr,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    


********************************************************************************
MUTANT #191:
RedBlackTreeUtility.mutant.187.c: ./RedBlackTreeUtility.c:210
*** Original
--- Mutant
***************
*** 207,213 ****
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
--- 207,213 ----
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayPreOrder ( rowStartFlag,wkgPtr->leftChildPtr);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }


********************************************************************************
MUTANT #192:
RedBlackTreeUtility.mutant.712.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr > NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #193:
RedBlackTreeUtility.mutant.724.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent > NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #194:
RedBlackTreeUtility.mutant.195.c: ./RedBlackTreeUtility.c:226
*** Original
--- Mutant
***************
*** 223,229 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! */
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;
--- 223,229 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! //
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;


********************************************************************************
MUTANT #195:
RedBlackTreeUtility.mutant.238.c: ./RedBlackTreeUtility.c:257
*** Original
--- Mutant
***************
*** 254,260 ****
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! */
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;
--- 254,260 ----
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! +/
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;


********************************************************************************
MUTANT #196:
RedBlackTreeUtility.mutant.325.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr != NULL || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #197:
RedBlackTreeUtility.mutant.558.c: ./RedBlackTreeUtility.c:541
*** Original
--- Mutant
***************
*** 538,544 ****
                   rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT(treeRoot, parentPtr);
                  }
              }
           // otherwise, check for right cases
--- 538,544 ----
                   rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT ( parentPtr,treeRoot);
                  }
              }
           // otherwise, check for right cases


********************************************************************************
MUTANT #198:
RedBlackTreeUtility.mutant.619.c: ./RedBlackTreeUtility.c:586
*** Original
--- Mutant
***************
*** 583,589 ****
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
!              else
                  {
                   // rotate right, old top = parent, new top = working node
                   rotateRight(wkgPtr, parentPtr);
--- 583,589 ----
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
!              
                  {
                   // rotate right, old top = parent, new top = working node
                   rotateRight(wkgPtr, parentPtr);


********************************************************************************
MUTANT #199:
RedBlackTreeUtility.mutant.189.c: ./RedBlackTreeUtility.c:211
*** Original
--- Mutant
***************
*** 208,214 ****
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
  
--- 208,214 ----
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPreOrder ( rowStartFlag,wkgPtr->rightChildPtr);
          }
      }
  


********************************************************************************
MUTANT #200:
RedBlackTreeUtility.mutant.364.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr < NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #201:
RedBlackTreeUtility.mutant.241.c: ./RedBlackTreeUtility.c:257
*** Original
--- Mutant
***************
*** 254,260 ****
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! */
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;
--- 254,260 ----
  Device input/---: none
  Device output/---: none
  Dependencies: getMax
! %/
  int findTreeHeight( RedBlackNodeType *localPtr )
      {
       int leftHeight, rightHeight;


********************************************************************************
MUTANT #202:
RedBlackTreeUtility.mutant.662.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent > NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #203:
RedBlackTreeUtility.mutant.305.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (!(insertedNodePtr != NULL))
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #204:
RedBlackTreeUtility.mutant.837.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr < NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #205:
RedBlackTreeUtility.mutant.128.c: ./RedBlackTreeUtility.c:159
*** Original
--- Mutant
***************
*** 156,162 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 156,162 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! %/
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #206:
RedBlackTreeUtility.mutant.329.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr >= NULL || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #207:
RedBlackTreeUtility.mutant.803.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr >= NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #208:
RedBlackTreeUtility.mutant.304.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      /*if (insertedNodePtr != NULL)*/
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #209:
RedBlackTreeUtility.mutant.1114.c: ./RedBlackTreeUtility.c:969
*** Original
--- Mutant
***************
*** 966,972 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! */
  int getMax( int one, int other )
     {
      int max = one;
--- 966,972 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! %/
  int getMax( int one, int other )
     {
      int max = one;


********************************************************************************
MUTANT #210:
RedBlackTreeUtility.mutant.342.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (1==1)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #211:
RedBlackTreeUtility.mutant.80.c: ./RedBlackTreeUtility.c:92
*** Original
--- Mutant
***************
*** 89,95 ****
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
  
!      return newNode;
      }
  
  /*
--- 89,95 ----
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
  
!      /*return newNode;*/
      }
  
  /*


********************************************************************************
MUTANT #212:
RedBlackTreeUtility.mutant.91.c: ./RedBlackTreeUtility.c:124
*** Original
--- Mutant
***************
*** 121,127 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)
--- 121,127 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! +/
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #213:
RedBlackTreeUtility.mutant.598.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr < NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #214:
RedBlackTreeUtility.mutant.767.c: ./RedBlackTreeUtility.c:729
*** Original
--- Mutant
***************
*** 726,732 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
--- 726,732 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! %/
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;


********************************************************************************
MUTANT #215:
RedBlackTreeUtility.mutant.393.c: ./RedBlackTreeUtility.c:405
*** Original
--- Mutant
***************
*** 402,408 ****
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;
  
           // return new node (new right child)
!          return wkgPtr->rightChildPtr;
          }
      }
  
--- 402,408 ----
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;
  
           // return new node (new right child)
!          /*return wkgPtr->rightChildPtr;*/
          }
      }
  


********************************************************************************
MUTANT #216:
RedBlackTreeUtility.mutant.318.c: ./RedBlackTreeUtility.c:357
*** Original
--- Mutant
***************
*** 354,360 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! */
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
--- 354,360 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! -/
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #217:
RedBlackTreeUtility.mutant.715.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      /*if (oldTopPtr->leftChildPtr != NULL)*/
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #218:
RedBlackTreeUtility.mutant.682.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent < NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #219:
RedBlackTreeUtility.mutant.404.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr < NULL;
      }
  
  /*


********************************************************************************
MUTANT #220:
RedBlackTreeUtility.mutant.679.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent <= NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #221:
RedBlackTreeUtility.mutant.119.c: ./RedBlackTreeUtility.c:141
*** Original
--- Mutant
***************
*** 138,144 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
--- 138,144 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf ( wkgPtr->data,"%c/%c", (char)wkgPtr->color);
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }


********************************************************************************
MUTANT #222:
RedBlackTreeUtility.mutant.500.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr < NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #223:
RedBlackTreeUtility.mutant.121.c: ./RedBlackTreeUtility.c:143
*** Original
--- Mutant
***************
*** 140,146 ****
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
  
--- 140,146 ----
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayInOrder ( rowStartFlag,wkgPtr->rightChildPtr);
          }
      }
  


********************************************************************************
MUTANT #224:
RedBlackTreeUtility.mutant.532.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr >= NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #225:
RedBlackTreeUtility.mutant.648.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr <= NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #226:
RedBlackTreeUtility.mutant.885.c: ./RedBlackTreeUtility.c:814
*** Original
--- Mutant
***************
*** 811,817 ****
     {
      if( numChars > 0 )
         {
!         printf( "%c", outChar );
        
          displayChars( numChars - 1, outChar );
         }
--- 811,817 ----
     {
      if( numChars > 0 )
         {
!         printf ( outChar , "%c");
        
          displayChars( numChars - 1, outChar );
         }


********************************************************************************
MUTANT #227:
RedBlackTreeUtility.mutant.58.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr >= NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #228:
RedBlackTreeUtility.mutant.370.c: ./RedBlackTreeUtility.c:376
*** Original
--- Mutant
***************
*** 373,379 ****
           if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
!              return insertHelper(wkgPtr->leftChildPtr, inData);
              }
  
           // otherwise, assume null and create new node, link to left child
--- 373,379 ----
           if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
!              return insertHelper ( inData,wkgPtr->leftChildPtr);
              }
  
           // otherwise, assume null and create new node, link to left child


********************************************************************************
MUTANT #229:
RedBlackTreeUtility.mutant.414.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      /*if (parentPtr != NULL)*/
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #230:
RedBlackTreeUtility.mutant.25.c: ./RedBlackTreeUtility.c:31
*** Original
--- Mutant
***************
*** 28,34 ****
           free(localPtr);
          }
  
!      return NULL;
      }
  
  /*
--- 28,34 ----
           free(localPtr);
          }
  
!      /*return NULL;*/
      }
  
  /*


********************************************************************************
MUTANT #231:
RedBlackTreeUtility.mutant.758.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if ((1==1) && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #232:
RedBlackTreeUtility.mutant.46.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr <= NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #233:
RedBlackTreeUtility.mutant.733.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (!(oldParent != NULL && oldParent->leftChildPtr == oldTopPtr))
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #234:
RedBlackTreeUtility.mutant.1057.c: ./RedBlackTreeUtility.c:937
*** Original
--- Mutant
***************
*** 934,940 ****
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! */
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {
--- 934,940 ----
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! -/
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {


********************************************************************************
MUTANT #235:
RedBlackTreeUtility.mutant.273.c: ./RedBlackTreeUtility.c:286
*** Original
--- Mutant
***************
*** 283,289 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *initializeRBT()
      {
       return NULL;
--- 283,289 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! -/
  RedBlackNodeType *initializeRBT()
      {
       return NULL;


********************************************************************************
MUTANT #236:
RedBlackTreeUtility.mutant.640.c: ./RedBlackTreeUtility.c:632
*** Original
--- Mutant
***************
*** 629,635 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 629,635 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! +/
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #237:
RedBlackTreeUtility.mutant.732.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent = NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #238:
RedBlackTreeUtility.mutant.160.c: ./RedBlackTreeUtility.c:193
*** Original
--- Mutant
***************
*** 190,196 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 190,196 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPreOrder (recursively)
! -/
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #239:
RedBlackTreeUtility.mutant.776.c: ./RedBlackTreeUtility.c:754
*** Original
--- Mutant
***************
*** 751,757 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! */
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 751,757 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! %/
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #240:
RedBlackTreeUtility.mutant.363.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr > NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #241:
RedBlackTreeUtility.mutant.76.c: ./RedBlackTreeUtility.c:87
*** Original
--- Mutant
***************
*** 84,90 ****
          (RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));
  
       newNode->color = (Colors)nodeColor;
!      newNode->data = data;
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
--- 84,90 ----
          (RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));
  
       newNode->color = (Colors)nodeColor;
!      /*newNode->data = data;*/
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;


********************************************************************************
MUTANT #242:
RedBlackTreeUtility.mutant.99.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr < NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #243:
RedBlackTreeUtility.mutant.346.c: ./RedBlackTreeUtility.c:367
*** Original
--- Mutant
***************
*** 364,370 ****
       if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
!          return NULL;
          }
       // otherwise, check if incoming data is less than working node
       else if (diff < 0)
--- 364,370 ----
       if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
!          /*return NULL;*/
          }
       // otherwise, check if incoming data is less than working node
       else if (diff < 0)


********************************************************************************
MUTANT #244:
RedBlackTreeUtility.mutant.14.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr >= NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #245:
RedBlackTreeUtility.mutant.246.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr < NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #246:
RedBlackTreeUtility.mutant.535.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (!(greatGrParentPtr == NULL))
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #247:
RedBlackTreeUtility.mutant.576.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr != wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #248:
RedBlackTreeUtility.mutant.291.c: ./RedBlackTreeUtility.c:316
*** Original
--- Mutant
***************
*** 313,319 ****
          {
           // create new root
              // function: createNodeFromData
!          insertedNodePtr = createNodeFromData(inData, RED);
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
--- 313,319 ----
          {
           // create new root
              // function: createNodeFromData
!          insertedNodePtr = createNodeFromData ( RED,inData);
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists


********************************************************************************
MUTANT #249:
RedBlackTreeUtility.mutant.650.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr > NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #250:
RedBlackTreeUtility.mutant.836.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr > NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #251:
RedBlackTreeUtility.mutant.1044.c: ./RedBlackTreeUtility.c:913
*** Original
--- Mutant
***************
*** 910,916 ****
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
!                           displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );
             }
--- 910,916 ----
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
!                           displayLevel , &rowStartFlag, workingLevel, ctrlCode );
            
              printf( "\n" );
             }


********************************************************************************
MUTANT #252:
RedBlackTreeUtility.mutant.459.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if ((1==1) && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #253:
RedBlackTreeUtility.mutant.330.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff >= 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #254:
RedBlackTreeUtility.mutant.555.c: ./RedBlackTreeUtility.c:535
*** Original
--- Mutant
***************
*** 532,538 ****
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
!              else
                  {
                   // rotate left, old top = parent, new top = working node
                   rotateLeft(wkgPtr, parentPtr);
--- 532,538 ----
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
!              
                  {
                   // rotate left, old top = parent, new top = working node
                   rotateLeft(wkgPtr, parentPtr);


********************************************************************************
MUTANT #255:
RedBlackTreeUtility.mutant.479.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if ((1==1) && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #256:
RedBlackTreeUtility.mutant.423.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr < NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #257:
RedBlackTreeUtility.mutant.317.c: ./RedBlackTreeUtility.c:357
*** Original
--- Mutant
***************
*** 354,360 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! */
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
--- 354,360 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! +/
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #258:
RedBlackTreeUtility.mutant.497.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr <= NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #259:
RedBlackTreeUtility.mutant.766.c: ./RedBlackTreeUtility.c:729
*** Original
--- Mutant
***************
*** 726,732 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
--- 726,732 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! //
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;


********************************************************************************
MUTANT #260:
RedBlackTreeUtility.mutant.333.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr < NULL || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #261:
RedBlackTreeUtility.mutant.723.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent >= NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #262:
RedBlackTreeUtility.mutant.819.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel , rowStartFlag, workingLevel + 1, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #263:
RedBlackTreeUtility.mutant.47.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr >= NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #264:
RedBlackTreeUtility.mutant.309.c: ./RedBlackTreeUtility.c:332
*** Original
--- Mutant
***************
*** 329,335 ****
          {
           // print inserting/resolving statement
           // function: printf
!          printf("\nInserting %c and resolving\n", inData);
  
           // call resolver function to resolve
           // function: resolveRBT
--- 329,335 ----
          {
           // print inserting/resolving statement
           // function: printf
!          printf ( inData,"\nInserting %c and resolving\n");
  
           // call resolver function to resolve
           // function: resolveRBT


********************************************************************************
MUTANT #265:
RedBlackTreeUtility.mutant.531.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr <= NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #266:
RedBlackTreeUtility.mutant.761.c: ./RedBlackTreeUtility.c:717
*** Original
--- Mutant
***************
*** 714,720 ****
          }
  
       // return new top pointer
!      return newTopPtr;
      }
  
  /*
--- 714,720 ----
          }
  
       // return new top pointer
!      /*return newTopPtr;*/
      }
  
  /*


********************************************************************************
MUTANT #267:
RedBlackTreeUtility.mutant.713.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr < NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #268:
RedBlackTreeUtility.mutant.244.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr >= NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #269:
RedBlackTreeUtility.mutant.561.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr <= NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #270:
RedBlackTreeUtility.mutant.614.c: ./RedBlackTreeUtility.c:576
*** Original
--- Mutant
***************
*** 573,579 ****
                       greatGrParentPtr->leftChildPtr = newTopPtr;
                      }
                   // otherwise, assume grandparent is right child
!                  else
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->rightChildPtr = newTopPtr;
--- 573,579 ----
                       greatGrParentPtr->leftChildPtr = newTopPtr;
                      }
                   // otherwise, assume grandparent is right child
!                  
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->rightChildPtr = newTopPtr;


********************************************************************************
MUTANT #271:
RedBlackTreeUtility.mutant.276.c: ./RedBlackTreeUtility.c:289
*** Original
--- Mutant
***************
*** 286,292 ****
  */
  RedBlackNodeType *initializeRBT()
      {
!      return NULL;
      }
  
  /*
--- 286,292 ----
  */
  RedBlackNodeType *initializeRBT()
      {
!      /*return NULL;*/
      }
  
  /*


********************************************************************************
MUTANT #272:
RedBlackTreeUtility.mutant.9.c: ./RedBlackTreeUtility.c:21
*** Original
--- Mutant
***************
*** 18,24 ****
  Device input/---: none
  Device output/---: none
  Dependencies: free
! */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)
--- 18,24 ----
  Device input/---: none
  Device output/---: none
  Dependencies: free
! -/
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)


********************************************************************************
MUTANT #273:
RedBlackTreeUtility.mutant.1018.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot < NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #274:
RedBlackTreeUtility.mutant.367.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (!(wkgPtr->leftChildPtr != NULL))
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #275:
RedBlackTreeUtility.mutant.594.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr != NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #276:
RedBlackTreeUtility.mutant.18.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      /*if (localPtr != NULL)*/
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #277:
RedBlackTreeUtility.mutant.353.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < -1)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #278:
RedBlackTreeUtility.mutant.335.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 1)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #279:
RedBlackTreeUtility.mutant.314.c: ./RedBlackTreeUtility.c:341
*** Original
--- Mutant
***************
*** 338,344 ****
           return insertedNodePtr;
          }
  
!      return treeRoot;
      }
  
  /*
--- 338,344 ----
           return insertedNodePtr;
          }
  
!      /*return treeRoot;*/
      }
  
  /*


********************************************************************************
MUTANT #280:
RedBlackTreeUtility.mutant.381.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr > NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #281:
RedBlackTreeUtility.mutant.547.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                   if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #282:
RedBlackTreeUtility.mutant.292.c: ./RedBlackTreeUtility.c:316
*** Original
--- Mutant
***************
*** 313,319 ****
          {
           // create new root
              // function: createNodeFromData
!          insertedNodePtr = createNodeFromData(inData, RED);
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
--- 313,319 ----
          {
           // create new root
              // function: createNodeFromData
!          /*insertedNodePtr = createNodeFromData(inData, RED);*/
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists


********************************************************************************
MUTANT #283:
RedBlackTreeUtility.mutant.515.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr > wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #284:
RedBlackTreeUtility.mutant.711.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr >= NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #285:
RedBlackTreeUtility.mutant.281.c: ./RedBlackTreeUtility.c:305
*** Original
--- Mutant
***************
*** 302,308 ****
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! */
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables
--- 302,308 ----
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! //
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #286:
RedBlackTreeUtility.mutant.391.c: ./RedBlackTreeUtility.c:399
*** Original
--- Mutant
***************
*** 396,402 ****
              }
           
           // otherwise, assume null and create new node, link to right child
!          wkgPtr->rightChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;
--- 396,402 ----
              }
           
           // otherwise, assume null and create new node, link to right child
!          /*wkgPtr->rightChildPtr = createNodeFromData(inData, RED);*/
  
           // link new child back up to working node
           wkgPtr->rightChildPtr->parentPtr = wkgPtr;


********************************************************************************
MUTANT #287:
RedBlackTreeUtility.mutant.804.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr > NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #288:
RedBlackTreeUtility.mutant.92.c: ./RedBlackTreeUtility.c:124
*** Original
--- Mutant
***************
*** 121,127 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)
--- 121,127 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! -/
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #289:
RedBlackTreeUtility.mutant.613.c: ./RedBlackTreeUtility.c:576
*** Original
--- Mutant
***************
*** 573,579 ****
                       greatGrParentPtr->leftChildPtr = newTopPtr;
                      }
                   // otherwise, assume grandparent is right child
!                  else
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->rightChildPtr = newTopPtr;
--- 573,579 ----
                       greatGrParentPtr->leftChildPtr = newTopPtr;
                      }
                   // otherwise, assume grandparent is right child
!                  /*else*/
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->rightChildPtr = newTopPtr;


********************************************************************************
MUTANT #290:
RedBlackTreeUtility.mutant.403.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr > NULL;
      }
  
  /*


********************************************************************************
MUTANT #291:
RedBlackTreeUtility.mutant.647.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr == NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #292:
RedBlackTreeUtility.mutant.375.c: ./RedBlackTreeUtility.c:386
*** Original
--- Mutant
***************
*** 383,389 ****
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;
  
           // return new node (new left child)
!          return wkgPtr->leftChildPtr;
          }
       // otherwise, assume data is greater than working node
       else
--- 383,389 ----
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;
  
           // return new node (new left child)
!          /*return wkgPtr->leftChildPtr;*/
          }
       // otherwise, assume data is greater than working node
       else


********************************************************************************
MUTANT #293:
RedBlackTreeUtility.mutant.499.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr > NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #294:
RedBlackTreeUtility.mutant.465.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr >= NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #295:
RedBlackTreeUtility.mutant.1045.c: ./RedBlackTreeUtility.c:913
*** Original
--- Mutant
***************
*** 910,916 ****
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
!                           displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );
             }
--- 910,916 ----
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
!                           displayLevel, workingLevel , ctrlCode , &rowStartFlag);
            
              printf( "\n" );
             }


********************************************************************************
MUTANT #296:
RedBlackTreeUtility.mutant.802.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr <= NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #297:
RedBlackTreeUtility.mutant.870.c: ./RedBlackTreeUtility.c:809
*** Original
--- Mutant
***************
*** 806,812 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )
--- 806,812 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! %/
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )


********************************************************************************
MUTANT #298:
RedBlackTreeUtility.mutant.938.c: ./RedBlackTreeUtility.c:861
*** Original
--- Mutant
***************
*** 858,864 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! */
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 858,864 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: toPower, displayValue
! %/
  void displayEmptyNodeSpaces( int nodeHeight, 
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #299:
RedBlackTreeUtility.mutant.529.c: ./RedBlackTreeUtility.c:510
*** Original
--- Mutant
***************
*** 507,513 ****
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
!                  newTopPtr = rotateRight(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
--- 507,513 ----
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
!                  /*newTopPtr = rotateRight(parentPtr, grParentPtr);*/
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)


********************************************************************************
MUTANT #300:
RedBlackTreeUtility.mutant.34.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr >= NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #301:
RedBlackTreeUtility.mutant.474.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr = NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #302:
RedBlackTreeUtility.mutant.463.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr == NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #303:
RedBlackTreeUtility.mutant.572.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   || grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #304:
RedBlackTreeUtility.mutant.507.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr < parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #305:
RedBlackTreeUtility.mutant.642.c: ./RedBlackTreeUtility.c:632
*** Original
--- Mutant
***************
*** 629,635 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 629,635 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! //
  RedBlackNodeType *rotateLeft( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #306:
RedBlackTreeUtility.mutant.659.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent == NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #307:
RedBlackTreeUtility.mutant.504.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr <= parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #308:
RedBlackTreeUtility.mutant.705.c: ./RedBlackTreeUtility.c:681
*** Original
--- Mutant
***************
*** 678,684 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 678,684 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! %/
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #309:
RedBlackTreeUtility.mutant.412.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr < NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #310:
RedBlackTreeUtility.mutant.1058.c: ./RedBlackTreeUtility.c:937
*** Original
--- Mutant
***************
*** 934,940 ****
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! */
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {
--- 934,940 ----
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! //
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {


********************************************************************************
MUTANT #311:
RedBlackTreeUtility.mutant.74.c: ./RedBlackTreeUtility.c:84
*** Original
--- Mutant
***************
*** 81,87 ****
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
!         (RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));
  
       newNode->color = (Colors)nodeColor;
       newNode->data = data;
--- 81,87 ----
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
!         /*(RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));*/
  
       newNode->color = (Colors)nodeColor;
       newNode->data = data;


********************************************************************************
MUTANT #312:
RedBlackTreeUtility.mutant.373.c: ./RedBlackTreeUtility.c:380
*** Original
--- Mutant
***************
*** 377,383 ****
              }
  
           // otherwise, assume null and create new node, link to left child
!          wkgPtr->leftChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;
--- 377,383 ----
              }
  
           // otherwise, assume null and create new node, link to left child
!          /*wkgPtr->leftChildPtr = createNodeFromData(inData, RED);*/
  
           // link new child back up to working node
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;


********************************************************************************
MUTANT #313:
RedBlackTreeUtility.mutant.284.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot <= NULL)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #314:
RedBlackTreeUtility.mutant.379.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr <= NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #315:
RedBlackTreeUtility.mutant.498.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr >= NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #316:
RedBlackTreeUtility.mutant.97.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr >= NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #317:
RedBlackTreeUtility.mutant.516.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr < wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #318:
RedBlackTreeUtility.mutant.764.c: ./RedBlackTreeUtility.c:729
*** Original
--- Mutant
***************
*** 726,732 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
--- 726,732 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! +/
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;


********************************************************************************
MUTANT #319:
RedBlackTreeUtility.mutant.332.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff > 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #320:
RedBlackTreeUtility.mutant.710.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr <= NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #321:
RedBlackTreeUtility.mutant.165.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr >= NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #322:
RedBlackTreeUtility.mutant.442.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr == NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #323:
RedBlackTreeUtility.mutant.78.c: ./RedBlackTreeUtility.c:89
*** Original
--- Mutant
***************
*** 86,92 ****
       newNode->color = (Colors)nodeColor;
       newNode->data = data;
       newNode->parentPtr = NULL;
!      newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
  
       return newNode;
--- 86,92 ----
       newNode->color = (Colors)nodeColor;
       newNode->data = data;
       newNode->parentPtr = NULL;
!      /*newNode->leftChildPtr = NULL;*/
       newNode->rightChildPtr = NULL;
  
       return newNode;


********************************************************************************
MUTANT #324:
RedBlackTreeUtility.mutant.599.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (!(greatGrParentPtr == NULL))
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #325:
RedBlackTreeUtility.mutant.419.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr == NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #326:
RedBlackTreeUtility.mutant.8.c: ./RedBlackTreeUtility.c:21
*** Original
--- Mutant
***************
*** 18,24 ****
  Device input/---: none
  Device output/---: none
  Dependencies: free
! */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)
--- 18,24 ----
  Device input/---: none
  Device output/---: none
  Dependencies: free
! +/
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
       if (localPtr != NULL)


********************************************************************************
MUTANT #327:
RedBlackTreeUtility.mutant.750.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL || oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #328:
RedBlackTreeUtility.mutant.738.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != (1==1) && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #329:
RedBlackTreeUtility.mutant.372.c: ./RedBlackTreeUtility.c:380
*** Original
--- Mutant
***************
*** 377,383 ****
              }
  
           // otherwise, assume null and create new node, link to left child
!          wkgPtr->leftChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;
--- 377,383 ----
              }
  
           // otherwise, assume null and create new node, link to left child
!          wkgPtr->leftChildPtr = createNodeFromData ( RED,inData);
  
           // link new child back up to working node
           wkgPtr->leftChildPtr->parentPtr = wkgPtr;


********************************************************************************
MUTANT #330:
RedBlackTreeUtility.mutant.345.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == (0==1) || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #331:
RedBlackTreeUtility.mutant.402.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr >= NULL;
      }
  
  /*


********************************************************************************
MUTANT #332:
RedBlackTreeUtility.mutant.83.c: ./RedBlackTreeUtility.c:106
*** Original
--- Mutant
***************
*** 103,109 ****
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);
--- 103,109 ----
  Device input/---: none
  Device output/---: none
  Dependencies: one line of code - createNodeFromData
! +/
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
       return createNodeFromData(srcPtr->data, srcPtr->color);


********************************************************************************
MUTANT #333:
RedBlackTreeUtility.mutant.675.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if ((1==1) && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #334:
RedBlackTreeUtility.mutant.1041.c: ./RedBlackTreeUtility.c:912
*** Original
--- Mutant
***************
*** 909,915 ****
             {
              rowStartFlag = true;
            
!             displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );
--- 909,915 ----
             {
              rowStartFlag = true;
            
!             displayAtTreeLevel ( nodeHeight, rbTreeRoot, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );


********************************************************************************
MUTANT #335:
RedBlackTreeUtility.mutant.426.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (!(grParentPtr != NULL))
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #336:
RedBlackTreeUtility.mutant.35.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr > NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #337:
RedBlackTreeUtility.mutant.649.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr >= NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #338:
RedBlackTreeUtility.mutant.408.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr == NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #339:
RedBlackTreeUtility.mutant.869.c: ./RedBlackTreeUtility.c:809
*** Original
--- Mutant
***************
*** 806,812 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )
--- 806,812 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! //
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )


********************************************************************************
MUTANT #340:
RedBlackTreeUtility.mutant.274.c: ./RedBlackTreeUtility.c:286
*** Original
--- Mutant
***************
*** 283,289 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *initializeRBT()
      {
       return NULL;
--- 283,289 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! //
  RedBlackNodeType *initializeRBT()
      {
       return NULL;


********************************************************************************
MUTANT #341:
RedBlackTreeUtility.mutant.243.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr <= NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #342:
RedBlackTreeUtility.mutant.473.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL || unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #343:
RedBlackTreeUtility.mutant.670.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent = NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #344:
RedBlackTreeUtility.mutant.196.c: ./RedBlackTreeUtility.c:226
*** Original
--- Mutant
***************
*** 223,229 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! */
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;
--- 223,229 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: displayInOrder, displayPostOrder, displayPreOrder, printf
! %/
  void displayTree( RedBlackNodeType *rootPtr, ControlCodes traverseCode )
      {
       bool rowStartFlag = true;


********************************************************************************
MUTANT #345:
RedBlackTreeUtility.mutant.596.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr >= NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #346:
RedBlackTreeUtility.mutant.132.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr > NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #347:
RedBlackTreeUtility.mutant.834.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr <= NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #348:
RedBlackTreeUtility.mutant.721.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent == NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #349:
RedBlackTreeUtility.mutant.466.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr > NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #350:
RedBlackTreeUtility.mutant.172.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (1==1)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #351:
RedBlackTreeUtility.mutant.300.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr >= NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #352:
RedBlackTreeUtility.mutant.410.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr >= NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #353:
RedBlackTreeUtility.mutant.57.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr <= NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #354:
RedBlackTreeUtility.mutant.480.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != (1==1) && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #355:
RedBlackTreeUtility.mutant.554.c: ./RedBlackTreeUtility.c:535
*** Original
--- Mutant
***************
*** 532,538 ****
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
!              else
                  {
                   // rotate left, old top = parent, new top = working node
                   rotateLeft(wkgPtr, parentPtr);
--- 532,538 ----
                   swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
!              /*else*/
                  {
                   // rotate left, old top = parent, new top = working node
                   rotateLeft(wkgPtr, parentPtr);


********************************************************************************
MUTANT #356:
RedBlackTreeUtility.mutant.73.c: ./RedBlackTreeUtility.c:80
*** Original
--- Mutant
***************
*** 77,83 ****
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! */
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 
--- 77,83 ----
  Device input/---: none
  Device output/---: none
  Dependencies: malloc
! %/
  RedBlackNodeType *createNodeFromData( char data, int nodeColor )
      {
       RedBlackNodeType* newNode = 


********************************************************************************
MUTANT #357:
RedBlackTreeUtility.mutant.302.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr < NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #358:
RedBlackTreeUtility.mutant.496.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr == NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #359:
RedBlackTreeUtility.mutant.286.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot > NULL)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #360:
RedBlackTreeUtility.mutant.444.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr >= NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #361:
RedBlackTreeUtility.mutant.131.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr >= NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #362:
RedBlackTreeUtility.mutant.742.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent >= NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #363:
RedBlackTreeUtility.mutant.560.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr == NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #364:
RedBlackTreeUtility.mutant.681.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent > NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #365:
RedBlackTreeUtility.mutant.989.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,884 ****
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
         }
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut, nodeHeight , rowStartFlag , displayLevel);
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #366:
RedBlackTreeUtility.mutant.443.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr <= NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #367:
RedBlackTreeUtility.mutant.797.c: ./RedBlackTreeUtility.c:768
*** Original
--- Mutant
***************
*** 765,771 ****
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
      else
--- 765,771 ----
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut, nodeHeight , rowStartFlag , workingLevel);
         }
    
      else


********************************************************************************
MUTANT #368:
RedBlackTreeUtility.mutant.320.c: ./RedBlackTreeUtility.c:357
*** Original
--- Mutant
***************
*** 354,360 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! */
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
--- 354,360 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromData, insertHelper (recursively)
! %/
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #369:
RedBlackTreeUtility.mutant.388.c: ./RedBlackTreeUtility.c:395
*** Original
--- Mutant
***************
*** 392,398 ****
           if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
!              return insertHelper(wkgPtr->rightChildPtr, inData);
              }
           
           // otherwise, assume null and create new node, link to right child
--- 392,398 ----
           if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
!              return insertHelper ( inData,wkgPtr->rightChildPtr);
              }
           
           // otherwise, assume null and create new node, link to right child


********************************************************************************
MUTANT #370:
RedBlackTreeUtility.mutant.94.c: ./RedBlackTreeUtility.c:124
*** Original
--- Mutant
***************
*** 121,127 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)
--- 121,127 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayInOrder (recursively)
! %/
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #371:
RedBlackTreeUtility.mutant.1056.c: ./RedBlackTreeUtility.c:937
*** Original
--- Mutant
***************
*** 934,940 ****
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! */
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {
--- 934,940 ----
  Device input/file: none
  Device output/monitor: character displayed as specified
  Dependencies: toPower, displayChars, printf
! +/
  void displayValue( char data, int nodeHeight, 
                                            int workingLevel, bool *rowStartFlag )
     {


********************************************************************************
MUTANT #372:
RedBlackTreeUtility.mutant.494.c: ./RedBlackTreeUtility.c:491
*** Original
--- Mutant
***************
*** 488,494 ****
               grParentPtr->color = RED;
  
               // resolve grandparent
!              resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
--- 488,494 ----
               grParentPtr->color = RED;
  
               // resolve grandparent
!              resolveRBT ( grParentPtr,treeRoot);
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 


********************************************************************************
MUTANT #373:
RedBlackTreeUtility.mutant.16.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr < NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #374:
RedBlackTreeUtility.mutant.703.c: ./RedBlackTreeUtility.c:681
*** Original
--- Mutant
***************
*** 678,684 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {
--- 678,684 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! -/
  RedBlackNodeType *rotateRight( RedBlackNodeType *newTopPtr, 
                                                    RedBlackNodeType *oldTopPtr )
      {


********************************************************************************
MUTANT #375:
RedBlackTreeUtility.mutant.96.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr <= NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #376:
RedBlackTreeUtility.mutant.282.c: ./RedBlackTreeUtility.c:305
*** Original
--- Mutant
***************
*** 302,308 ****
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! */
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables
--- 302,308 ----
  Device input/---: none
  Device output/---: none
  Dependencies: printf, createNodeFromData, insertHelper, resolveRBT
! %/
  RedBlackNodeType *insert( RedBlackNodeType *treeRoot, char inData )
      {
       // initialize variables


********************************************************************************
MUTANT #377:
RedBlackTreeUtility.mutant.417.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (1==1)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #378:
RedBlackTreeUtility.mutant.141.c: ./RedBlackTreeUtility.c:165
*** Original
--- Mutant
***************
*** 162,168 ****
       if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
              {
--- 162,168 ----
       if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPostOrder ( rowStartFlag,wkgPtr->rightChildPtr);
  
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #379:
RedBlackTreeUtility.mutant.422.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr > NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #380:
RedBlackTreeUtility.mutant.13.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr <= NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #381:
RedBlackTreeUtility.mutant.133.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr < NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #382:
RedBlackTreeUtility.mutant.751.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent = NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #383:
RedBlackTreeUtility.mutant.716.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (!(oldTopPtr->leftChildPtr != NULL))
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #384:
RedBlackTreeUtility.mutant.125.c: ./RedBlackTreeUtility.c:159
*** Original
--- Mutant
***************
*** 156,162 ****
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)
--- 156,162 ----
  Device input/---: none
  Device output/---: displayed as specified
  Dependencies: printf, displayPostOrder (recursively)
! +/
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
       if (wkgPtr != NULL)


********************************************************************************
MUTANT #385:
RedBlackTreeUtility.mutant.446.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr < NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #386:
RedBlackTreeUtility.mutant.1111.c: ./RedBlackTreeUtility.c:969
*** Original
--- Mutant
***************
*** 966,972 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! */
  int getMax( int one, int other )
     {
      int max = one;
--- 966,972 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: none
! +/
  int getMax( int one, int other )
     {
      int max = one;


********************************************************************************
MUTANT #387:
RedBlackTreeUtility.mutant.139.c: ./RedBlackTreeUtility.c:164
*** Original
--- Mutant
***************
*** 161,167 ****
      {
       if (wkgPtr != NULL)
          {
!          displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
--- 161,167 ----
      {
       if (wkgPtr != NULL)
          {
!          displayPostOrder ( rowStartFlag,wkgPtr->leftChildPtr);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)


********************************************************************************
MUTANT #388:
RedBlackTreeUtility.mutant.505.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr >= parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #389:
RedBlackTreeUtility.mutant.868.c: ./RedBlackTreeUtility.c:809
*** Original
--- Mutant
***************
*** 806,812 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )
--- 806,812 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! -/
  void displayChars( int numChars, char outChar )
     {
      if( numChars > 0 )


********************************************************************************
MUTANT #390:
RedBlackTreeUtility.mutant.420.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr <= NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #391:
RedBlackTreeUtility.mutant.805.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr < NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #392:
RedBlackTreeUtility.mutant.562.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr >= NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #393:
RedBlackTreeUtility.mutant.508.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   || grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #394:
RedBlackTreeUtility.mutant.338.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == (0-1))
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #395:
RedBlackTreeUtility.mutant.775.c: ./RedBlackTreeUtility.c:754
*** Original
--- Mutant
***************
*** 751,757 ****
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! */
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
--- 751,757 ----
  Device input/file: none
  Device output/monitor: none
  Dependencies: displayValue, displayEmptyNodeSpaces
! //
  void displayAtTreeLevel( RedBlackNodeType *workingNode, int nodeHeight, 
                                    int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )


********************************************************************************
MUTANT #396:
RedBlackTreeUtility.mutant.755.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (1==1)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


