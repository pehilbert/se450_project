READ 766 MUTANTS
********************************************************************************
MUTANT #1:
RedBlackTreeUtility.mutant.714.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr = NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #2:
RedBlackTreeUtility.mutant.1067.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 0, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #3:
RedBlackTreeUtility.mutant.261.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + (1-1);
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #4:
RedBlackTreeUtility.mutant.454.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      /*if (parentPtr != NULL && parentPtr->color == RED)*/
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #5:
RedBlackTreeUtility.mutant.942.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel % workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #6:
RedBlackTreeUtility.mutant.999.c: ./RedBlackTreeUtility.c:899
*** Original
--- Mutant
***************
*** 896,902 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
--- 896,902 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! //
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;


********************************************************************************
MUTANT #7:
RedBlackTreeUtility.mutant.268.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      return -(1-1);
      }
  
  /*


********************************************************************************
MUTANT #8:
RedBlackTreeUtility.mutant.103.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (0==1)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #9:
RedBlackTreeUtility.mutant.893.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - (1+1), outChar );
         }
     }
  


********************************************************************************
MUTANT #10:
RedBlackTreeUtility.mutant.1028.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel-- )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #11:
RedBlackTreeUtility.mutant.64.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (0==1)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #12:
RedBlackTreeUtility.mutant.848.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + -1, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #13:
RedBlackTreeUtility.mutant.212.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode > POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #14:
RedBlackTreeUtility.mutant.769.c: ./RedBlackTreeUtility.c:733
*** Original
--- Mutant
***************
*** 730,736 ****
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
!      one->color = other->color;
       other->color = tempColor;
      }
  
--- 730,736 ----
  void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
!      /*one->color = other->color;*/
       other->color = tempColor;
      }
  


********************************************************************************
MUTANT #15:
RedBlackTreeUtility.mutant.902.c: ./RedBlackTreeUtility.c:833
*** Original
--- Mutant
***************
*** 830,836 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
--- 830,836 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! %/
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );


********************************************************************************
MUTANT #16:
RedBlackTreeUtility.mutant.612.c: ./RedBlackTreeUtility.c:573
*** Original
--- Mutant
***************
*** 570,576 ****
                   else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
!                      greatGrParentPtr->leftChildPtr = newTopPtr;
                      }
                   // otherwise, assume grandparent is right child
                   else
--- 570,576 ----
                   else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
!                      /*greatGrParentPtr->leftChildPtr = newTopPtr;*/
                      }
                   // otherwise, assume grandparent is right child
                   else


********************************************************************************
MUTANT #17:
RedBlackTreeUtility.mutant.23.c: ./RedBlackTreeUtility.c:27
*** Original
--- Mutant
***************
*** 24,30 ****
       if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
!          clearTree(localPtr->rightChildPtr);
           free(localPtr);
          }
  
--- 24,30 ----
       if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
!          /*clearTree(localPtr->rightChildPtr);*/
           free(localPtr);
          }
  


********************************************************************************
MUTANT #18:
RedBlackTreeUtility.mutant.789.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel >= displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #19:
RedBlackTreeUtility.mutant.909.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 1, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #20:
RedBlackTreeUtility.mutant.1128.c: ./RedBlackTreeUtility.c:983
*** Original
--- Mutant
***************
*** 980,985 ****
--- 980,986 ----
     }
  
  /*
+ continue;
  Name: toPower
  Process: recursively calculates a base to exponent value 
           for positive integer exponents


********************************************************************************
MUTANT #21:
RedBlackTreeUtility.mutant.50.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr = NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #22:
RedBlackTreeUtility.mutant.907.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 0, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #23:
RedBlackTreeUtility.mutant.948.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower ( displayLevel - workingLevel , 2); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #24:
RedBlackTreeUtility.mutant.687.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr < oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #25:
RedBlackTreeUtility.mutant.700.c: ./RedBlackTreeUtility.c:672
*** Original
--- Mutant
***************
*** 669,674 ****
--- 669,675 ----
      }
  
  /*
+ break;
  Name: rotateRight
  Process: "rotates" nodes to the right by resetting pointers
           to related nodes


********************************************************************************
MUTANT #26:
RedBlackTreeUtility.mutant.817.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + (1+1), rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #27:
RedBlackTreeUtility.mutant.859.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel % 1, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #28:
RedBlackTreeUtility.mutant.201.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (traverseCode < INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #29:
RedBlackTreeUtility.mutant.881.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if (!( numChars > 0 ))
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #30:
RedBlackTreeUtility.mutant.248.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      /*if (localPtr != NULL)*/
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #31:
RedBlackTreeUtility.mutant.173.c: ./RedBlackTreeUtility.c:198
*** Original
--- Mutant
***************
*** 195,201 ****
      {
       if (wkgPtr != NULL)
          {
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");
--- 195,201 ----
      {
       if (wkgPtr != NULL)
          {
!          if (!(*rowStartFlag))
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");


********************************************************************************
MUTANT #32:
RedBlackTreeUtility.mutant.483.c: ./RedBlackTreeUtility.c:478
*** Original
--- Mutant
***************
*** 475,481 ****
              {
               // print debugging statements
               printf("   - Uncle is red\n");
!              printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
--- 475,481 ----
              {
               // print debugging statements
               printf("   - Uncle is red\n");
!              printf("");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");


********************************************************************************
MUTANT #33:
RedBlackTreeUtility.mutant.482.c: ./RedBlackTreeUtility.c:477
*** Original
--- Mutant
***************
*** 474,480 ****
           if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
!              printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
--- 474,480 ----
           if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
!              /*printf("   - Uncle is red\n");*/
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");


********************************************************************************
MUTANT #34:
RedBlackTreeUtility.mutant.184.c: ./RedBlackTreeUtility.c:208
*** Original
--- Mutant
***************
*** 205,211 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 205,211 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #35:
RedBlackTreeUtility.mutant.772.c: ./RedBlackTreeUtility.c:742
*** Original
--- Mutant
***************
*** 739,744 ****
--- 739,745 ----
  ////////////////////////////////////////////////////////////////////////////////      
  
  /*
+ continue;
  Name: displayAtTreeLevel
  Process: displays one horizontal "level" of a tree using text graphics
           with appropriate spacing and appropriate number of nodes


********************************************************************************
MUTANT #36:
RedBlackTreeUtility.mutant.991.c: ./RedBlackTreeUtility.c:883
*** Original
--- Mutant
***************
*** 880,886 ****
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
!         nodesToDisplay--;
         }
     }
  
--- 880,886 ----
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
!         nodesToDisplay++;
         }
     }
  


********************************************************************************
MUTANT #37:
RedBlackTreeUtility.mutant.262.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax ( rightHeight,leftHeight) + 1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #38:
RedBlackTreeUtility.mutant.1024.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel != nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #39:
RedBlackTreeUtility.mutant.552.c: ./RedBlackTreeUtility.c:532
*** Original
--- Mutant
***************
*** 529,535 ****
                      }
  
                   // swap parent and grandparent colors
!                  swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
               else
--- 529,535 ----
                      }
  
                   // swap parent and grandparent colors
!                  swapColors ( grParentPtr,parentPtr);
                  }
               // otherwise, assume left-right case
               else


********************************************************************************
MUTANT #40:
RedBlackTreeUtility.mutant.987.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,884 ****
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
         }
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
!         displayValue ( nodeHeight, charOut, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #41:
RedBlackTreeUtility.mutant.470.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color >= RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #42:
RedBlackTreeUtility.mutant.258.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 0;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #43:
RedBlackTreeUtility.mutant.90.c: ./RedBlackTreeUtility.c:113
*** Original
--- Mutant
***************
*** 110,115 ****
--- 110,116 ----
      }
  
  /*
+ continue;
  Name: displayInOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using in order strategy


********************************************************************************
MUTANT #44:
RedBlackTreeUtility.mutant.278.c: ./RedBlackTreeUtility.c:293
*** Original
--- Mutant
***************
*** 290,295 ****
--- 290,296 ----
      }
  
  /*
+ continue;
  Name: insert
  Process: sets first node if tree is empty, otherwise calls helper
           to set nodes, then calls RBT resolver to rebalance tree


********************************************************************************
MUTANT #45:
RedBlackTreeUtility.mutant.771.c: ./RedBlackTreeUtility.c:742
*** Original
--- Mutant
***************
*** 739,744 ****
--- 739,745 ----
  ////////////////////////////////////////////////////////////////////////////////      
  
  /*
+ break;
  Name: displayAtTreeLevel
  Process: displays one horizontal "level" of a tree using text graphics
           with appropriate spacing and appropriate number of nodes


********************************************************************************
MUTANT #46:
RedBlackTreeUtility.mutant.801.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr == NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #47:
RedBlackTreeUtility.mutant.1014.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot == NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #48:
RedBlackTreeUtility.mutant.920.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar != THIN_DIVIDER )
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #49:
RedBlackTreeUtility.mutant.923.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar > THIN_DIVIDER )
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #50:
RedBlackTreeUtility.mutant.439.c: ./RedBlackTreeUtility.c:460
*** Original
--- Mutant
***************
*** 457,463 ****
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
!              else
                  {
                   unclePtr = grParentPtr->leftChildPtr;
                  }
--- 457,463 ----
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
!              /*else*/
                  {
                   unclePtr = grParentPtr->leftChildPtr;
                  }


********************************************************************************
MUTANT #51:
RedBlackTreeUtility.mutant.266.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      return -0;
      }
  
  /*


********************************************************************************
MUTANT #52:
RedBlackTreeUtility.mutant.545.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (0==1)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #53:
RedBlackTreeUtility.mutant.1157.c: ./RedBlackTreeUtility.c:1000
*** Original
--- Mutant
***************
*** 997,1002 ****
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 1;
     }
  
--- 997,1002 ----
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 0;
     }
  


********************************************************************************
MUTANT #54:
RedBlackTreeUtility.mutant.1055.c: ./RedBlackTreeUtility.c:926
*** Original
--- Mutant
***************
*** 923,928 ****
--- 923,929 ----
     }
  
  /*
+ continue;
  Name: displayValue
  Process: displays a tree character value or color letter (R/B)
           after a calculated set of leading spaces


********************************************************************************
MUTANT #55:
RedBlackTreeUtility.mutant.55.c: ./RedBlackTreeUtility.c:58
*** Original
--- Mutant
***************
*** 55,61 ****
  
           if (copiedNode->leftChildPtr != NULL)
              {
!              copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
           if (copiedNode->rightChildPtr != NULL)
--- 55,61 ----
  
           if (copiedNode->leftChildPtr != NULL)
              {
!              /*copiedNode->leftChildPtr->parentPtr = copiedNode;*/
              }
  
           if (copiedNode->rightChildPtr != NULL)


********************************************************************************
MUTANT #56:
RedBlackTreeUtility.mutant.472.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color < RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #57:
RedBlackTreeUtility.mutant.1011.c: ./RedBlackTreeUtility.c:903
*** Original
--- Mutant
***************
*** 900,906 ****
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = 1;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )
--- 900,906 ----
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = -1;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )


********************************************************************************
MUTANT #58:
RedBlackTreeUtility.mutant.1160.c: ./RedBlackTreeUtility.c:1000
*** Original
--- Mutant
***************
*** 997,1002 ****
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 1;
     }
  
--- 997,1002 ----
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return (1-1);
     }
  


********************************************************************************
MUTANT #59:
RedBlackTreeUtility.mutant.995.c: ./RedBlackTreeUtility.c:888
*** Original
--- Mutant
***************
*** 885,890 ****
--- 885,891 ----
     }
  
  /*
+ break;
  Name: displayTreeStructure
  Process: repeatedly calls other function to display 
           the structure of an RB tree, can display either dashes or 'B's,


********************************************************************************
MUTANT #60:
RedBlackTreeUtility.mutant.966.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if(0==1)
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #61:
RedBlackTreeUtility.mutant.471.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color > RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #62:
RedBlackTreeUtility.mutant.449.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color >= RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #63:
RedBlackTreeUtility.mutant.106.c: ./RedBlackTreeUtility.c:129
*** Original
--- Mutant
***************
*** 126,132 ****
      {     
       if (wkgPtr != NULL)
          {
!          displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
              {
--- 126,132 ----
      {     
       if (wkgPtr != NULL)
          {
!          /*displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);*/
  
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #64:
RedBlackTreeUtility.mutant.888.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars * 1, outChar );
         }
     }
  


********************************************************************************
MUTANT #65:
RedBlackTreeUtility.mutant.538.c: ./RedBlackTreeUtility.c:516
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      /**treeRoot = newTopPtr;*/
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #66:
RedBlackTreeUtility.mutant.918.c: ./RedBlackTreeUtility.c:839
*** Original
--- Mutant
***************
*** 836,842 ****
      int treeHeight = findTreeHeight( rootPtr );
      int numChars = toPower( 2, treeHeight + 2 );
  
!     displayChars( numChars, dividerChar );
  
      if( dividerChar == THIN_DIVIDER )
         {
--- 836,842 ----
      int treeHeight = findTreeHeight( rootPtr );
      int numChars = toPower( 2, treeHeight + 2 );
  
!     displayChars ( dividerChar , numChars);
  
      if( dividerChar == THIN_DIVIDER )
         {


********************************************************************************
MUTANT #67:
RedBlackTreeUtility.mutant.783.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if (!( ctrlCode == NODE_COLOR ))
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #68:
RedBlackTreeUtility.mutant.1035.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         /*for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )*/
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #69:
RedBlackTreeUtility.mutant.290.c: ./RedBlackTreeUtility.c:312
*** Original
--- Mutant
***************
*** 309,315 ****
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (treeRoot == NULL)
          {
           // create new root
              // function: createNodeFromData
--- 309,315 ----
       RedBlackNodeType* insertedNodePtr;
  
       // check if root node is null
!      if (1==1)
          {
           // create new root
              // function: createNodeFromData


********************************************************************************
MUTANT #70:
RedBlackTreeUtility.mutant.146.c: ./RedBlackTreeUtility.c:169
*** Original
--- Mutant
***************
*** 166,172 ****
  
           if (*rowStartFlag)
              {
!              *rowStartFlag = false;
               printf("\nPostorder:  ");
              }
           else
--- 166,172 ----
  
           if (*rowStartFlag)
              {
!              /**rowStartFlag = false;*/
               printf("\nPostorder:  ");
              }
           else


********************************************************************************
MUTANT #71:
RedBlackTreeUtility.mutant.177.c: ./RedBlackTreeUtility.c:201
*** Original
--- Mutant
***************
*** 198,204 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nPreorder :  ");
              }
           else
              {
--- 198,204 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("");
              }
           else
              {


********************************************************************************
MUTANT #72:
RedBlackTreeUtility.mutant.357.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (0==1)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #73:
RedBlackTreeUtility.mutant.1130.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent < 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #74:
RedBlackTreeUtility.mutant.729.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr > oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #75:
RedBlackTreeUtility.mutant.632.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (1==1)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #76:
RedBlackTreeUtility.mutant.528.c: ./RedBlackTreeUtility.c:510
*** Original
--- Mutant
***************
*** 507,513 ****
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
!                  newTopPtr = rotateRight(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
--- 507,513 ----
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
!                  newTopPtr = rotateRight ( grParentPtr,parentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)


********************************************************************************
MUTANT #77:
RedBlackTreeUtility.mutant.44.c: ./RedBlackTreeUtility.c:54
*** Original
--- Mutant
***************
*** 51,57 ****
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
!          copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
           if (copiedNode->leftChildPtr != NULL)
              {
--- 51,57 ----
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
!          /*copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);*/
  
           if (copiedNode->leftChildPtr != NULL)
              {


********************************************************************************
MUTANT #78:
RedBlackTreeUtility.mutant.993.c: ./RedBlackTreeUtility.c:884
*** Original
--- Mutant
***************
*** 881,886 ****
--- 881,887 ----
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
+         continue;
         }
     }
  


********************************************************************************
MUTANT #79:
RedBlackTreeUtility.mutant.26.c: ./RedBlackTreeUtility.c:35
*** Original
--- Mutant
***************
*** 32,37 ****
--- 32,38 ----
      }
  
  /*
+ break;
  Name: copyTree
  Process: copies a Red Black tree from another Red Black tree
           using a pre order traversal strategy,


********************************************************************************
MUTANT #80:
RedBlackTreeUtility.mutant.116.c: ./RedBlackTreeUtility.c:138
*** Original
--- Mutant
***************
*** 135,141 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 135,141 ----
              }
           else
              {
!              printf ( SEMICOLON_BREAK,"%s ");
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #81:
RedBlackTreeUtility.mutant.62.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          /*if (copiedNode->rightChildPtr != NULL)*/
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #82:
RedBlackTreeUtility.mutant.831.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + (1-1), rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #83:
RedBlackTreeUtility.mutant.841.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if(1==1)
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #84:
RedBlackTreeUtility.mutant.949.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel != workingLevel )
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #85:
RedBlackTreeUtility.mutant.592.c: ./RedBlackTreeUtility.c:561
*** Original
--- Mutant
***************
*** 558,564 ****
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
!                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
--- 558,564 ----
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
!                  newTopPtr = rotateLeft ( grParentPtr,parentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)


********************************************************************************
MUTANT #86:
RedBlackTreeUtility.mutant.879.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > (0-1) )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #87:
RedBlackTreeUtility.mutant.354.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < (0+1))
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #88:
RedBlackTreeUtility.mutant.677.c: ./RedBlackTreeUtility.c:660
*** Original
--- Mutant
***************
*** 657,663 ****
       
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
!          oldParent->leftChildPtr = newTopPtr;
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
--- 657,663 ----
       
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
!          /*oldParent->leftChildPtr = newTopPtr;*/
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {


********************************************************************************
MUTANT #89:
RedBlackTreeUtility.mutant.107.c: ./RedBlackTreeUtility.c:131
*** Original
--- Mutant
***************
*** 128,134 ****
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");
--- 128,134 ----
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (!(*rowStartFlag))
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");


********************************************************************************
MUTANT #90:
RedBlackTreeUtility.mutant.813.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel / 1, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #91:
RedBlackTreeUtility.mutant.1110.c: ./RedBlackTreeUtility.c:961
*** Original
--- Mutant
***************
*** 958,963 ****
--- 958,964 ----
     }
  
  /*
+ continue;
  Name: getMax
  Process: finds the maximum between two values, returns
  Function input/parameters: two values (int)


********************************************************************************
MUTANT #92:
RedBlackTreeUtility.mutant.1063.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight + workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #93:
RedBlackTreeUtility.mutant.809.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if(1==1)
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #94:
RedBlackTreeUtility.mutant.1123.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if(0==1)
         {
          max = other;
         }


********************************************************************************
MUTANT #95:
RedBlackTreeUtility.mutant.237.c: ./RedBlackTreeUtility.c:249
*** Original
--- Mutant
***************
*** 246,251 ****
--- 246,252 ----
      }
  
  /*
+ continue;
  Name: findTreeHeight
  Process: recursively finds height of tree
  Function input/parameters: working pointer for recursion (RedBlackNodeType *)


********************************************************************************
MUTANT #96:
RedBlackTreeUtility.mutant.197.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (traverseCode != INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #97:
RedBlackTreeUtility.mutant.405.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      /*return localPtr == NULL;*/
      }
  
  /*


********************************************************************************
MUTANT #98:
RedBlackTreeUtility.mutant.808.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if(0==1)
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #99:
RedBlackTreeUtility.mutant.861.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + -1, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #100:
RedBlackTreeUtility.mutant.932.c: ./RedBlackTreeUtility.c:846
*** Original
--- Mutant
***************
*** 843,849 ****
          printf( "\n" );
         }
  
!     printf( "\n" );
     }
  
  /*
--- 843,849 ----
          printf( "\n" );
         }
  
!     /*printf( "\n" );*/
     }
  
  /*


********************************************************************************
MUTANT #101:
RedBlackTreeUtility.mutant.719.c: ./RedBlackTreeUtility.c:701
*** Original
--- Mutant
***************
*** 698,704 ****
       if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
!          oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
          }
  
       // point new top's right child to old top
--- 698,704 ----
       if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
!          /*oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;*/
          }
  
       // point new top's right child to old top


********************************************************************************
MUTANT #102:
RedBlackTreeUtility.mutant.510.c: ./RedBlackTreeUtility.c:498
*** Original
--- Mutant
***************
*** 495,501 ****
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("   - Uncle is black\n");
  
               // check for left-left case
               if (parentPtr->leftChildPtr == wkgPtr)
--- 495,501 ----
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("");
  
               // check for left-left case
               if (parentPtr->leftChildPtr == wkgPtr)


********************************************************************************
MUTANT #103:
RedBlackTreeUtility.mutant.795.c: ./RedBlackTreeUtility.c:768
*** Original
--- Mutant
***************
*** 765,771 ****
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
      else
--- 765,771 ----
     
      if( workingLevel == displayLevel )
         {
!         displayValue ( nodeHeight, charOut, workingLevel, rowStartFlag );
         }
    
      else


********************************************************************************
MUTANT #104:
RedBlackTreeUtility.mutant.182.c: ./RedBlackTreeUtility.c:205
*** Original
--- Mutant
***************
*** 202,208 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 202,208 ----
              }
           else
              {
!              printf ( SEMICOLON_BREAK,"%s ");
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #105:
RedBlackTreeUtility.mutant.986.c: ./RedBlackTreeUtility.c:882
*** Original
--- Mutant
***************
*** 879,884 ****
--- 879,885 ----
      while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
+         continue;
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #106:
RedBlackTreeUtility.mutant.219.c: ./RedBlackTreeUtility.c:238
*** Original
--- Mutant
***************
*** 235,241 ****
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
!          displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)
--- 235,241 ----
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
!          /*displayPostOrder(rootPtr, &rowStartFlag);*/
           printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)


********************************************************************************
MUTANT #107:
RedBlackTreeUtility.mutant.137.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (0==1)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #108:
RedBlackTreeUtility.mutant.790.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel > displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #109:
RedBlackTreeUtility.mutant.553.c: ./RedBlackTreeUtility.c:532
*** Original
--- Mutant
***************
*** 529,535 ****
                      }
  
                   // swap parent and grandparent colors
!                  swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume left-right case
               else
--- 529,535 ----
                      }
  
                   // swap parent and grandparent colors
!                  /*swapColors(parentPtr, grParentPtr);*/
                  }
               // otherwise, assume left-right case
               else


********************************************************************************
MUTANT #110:
RedBlackTreeUtility.mutant.1062.c: ./RedBlackTreeUtility.c:943
*** Original
--- Mutant
***************
*** 940,946 ****
     {
      int leadingSpaces;
    
!     if( *rowStartFlag )
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
--- 940,946 ----
     {
      int leadingSpaces;
    
!     if(1==1)
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  


********************************************************************************
MUTANT #111:
RedBlackTreeUtility.mutant.862.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + (1+1), rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #112:
RedBlackTreeUtility.mutant.962.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if( ctrlCode > NODE_COLOR )
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #113:
RedBlackTreeUtility.mutant.39.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (!(srcPtr != NULL))
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #114:
RedBlackTreeUtility.mutant.1092.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 1, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #115:
RedBlackTreeUtility.mutant.585.c: ./RedBlackTreeUtility.c:555
*** Original
--- Mutant
***************
*** 552,558 ****
               if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
--- 552,558 ----
               if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  /*printf("   - Right Right Case\n");*/
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");


********************************************************************************
MUTANT #116:
RedBlackTreeUtility.mutant.815.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 0, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #117:
RedBlackTreeUtility.mutant.61.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr = NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #118:
RedBlackTreeUtility.mutant.900.c: ./RedBlackTreeUtility.c:833
*** Original
--- Mutant
***************
*** 830,836 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
--- 830,836 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! -/
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );


********************************************************************************
MUTANT #119:
RedBlackTreeUtility.mutant.812.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel * 1, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #120:
RedBlackTreeUtility.mutant.749.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr < oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #121:
RedBlackTreeUtility.mutant.829.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + -1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #122:
RedBlackTreeUtility.mutant.786.c: ./RedBlackTreeUtility.c:763
*** Original
--- Mutant
***************
*** 760,766 ****
    
      if( ctrlCode == NODE_COLOR )
         {
!         charOut = (char)workingNode->color;      
         }
     
      if( workingLevel == displayLevel )
--- 760,766 ----
    
      if( ctrlCode == NODE_COLOR )
         {
!         /*charOut = (char)workingNode->color;      */
         }
     
      if( workingLevel == displayLevel )


********************************************************************************
MUTANT #123:
RedBlackTreeUtility.mutant.175.c: ./RedBlackTreeUtility.c:198
*** Original
--- Mutant
***************
*** 195,201 ****
      {
       if (wkgPtr != NULL)
          {
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");
--- 195,201 ----
      {
       if (wkgPtr != NULL)
          {
!          if (1==1)
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");


********************************************************************************
MUTANT #124:
RedBlackTreeUtility.mutant.1148.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) - base;
         }
    
      return 1;


********************************************************************************
MUTANT #125:
RedBlackTreeUtility.mutant.734.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (0==1)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #126:
RedBlackTreeUtility.mutant.1046.c: ./RedBlackTreeUtility.c:916
*** Original
--- Mutant
***************
*** 913,918 ****
--- 913,919 ----
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );
+             break;
             }
         }
    


********************************************************************************
MUTANT #127:
RedBlackTreeUtility.mutant.435.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (!(grParentPtr->leftChildPtr == parentPtr))
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #128:
RedBlackTreeUtility.mutant.109.c: ./RedBlackTreeUtility.c:131
*** Original
--- Mutant
***************
*** 128,134 ****
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");
--- 128,134 ----
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (1==1)
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");


********************************************************************************
MUTANT #129:
RedBlackTreeUtility.mutant.63.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (!(copiedNode->rightChildPtr != NULL))
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #130:
RedBlackTreeUtility.mutant.631.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (0==1)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #131:
RedBlackTreeUtility.mutant.863.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + (1-1), rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #132:
RedBlackTreeUtility.mutant.3.c: ./RedBlackTreeUtility.c:7
*** Original
--- Mutant
***************
*** 4,10 ****
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '-';
  
  // functions
  
--- 4,10 ----
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '*';
  
  // functions
  


********************************************************************************
MUTANT #133:
RedBlackTreeUtility.mutant.727.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr <= oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #134:
RedBlackTreeUtility.mutant.192.c: ./RedBlackTreeUtility.c:216
*** Original
--- Mutant
***************
*** 213,218 ****
--- 213,219 ----
      }
  
  /*
+ continue;
  Name: displayTree
  Process: controller function for calling appropriate tree traversal
  Function input/parameters: pointer to current tree root (RedBlackNodeType *),


********************************************************************************
MUTANT #135:
RedBlackTreeUtility.mutant.511.c: ./RedBlackTreeUtility.c:498
*** Original
--- Mutant
***************
*** 495,501 ****
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("   - Uncle is black\n");
  
               // check for left-left case
               if (parentPtr->leftChildPtr == wkgPtr)
--- 495,501 ----
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
!              /*printf("   - Uncle is black\n");*/
  
               // check for left-left case
               if (parentPtr->leftChildPtr == wkgPtr)


********************************************************************************
MUTANT #136:
RedBlackTreeUtility.mutant.898.c: ./RedBlackTreeUtility.c:821
*** Original
--- Mutant
***************
*** 818,823 ****
--- 818,824 ----
     }
  
  /*
+ continue;
  Name: displayDivider
  Process: displays divider of correct length for tree
           using either THICK_DIVIDER or THIN_DIVIDER 


********************************************************************************
MUTANT #137:
RedBlackTreeUtility.mutant.954.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     /*if( displayLevel == workingLevel )*/
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #138:
RedBlackTreeUtility.mutant.571.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr < parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #139:
RedBlackTreeUtility.mutant.1147.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) + base;
         }
    
      return 1;


********************************************************************************
MUTANT #140:
RedBlackTreeUtility.mutant.878.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > (0+1) )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #141:
RedBlackTreeUtility.mutant.840.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if(0==1)
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #142:
RedBlackTreeUtility.mutant.945.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( -1, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #143:
RedBlackTreeUtility.mutant.348.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff == 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #144:
RedBlackTreeUtility.mutant.1132.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent >= 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #145:
RedBlackTreeUtility.mutant.978.c: ./RedBlackTreeUtility.c:880
*** Original
--- Mutant
***************
*** 877,882 ****
--- 877,883 ----
         }
    
      while( nodesToDisplay > 0 )
+     break;
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #146:
RedBlackTreeUtility.mutant.583.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (1==1)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #147:
RedBlackTreeUtility.mutant.485.c: ./RedBlackTreeUtility.c:479
*** Original
--- Mutant
***************
*** 476,482 ****
               // print debugging statements
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
!              printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  
--- 476,482 ----
               // print debugging statements
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
!              printf("");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  


********************************************************************************
MUTANT #148:
RedBlackTreeUtility.mutant.476.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (0==1)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #149:
RedBlackTreeUtility.mutant.990.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,884 ****
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
         }
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
!         /*displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );*/
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #150:
RedBlackTreeUtility.mutant.818.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + (1-1), rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #151:
RedBlackTreeUtility.mutant.569.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr >= parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #152:
RedBlackTreeUtility.mutant.2.c: ./RedBlackTreeUtility.c:7
*** Original
--- Mutant
***************
*** 4,10 ****
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '-';
  
  // functions
  
--- 4,10 ----
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '+';
  
  // functions
  


********************************************************************************
MUTANT #153:
RedBlackTreeUtility.mutant.850.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + (1-1), rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #154:
RedBlackTreeUtility.mutant.635.c: ./RedBlackTreeUtility.c:604
*** Original
--- Mutant
***************
*** 601,607 ****
           printf("   - Root color set to black\n");
  
           // change working node to black
!          wkgPtr->color = BLACK;
          }
  
       // display structure for debugging if not the first value inserted
--- 601,607 ----
           printf("   - Root color set to black\n");
  
           // change working node to black
!          /*wkgPtr->color = BLACK;*/
          }
  
       // display structure for debugging if not the first value inserted


********************************************************************************
MUTANT #155:
RedBlackTreeUtility.mutant.875.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars != 0 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #156:
RedBlackTreeUtility.mutant.985.c: ./RedBlackTreeUtility.c:882
*** Original
--- Mutant
***************
*** 879,884 ****
--- 879,885 ----
      while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
+         break;
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #157:
RedBlackTreeUtility.mutant.136.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (!(wkgPtr != NULL))
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #158:
RedBlackTreeUtility.mutant.492.c: ./RedBlackTreeUtility.c:485
*** Original
--- Mutant
***************
*** 482,488 ****
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;
!              unclePtr->color = BLACK;
  
               // change grandparent to Red
               grParentPtr->color = RED;
--- 482,488 ----
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;
!              /*unclePtr->color = BLACK;*/
  
               // change grandparent to Red
               grParentPtr->color = RED;


********************************************************************************
MUTANT #159:
RedBlackTreeUtility.mutant.931.c: ./RedBlackTreeUtility.c:846
*** Original
--- Mutant
***************
*** 843,849 ****
          printf( "\n" );
         }
  
!     printf( "\n" );
     }
  
  /*
--- 843,849 ----
          printf( "\n" );
         }
  
!     printf( "" );
     }
  
  /*


********************************************************************************
MUTANT #160:
RedBlackTreeUtility.mutant.1155.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower ( exponent - 1 , base) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #161:
RedBlackTreeUtility.mutant.436.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (0==1)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #162:
RedBlackTreeUtility.mutant.567.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr != parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #163:
RedBlackTreeUtility.mutant.860.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 0, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #164:
RedBlackTreeUtility.mutant.961.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if( ctrlCode >= NODE_COLOR )
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #165:
RedBlackTreeUtility.mutant.1.c: ./RedBlackTreeUtility.c:6
*** Original
--- Mutant
***************
*** 3,9 ****
  
  // constants
  const char SEMICOLON_BREAK[] = "; ";
! const char THICK_DIVIDER = '=';
  const char THIN_DIVIDER = '-';
  
  // functions
--- 3,9 ----
  
  // constants
  const char SEMICOLON_BREAK[] = "; ";
! /*const char THICK_DIVIDER = '=';*/
  const char THIN_DIVIDER = '-';
  
  // functions


********************************************************************************
MUTANT #166:
RedBlackTreeUtility.mutant.785.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if(1==1)
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #167:
RedBlackTreeUtility.mutant.527.c: ./RedBlackTreeUtility.c:507
*** Original
--- Mutant
***************
*** 504,510 ****
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
!                  printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
--- 504,510 ----
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
!                  /*printf("      - Swap grandparent/parent colors\n");*/
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);


********************************************************************************
MUTANT #168:
RedBlackTreeUtility.mutant.940.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel * workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #169:
RedBlackTreeUtility.mutant.779.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode >= NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #170:
RedBlackTreeUtility.mutant.694.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!       if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #171:
RedBlackTreeUtility.mutant.971.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay >= 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #172:
RedBlackTreeUtility.mutant.488.c: ./RedBlackTreeUtility.c:480
*** Original
--- Mutant
***************
*** 477,483 ****
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
!              printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
--- 477,483 ----
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
!              /*printf("      - Parent set to black\n");*/
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black


********************************************************************************
MUTANT #173:
RedBlackTreeUtility.mutant.1075.c: ./RedBlackTreeUtility.c:950
*** Original
--- Mutant
***************
*** 947,953 ****
          *rowStartFlag = false;
         }
    
!     else
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
--- 947,953 ----
          *rowStartFlag = false;
         }
    
!     /*else*/
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }


********************************************************************************
MUTANT #174:
RedBlackTreeUtility.mutant.440.c: ./RedBlackTreeUtility.c:460
*** Original
--- Mutant
***************
*** 457,463 ****
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
!              else
                  {
                   unclePtr = grParentPtr->leftChildPtr;
                  }
--- 457,463 ----
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
!              
                  {
                   unclePtr = grParentPtr->leftChildPtr;
                  }


********************************************************************************
MUTANT #175:
RedBlackTreeUtility.mutant.955.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if (!( displayLevel == workingLevel ))
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #176:
RedBlackTreeUtility.mutant.906.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight % 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #177:
RedBlackTreeUtility.mutant.756.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!       if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #178:
RedBlackTreeUtility.mutant.953.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel < workingLevel )
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #179:
RedBlackTreeUtility.mutant.873.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars >= 0 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #180:
RedBlackTreeUtility.mutant.203.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (0==1)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #181:
RedBlackTreeUtility.mutant.551.c: ./RedBlackTreeUtility.c:528
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      /*greatGrParentPtr->rightChildPtr = newTopPtr;*/
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #182:
RedBlackTreeUtility.mutant.915.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( (2-1), treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #183:
RedBlackTreeUtility.mutant.1086.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) / 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #184:
RedBlackTreeUtility.mutant.138.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (1==1)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #185:
RedBlackTreeUtility.mutant.114.c: ./RedBlackTreeUtility.c:136
*** Original
--- Mutant
***************
*** 133,139 ****
               *rowStartFlag = false;
               printf("\nInorder  :  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 133,139 ----
               *rowStartFlag = false;
               printf("\nInorder  :  ");
              }
!          
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #186:
RedBlackTreeUtility.mutant.827.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel % 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #187:
RedBlackTreeUtility.mutant.29.c: ./RedBlackTreeUtility.c:45
*** Original
--- Mutant
***************
*** 42,48 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! */
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;
--- 42,48 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! -/
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;


********************************************************************************
MUTANT #188:
RedBlackTreeUtility.mutant.939.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel + workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #189:
RedBlackTreeUtility.mutant.1076.c: ./RedBlackTreeUtility.c:950
*** Original
--- Mutant
***************
*** 947,953 ****
          *rowStartFlag = false;
         }
    
!     else
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
--- 947,953 ----
          *rowStartFlag = false;
         }
    
!     
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }


********************************************************************************
MUTANT #190:
RedBlackTreeUtility.mutant.75.c: ./RedBlackTreeUtility.c:86
*** Original
--- Mutant
***************
*** 83,89 ****
       RedBlackNodeType* newNode = 
          (RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));
  
!      newNode->color = (Colors)nodeColor;
       newNode->data = data;
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
--- 83,89 ----
       RedBlackNodeType* newNode = 
          (RedBlackNodeType*)malloc(sizeof(RedBlackNodeType));
  
!      /*newNode->color = (Colors)nodeColor;*/
       newNode->data = data;
       newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;


********************************************************************************
MUTANT #191:
RedBlackTreeUtility.mutant.760.c: ./RedBlackTreeUtility.c:713
*** Original
--- Mutant
***************
*** 710,716 ****
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
!          oldParent->rightChildPtr = newTopPtr;
          }
  
       // return new top pointer
--- 710,716 ----
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
!          /*oldParent->rightChildPtr = newTopPtr;*/
          }
  
       // return new top pointer


********************************************************************************
MUTANT #192:
RedBlackTreeUtility.mutant.856.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel - 1, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #193:
RedBlackTreeUtility.mutant.1131.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent == 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #194:
RedBlackTreeUtility.mutant.621.c: ./RedBlackTreeUtility.c:589
*** Original
--- Mutant
***************
*** 586,592 ****
               else
                  {
                   // rotate right, old top = parent, new top = working node
!                  rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);
--- 586,592 ----
               else
                  {
                   // rotate right, old top = parent, new top = working node
!                  /*rotateRight(wkgPtr, parentPtr);*/
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);


********************************************************************************
MUTANT #195:
RedBlackTreeUtility.mutant.157.c: ./RedBlackTreeUtility.c:182
*** Original
--- Mutant
***************
*** 179,184 ****
--- 179,185 ----
      }
  
  /*
+ break;
  Name: displayPreOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using pre order strategy


********************************************************************************
MUTANT #196:
RedBlackTreeUtility.mutant.306.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (0==1)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #197:
RedBlackTreeUtility.mutant.645.c: ./RedBlackTreeUtility.c:643
*** Original
--- Mutant
***************
*** 640,646 ****
       newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
!      oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's right child to new top's left child
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
--- 640,646 ----
       newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
!      /*oldTopPtr->parentPtr = newTopPtr;*/
  
       // point old top's right child to new top's left child
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;


********************************************************************************
MUTANT #198:
RedBlackTreeUtility.mutant.210.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode <= POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #199:
RedBlackTreeUtility.mutant.41.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (1==1)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #200:
RedBlackTreeUtility.mutant.933.c: ./RedBlackTreeUtility.c:850
*** Original
--- Mutant
***************
*** 847,852 ****
--- 847,853 ----
     }
  
  /*
+ break;
  Name: displayEmptyNodeSpaces
  Process: displays the appropriate number of dashes for a given level
           for null nodes, can display either dashes or 'B's


********************************************************************************
MUTANT #201:
RedBlackTreeUtility.mutant.1073.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         /*leadingSpaces = toPower( 2, nodeHeight - workingLevel );*/
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #202:
RedBlackTreeUtility.mutant.573.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && (1==1))
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #203:
RedBlackTreeUtility.mutant.374.c: ./RedBlackTreeUtility.c:383
*** Original
--- Mutant
***************
*** 380,386 ****
           wkgPtr->leftChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
!          wkgPtr->leftChildPtr->parentPtr = wkgPtr;
  
           // return new node (new left child)
           return wkgPtr->leftChildPtr;
--- 380,386 ----
           wkgPtr->leftChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
!          /*wkgPtr->leftChildPtr->parentPtr = wkgPtr;*/
  
           // return new node (new left child)
           return wkgPtr->leftChildPtr;


********************************************************************************
MUTANT #204:
RedBlackTreeUtility.mutant.213.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode < POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #205:
RedBlackTreeUtility.mutant.322.c: ./RedBlackTreeUtility.c:361
*** Original
--- Mutant
***************
*** 358,364 ****
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)
--- 358,364 ----
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData * (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)


********************************************************************************
MUTANT #206:
RedBlackTreeUtility.mutant.807.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if (!( workingNode->leftChildPtr != NULL ))
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #207:
RedBlackTreeUtility.mutant.539.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr != grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #208:
RedBlackTreeUtility.mutant.211.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode >= POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #209:
RedBlackTreeUtility.mutant.799.c: ./RedBlackTreeUtility.c:771
*** Original
--- Mutant
***************
*** 768,774 ****
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
!     else
         {
          if( workingNode->leftChildPtr != NULL )
             {
--- 768,774 ----
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
!     /*else*/
         {
          if( workingNode->leftChildPtr != NULL )
             {


********************************************************************************
MUTANT #210:
RedBlackTreeUtility.mutant.1043.c: ./RedBlackTreeUtility.c:914
*** Original
--- Mutant
***************
*** 911,916 ****
--- 911,917 ----
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
+                           continue;
            
              printf( "\n" );
             }


********************************************************************************
MUTANT #211:
RedBlackTreeUtility.mutant.257.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) % 1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #212:
RedBlackTreeUtility.mutant.919.c: ./RedBlackTreeUtility.c:839
*** Original
--- Mutant
***************
*** 836,842 ****
      int treeHeight = findTreeHeight( rootPtr );
      int numChars = toPower( 2, treeHeight + 2 );
  
!     displayChars( numChars, dividerChar );
  
      if( dividerChar == THIN_DIVIDER )
         {
--- 836,842 ----
      int treeHeight = findTreeHeight( rootPtr );
      int numChars = toPower( 2, treeHeight + 2 );
  
!     /*displayChars( numChars, dividerChar );*/
  
      if( dividerChar == THIN_DIVIDER )
         {


********************************************************************************
MUTANT #213:
RedBlackTreeUtility.mutant.27.c: ./RedBlackTreeUtility.c:35
*** Original
--- Mutant
***************
*** 32,37 ****
--- 32,38 ----
      }
  
  /*
+ continue;
  Name: copyTree
  Process: copies a Red Black tree from another Red Black tree
           using a pre order traversal strategy,


********************************************************************************
MUTANT #214:
RedBlackTreeUtility.mutant.1002.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) * 2;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #215:
RedBlackTreeUtility.mutant.226.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode < PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #216:
RedBlackTreeUtility.mutant.135.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      /*if (wkgPtr != NULL)*/
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #217:
RedBlackTreeUtility.mutant.843.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel - 1, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #218:
RedBlackTreeUtility.mutant.1133.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent <= 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #219:
RedBlackTreeUtility.mutant.1097.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + (1+1) ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #220:
RedBlackTreeUtility.mutant.308.c: ./RedBlackTreeUtility.c:332
*** Original
--- Mutant
***************
*** 329,335 ****
          {
           // print inserting/resolving statement
           // function: printf
!          printf("\nInserting %c and resolving\n", inData);
  
           // call resolver function to resolve
           // function: resolveRBT
--- 329,335 ----
          {
           // print inserting/resolving statement
           // function: printf
!          printf("", inData);
  
           // call resolver function to resolve
           // function: resolveRBT


********************************************************************************
MUTANT #221:
RedBlackTreeUtility.mutant.1004.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) % 2;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #222:
RedBlackTreeUtility.mutant.1061.c: ./RedBlackTreeUtility.c:943
*** Original
--- Mutant
***************
*** 940,946 ****
     {
      int leadingSpaces;
    
!     if( *rowStartFlag )
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
--- 940,946 ----
     {
      int leadingSpaces;
    
!     if(0==1)
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  


********************************************************************************
MUTANT #223:
RedBlackTreeUtility.mutant.958.c: ./RedBlackTreeUtility.c:871
*** Original
--- Mutant
***************
*** 868,874 ****
    
      if( displayLevel == workingLevel )
         {
!         charOut = DASH;
        
          if( ctrlCode == NODE_COLOR )
             {
--- 868,874 ----
    
      if( displayLevel == workingLevel )
         {
!         /*charOut = DASH;*/
        
          if( ctrlCode == NODE_COLOR )
             {


********************************************************************************
MUTANT #224:
RedBlackTreeUtility.mutant.674.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && (1==1))
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #225:
RedBlackTreeUtility.mutant.200.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (traverseCode > INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #226:
RedBlackTreeUtility.mutant.252.c: ./RedBlackTreeUtility.c:266
*** Original
--- Mutant
***************
*** 263,269 ****
       if (localPtr != NULL)
          {
           // recursively count size of left and right trees
!          leftHeight = findTreeHeight(localPtr->leftChildPtr);
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
--- 263,269 ----
       if (localPtr != NULL)
          {
           // recursively count size of left and right trees
!          /*leftHeight = findTreeHeight(localPtr->leftChildPtr);*/
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it


********************************************************************************
MUTANT #227:
RedBlackTreeUtility.mutant.894.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - (1-1), outChar );
         }
     }
  


********************************************************************************
MUTANT #228:
RedBlackTreeUtility.mutant.952.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel > workingLevel )
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #229:
RedBlackTreeUtility.mutant.303.c: ./RedBlackTreeUtility.c:328
*** Original
--- Mutant
***************
*** 325,331 ****
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr != NULL)
          {
           // print inserting/resolving statement
           // function: printf
--- 325,331 ----
          }
  
       // check if insertion was successful (not null)
!      if (insertedNodePtr = NULL)
          {
           // print inserting/resolving statement
           // function: printf


********************************************************************************
MUTANT #230:
RedBlackTreeUtility.mutant.522.c: ./RedBlackTreeUtility.c:505
*** Original
--- Mutant
***************
*** 502,508 ****
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
!                  printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
--- 502,508 ----
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
!                  printf("");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  


********************************************************************************
MUTANT #231:
RedBlackTreeUtility.mutant.448.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color <= RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #232:
RedBlackTreeUtility.mutant.293.c: ./RedBlackTreeUtility.c:317
*** Original
--- Mutant
***************
*** 314,320 ****
           // create new root
              // function: createNodeFromData
           insertedNodePtr = createNodeFromData(inData, RED);
!          treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
       else
--- 314,320 ----
           // create new root
              // function: createNodeFromData
           insertedNodePtr = createNodeFromData(inData, RED);
!          /*treeRoot = insertedNodePtr;*/
          }
       // otherwise, assume root exists
       else


********************************************************************************
MUTANT #233:
RedBlackTreeUtility.mutant.179.c: ./RedBlackTreeUtility.c:203
*** Original
--- Mutant
***************
*** 200,206 ****
               *rowStartFlag = false;
               printf("\nPreorder :  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 200,206 ----
               *rowStartFlag = false;
               printf("\nPreorder :  ");
              }
!          /*else*/
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #234:
RedBlackTreeUtility.mutant.997.c: ./RedBlackTreeUtility.c:899
*** Original
--- Mutant
***************
*** 896,902 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
--- 896,902 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! +/
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;


********************************************************************************
MUTANT #235:
RedBlackTreeUtility.mutant.1117.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if( other == max )
         {
          max = other;
         }


********************************************************************************
MUTANT #236:
RedBlackTreeUtility.mutant.606.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr > grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #237:
RedBlackTreeUtility.mutant.24.c: ./RedBlackTreeUtility.c:28
*** Original
--- Mutant
***************
*** 25,31 ****
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
!          free(localPtr);
          }
  
       return NULL;
--- 25,31 ----
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
!          /*free(localPtr);*/
          }
  
       return NULL;


********************************************************************************
MUTANT #238:
RedBlackTreeUtility.mutant.17.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr = NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #239:
RedBlackTreeUtility.mutant.928.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if(1==1)
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #240:
RedBlackTreeUtility.mutant.973.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay != 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #241:
RedBlackTreeUtility.mutant.608.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (!(greatGrParentPtr->leftChildPtr == grParentPtr))
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #242:
RedBlackTreeUtility.mutant.461.c: ./RedBlackTreeUtility.c:471
*** Original
--- Mutant
***************
*** 468,474 ****
       if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
!          printf("   - Parent is red\n");
  
           // check if uncle is not null and red
           if (unclePtr != NULL && unclePtr->color == RED)
--- 468,474 ----
       if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
!          printf("");
  
           // check if uncle is not null and red
           if (unclePtr != NULL && unclePtr->color == RED)


********************************************************************************
MUTANT #243:
RedBlackTreeUtility.mutant.814.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel % 1, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #244:
RedBlackTreeUtility.mutant.865.c: ./RedBlackTreeUtility.c:800
*** Original
--- Mutant
***************
*** 797,802 ****
--- 797,803 ----
     }
  
  /*
+ break;
  Name: displayChars
  Process: recursively displays a specified number of specified characters
  Function input/parameters: number of characters (int), 


********************************************************************************
MUTANT #245:
RedBlackTreeUtility.mutant.578.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr >= wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #246:
RedBlackTreeUtility.mutant.260.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + (1+1);
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #247:
RedBlackTreeUtility.mutant.456.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (0==1)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #248:
RedBlackTreeUtility.mutant.247.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr = NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #249:
RedBlackTreeUtility.mutant.32.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr == NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #250:
RedBlackTreeUtility.mutant.981.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     /*while( nodesToDisplay > 0 )*/
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #251:
RedBlackTreeUtility.mutant.339.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL && diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #252:
RedBlackTreeUtility.mutant.603.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr != grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #253:
RedBlackTreeUtility.mutant.609.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (0==1)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #254:
RedBlackTreeUtility.mutant.951.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel >= workingLevel )
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #255:
RedBlackTreeUtility.mutant.911.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( -1, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #256:
RedBlackTreeUtility.mutant.912.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + -1 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #257:
RedBlackTreeUtility.mutant.242.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr == NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #258:
RedBlackTreeUtility.mutant.1023.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel == nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #259:
RedBlackTreeUtility.mutant.134.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr = NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #260:
RedBlackTreeUtility.mutant.927.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if(0==1)
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #261:
RedBlackTreeUtility.mutant.108.c: ./RedBlackTreeUtility.c:131
*** Original
--- Mutant
***************
*** 128,134 ****
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");
--- 128,134 ----
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
!          if (0==1)
              {
               *rowStartFlag = false;
               printf("\nInorder  :  ");


********************************************************************************
MUTANT #262:
RedBlackTreeUtility.mutant.1066.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight % workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #263:
RedBlackTreeUtility.mutant.1026.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel > nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #264:
RedBlackTreeUtility.mutant.957.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if(1==1)
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #265:
RedBlackTreeUtility.mutant.234.c: ./RedBlackTreeUtility.c:244
*** Original
--- Mutant
***************
*** 241,247 ****
       else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
      }
  
--- 241,247 ----
       else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
!          printf("");
          }
      }
  


********************************************************************************
MUTANT #266:
RedBlackTreeUtility.mutant.889.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars / 1, outChar );
         }
     }
  


********************************************************************************
MUTANT #267:
RedBlackTreeUtility.mutant.148.c: ./RedBlackTreeUtility.c:170
*** Original
--- Mutant
***************
*** 167,173 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nPostorder:  ");
              }
           else
              {
--- 167,173 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              /*printf("\nPostorder:  ");*/
              }
           else
              {


********************************************************************************
MUTANT #268:
RedBlackTreeUtility.mutant.469.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color <= RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #269:
RedBlackTreeUtility.mutant.151.c: ./RedBlackTreeUtility.c:174
*** Original
--- Mutant
***************
*** 171,177 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 171,177 ----
              }
           else
              {
!              printf("", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #270:
RedBlackTreeUtility.mutant.602.c: ./RedBlackTreeUtility.c:567
*** Original
--- Mutant
***************
*** 564,570 ****
                   if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
!                      *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
                   else if (greatGrParentPtr->leftChildPtr == grParentPtr)
--- 564,570 ----
                   if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
!                      /**treeRoot = newTopPtr;*/
                      }
                   // otherwise, check if grandparent is left child
                   else if (greatGrParentPtr->leftChildPtr == grParentPtr)


********************************************************************************
MUTANT #271:
RedBlackTreeUtility.mutant.1051.c: ./RedBlackTreeUtility.c:919
*** Original
--- Mutant
***************
*** 916,922 ****
             }
         }
    
!     else
         {
          printf( "\nEmpty Tree - No Display" );
         }
--- 916,922 ----
             }
         }
    
!     
         {
          printf( "\nEmpty Tree - No Display" );
         }


********************************************************************************
MUTANT #272:
RedBlackTreeUtility.mutant.256.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) / 1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #273:
RedBlackTreeUtility.mutant.1089.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 0, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #274:
RedBlackTreeUtility.mutant.633.c: ./RedBlackTreeUtility.c:601
*** Original
--- Mutant
***************
*** 598,604 ****
       if (*treeRoot == wkgPtr)
          {
           // print debugging statement
!          printf("   - Root color set to black\n");
  
           // change working node to black
           wkgPtr->color = BLACK;
--- 598,604 ----
       if (*treeRoot == wkgPtr)
          {
           // print debugging statement
!          printf("");
  
           // change working node to black
           wkgPtr->color = BLACK;


********************************************************************************
MUTANT #275:
RedBlackTreeUtility.mutant.225.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode > PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #276:
RedBlackTreeUtility.mutant.559.c: ./RedBlackTreeUtility.c:541
*** Original
--- Mutant
***************
*** 538,544 ****
                   rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT(treeRoot, parentPtr);
                  }
              }
           // otherwise, check for right cases
--- 538,544 ----
                   rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
!                  /*resolveRBT(treeRoot, parentPtr);*/
                  }
              }
           // otherwise, check for right cases


********************************************************************************
MUTANT #277:
RedBlackTreeUtility.mutant.383.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr = NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #278:
RedBlackTreeUtility.mutant.630.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (!(*treeRoot == wkgPtr))
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #279:
RedBlackTreeUtility.mutant.324.c: ./RedBlackTreeUtility.c:361
*** Original
--- Mutant
***************
*** 358,364 ****
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)
--- 358,364 ----
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData % (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)


********************************************************************************
MUTANT #280:
RedBlackTreeUtility.mutant.206.c: ./RedBlackTreeUtility.c:233
*** Original
--- Mutant
***************
*** 230,236 ****
       
       if (traverseCode == INORDER_TRAVERSE)
          {
!          displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
--- 230,236 ----
       
       if (traverseCode == INORDER_TRAVERSE)
          {
!          /*displayInOrder(rootPtr, &rowStartFlag);*/
           printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)


********************************************************************************
MUTANT #281:
RedBlackTreeUtility.mutant.604.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr <= grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #282:
RedBlackTreeUtility.mutant.763.c: ./RedBlackTreeUtility.c:721
*** Original
--- Mutant
***************
*** 718,723 ****
--- 718,724 ----
      }
  
  /*
+ continue;
  Name: swapColors
  Process: swaps or exchanges colors between two nodes
  Function input/parameters: pointers to two nodes (RedBlackNodeType *)


********************************************************************************
MUTANT #283:
RedBlackTreeUtility.mutant.1080.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel % 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #284:
RedBlackTreeUtility.mutant.610.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (1==1)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #285:
RedBlackTreeUtility.mutant.407.c: ./RedBlackTreeUtility.c:425
*** Original
--- Mutant
***************
*** 422,427 ****
--- 422,428 ----
      }
  
  /*
+ continue;
  Name: resolveRBT
  Process: recursively checks tree for need to rebalance, 
           conducts rebalance as needed


********************************************************************************
MUTANT #286:
RedBlackTreeUtility.mutant.745.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr != oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #287:
RedBlackTreeUtility.mutant.190.c: ./RedBlackTreeUtility.c:211
*** Original
--- Mutant
***************
*** 208,214 ****
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
  
--- 208,214 ----
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          /*displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);*/
          }
      }
  


********************************************************************************
MUTANT #288:
RedBlackTreeUtility.mutant.1129.c: ./RedBlackTreeUtility.c:993
*** Original
--- Mutant
***************
*** 990,996 ****
  Device output/monitor: none
  Dependencies: none
  */
! int toPower( int base, int exponent )
     {
      if( exponent > 0 )
         {
--- 990,996 ----
  Device output/monitor: none
  Dependencies: none
  */
! int toPower ( int exponent , int base)
     {
      if( exponent > 0 )
         {


********************************************************************************
MUTANT #289:
RedBlackTreeUtility.mutant.145.c: ./RedBlackTreeUtility.c:167
*** Original
--- Mutant
***************
*** 164,170 ****
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");
--- 164,170 ----
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (1==1)
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");


********************************************************************************
MUTANT #290:
RedBlackTreeUtility.mutant.208.c: ./RedBlackTreeUtility.c:234
*** Original
--- Mutant
***************
*** 231,237 ****
       if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
--- 231,237 ----
       if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
!          /*printf("\n");*/
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {


********************************************************************************
MUTANT #291:
RedBlackTreeUtility.mutant.925.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     /*if( dividerChar == THIN_DIVIDER )*/
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #292:
RedBlackTreeUtility.mutant.623.c: ./RedBlackTreeUtility.c:592
*** Original
--- Mutant
***************
*** 589,595 ****
                   rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
!                  resolveRBT(treeRoot, parentPtr);
                  }
              }
          }
--- 589,595 ----
                   rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
!                  /*resolveRBT(treeRoot, parentPtr);*/
                  }
              }
          }


********************************************************************************
MUTANT #293:
RedBlackTreeUtility.mutant.1071.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( (2-1), nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #294:
RedBlackTreeUtility.mutant.216.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (1==1)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #295:
RedBlackTreeUtility.mutant.683.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr != oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #296:
RedBlackTreeUtility.mutant.1081.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight + workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #297:
RedBlackTreeUtility.mutant.601.c: ./RedBlackTreeUtility.c:564
*** Original
--- Mutant
***************
*** 561,567 ****
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (greatGrParentPtr == NULL)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;
--- 561,567 ----
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
!                  if (1==1)
                      {
                       // update root pointer to new top
                       *treeRoot = newTopPtr;


********************************************************************************
MUTANT #298:
RedBlackTreeUtility.mutant.437.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (1==1)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #299:
RedBlackTreeUtility.mutant.593.c: ./RedBlackTreeUtility.c:561
*** Original
--- Mutant
***************
*** 558,564 ****
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
!                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
--- 558,564 ----
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
!                  /*newTopPtr = rotateLeft(parentPtr, grParentPtr);*/
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)


********************************************************************************
MUTANT #300:
RedBlackTreeUtility.mutant.1144.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent * 1 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #301:
RedBlackTreeUtility.mutant.486.c: ./RedBlackTreeUtility.c:479
*** Original
--- Mutant
***************
*** 476,482 ****
               // print debugging statements
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
!              printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  
--- 476,482 ----
               // print debugging statements
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
!              /*printf("      - Uncle set to black\n");*/
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  


********************************************************************************
MUTANT #302:
RedBlackTreeUtility.mutant.1119.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if( other <= max )
         {
          max = other;
         }


********************************************************************************
MUTANT #303:
RedBlackTreeUtility.mutant.111.c: ./RedBlackTreeUtility.c:134
*** Original
--- Mutant
***************
*** 131,137 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nInorder  :  ");
              }
           else
              {
--- 131,137 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("");
              }
           else
              {


********************************************************************************
MUTANT #304:
RedBlackTreeUtility.mutant.6.c: ./RedBlackTreeUtility.c:12
*** Original
--- Mutant
***************
*** 9,14 ****
--- 9,15 ----
  // functions
  
  /*
+ break;
  Name: clearTree
  Process: recursively returns dynamically allocated data to the OS
           using a post order traversal strategy


********************************************************************************
MUTANT #305:
RedBlackTreeUtility.mutant.1001.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) - 2;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #306:
RedBlackTreeUtility.mutant.52.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (!(copiedNode->leftChildPtr != NULL))
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #307:
RedBlackTreeUtility.mutant.432.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr >= parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #308:
RedBlackTreeUtility.mutant.1151.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 0 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #309:
RedBlackTreeUtility.mutant.880.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     /*if( numChars > 0 )*/
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #310:
RedBlackTreeUtility.mutant.235.c: ./RedBlackTreeUtility.c:244
*** Original
--- Mutant
***************
*** 241,247 ****
       else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
      }
  
--- 241,247 ----
       else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
!          /*printf("\n");*/
          }
      }
  


********************************************************************************
MUTANT #311:
RedBlackTreeUtility.mutant.1084.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) * 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #312:
RedBlackTreeUtility.mutant.100.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr = NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #313:
RedBlackTreeUtility.mutant.974.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay > 1 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #314:
RedBlackTreeUtility.mutant.12.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr == NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #315:
RedBlackTreeUtility.mutant.207.c: ./RedBlackTreeUtility.c:234
*** Original
--- Mutant
***************
*** 231,237 ****
       if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
--- 231,237 ----
       if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
!          printf("");
          }
       else if (traverseCode == POSTORDER_TRAVERSE)
          {


********************************************************************************
MUTANT #316:
RedBlackTreeUtility.mutant.215.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (0==1)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #317:
RedBlackTreeUtility.mutant.1145.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent / 1 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #318:
RedBlackTreeUtility.mutant.1078.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel * 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #319:
RedBlackTreeUtility.mutant.199.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (traverseCode >= INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #320:
RedBlackTreeUtility.mutant.1038.c: ./RedBlackTreeUtility.c:911
*** Original
--- Mutant
***************
*** 908,913 ****
--- 908,914 ----
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
+             break;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #321:
RedBlackTreeUtility.mutant.540.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr <= grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #322:
RedBlackTreeUtility.mutant.1065.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight / workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #323:
RedBlackTreeUtility.mutant.634.c: ./RedBlackTreeUtility.c:601
*** Original
--- Mutant
***************
*** 598,604 ****
       if (*treeRoot == wkgPtr)
          {
           // print debugging statement
!          printf("   - Root color set to black\n");
  
           // change working node to black
           wkgPtr->color = BLACK;
--- 598,604 ----
       if (*treeRoot == wkgPtr)
          {
           // print debugging statement
!          /*printf("   - Root color set to black\n");*/
  
           // change working node to black
           wkgPtr->color = BLACK;


********************************************************************************
MUTANT #324:
RedBlackTreeUtility.mutant.762.c: ./RedBlackTreeUtility.c:721
*** Original
--- Mutant
***************
*** 718,723 ****
--- 718,724 ----
      }
  
  /*
+ break;
  Name: swapColors
  Process: swaps or exchanges colors between two nodes
  Function input/parameters: pointers to two nodes (RedBlackNodeType *)


********************************************************************************
MUTANT #325:
RedBlackTreeUtility.mutant.895.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars ( outChar , numChars - 1);
         }
     }
  


********************************************************************************
MUTANT #326:
RedBlackTreeUtility.mutant.525.c: ./RedBlackTreeUtility.c:506
*** Original
--- Mutant
***************
*** 503,509 ****
                   // print debugging statements
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
!                  printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
--- 503,509 ----
                   // print debugging statements
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
!                  /*printf("grandparent\n");*/
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent


********************************************************************************
MUTANT #327:
RedBlackTreeUtility.mutant.892.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - -1, outChar );
         }
     }
  


********************************************************************************
MUTANT #328:
RedBlackTreeUtility.mutant.858.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel / 1, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #329:
RedBlackTreeUtility.mutant.81.c: ./RedBlackTreeUtility.c:96
*** Original
--- Mutant
***************
*** 93,98 ****
--- 93,99 ----
      }
  
  /*
+ break;
  Name: createNodeFromNode
  Process: allocates memory for node,
           copies an individual tree node from another node,


********************************************************************************
MUTANT #330:
RedBlackTreeUtility.mutant.983.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,883 ****
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
+        break;
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;


********************************************************************************
MUTANT #331:
RedBlackTreeUtility.mutant.171.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (0==1)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #332:
RedBlackTreeUtility.mutant.1021.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if(0==1)
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #333:
RedBlackTreeUtility.mutant.316.c: ./RedBlackTreeUtility.c:345
*** Original
--- Mutant
***************
*** 342,347 ****
--- 342,348 ----
      }
  
  /*
+ continue;
  Name: insertHelper
  Process: recursively finds place to add node, 
           places node using "look down" strategy,


********************************************************************************
MUTANT #334:
RedBlackTreeUtility.mutant.368.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (0==1)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #335:
RedBlackTreeUtility.mutant.491.c: ./RedBlackTreeUtility.c:484
*** Original
--- Mutant
***************
*** 481,487 ****
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
!              parentPtr->color = BLACK;
               unclePtr->color = BLACK;
  
               // change grandparent to Red
--- 481,487 ----
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
!              /*parentPtr->color = BLACK;*/
               unclePtr->color = BLACK;
  
               // change grandparent to Red


********************************************************************************
MUTANT #336:
RedBlackTreeUtility.mutant.183.c: ./RedBlackTreeUtility.c:205
*** Original
--- Mutant
***************
*** 202,208 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 202,208 ----
              }
           else
              {
!              /*printf("%s ", SEMICOLON_BREAK);*/
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #337:
RedBlackTreeUtility.mutant.270.c: ./RedBlackTreeUtility.c:278
*** Original
--- Mutant
***************
*** 275,280 ****
--- 275,281 ----
      }
  
  /*
+ break;
  Name: initializeRBT
  Process: returns NULL to tree root pointer to prepare tree for use
  Function input/parameters: none


********************************************************************************
MUTANT #338:
RedBlackTreeUtility.mutant.921.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar <= THIN_DIVIDER )
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #339:
RedBlackTreeUtility.mutant.866.c: ./RedBlackTreeUtility.c:800
*** Original
--- Mutant
***************
*** 797,802 ****
--- 797,803 ----
     }
  
  /*
+ continue;
  Name: displayChars
  Process: recursively displays a specified number of specified characters
  Function input/parameters: number of characters (int), 


********************************************************************************
MUTANT #340:
RedBlackTreeUtility.mutant.487.c: ./RedBlackTreeUtility.c:480
*** Original
--- Mutant
***************
*** 477,483 ****
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
!              printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
--- 477,483 ----
               printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
!              printf("");
               printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black


********************************************************************************
MUTANT #341:
RedBlackTreeUtility.mutant.233.c: ./RedBlackTreeUtility.c:243
*** Original
--- Mutant
***************
*** 240,246 ****
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
!          displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
      }
--- 240,246 ----
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
!          /*displayPreOrder(rootPtr, &rowStartFlag);*/
           printf("\n");
          }
      }


********************************************************************************
MUTANT #342:
RedBlackTreeUtility.mutant.975.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay > -1 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #343:
RedBlackTreeUtility.mutant.502.c: ./RedBlackTreeUtility.c:494
*** Original
--- Mutant
***************
*** 491,497 ****
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
--- 491,497 ----
               resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
!           if (grParentPtr != NULL 
                    && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #344:
RedBlackTreeUtility.mutant.616.c: ./RedBlackTreeUtility.c:583
*** Original
--- Mutant
***************
*** 580,586 ****
                      }
  
                   // swap parent and grandparent colors
!                  swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
               else
--- 580,586 ----
                      }
  
                   // swap parent and grandparent colors
!                  swapColors ( grParentPtr,parentPtr);
                  }
               // otherwise, assume right-left case
               else


********************************************************************************
MUTANT #345:
RedBlackTreeUtility.mutant.998.c: ./RedBlackTreeUtility.c:899
*** Original
--- Mutant
***************
*** 896,902 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
--- 896,902 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! -/
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;


********************************************************************************
MUTANT #346:
RedBlackTreeUtility.mutant.620.c: ./RedBlackTreeUtility.c:589
*** Original
--- Mutant
***************
*** 586,592 ****
               else
                  {
                   // rotate right, old top = parent, new top = working node
!                  rotateRight(wkgPtr, parentPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);
--- 586,592 ----
               else
                  {
                   // rotate right, old top = parent, new top = working node
!                  rotateRight ( parentPtr,wkgPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);


********************************************************************************
MUTANT #347:
RedBlackTreeUtility.mutant.441.c: ./RedBlackTreeUtility.c:462
*** Original
--- Mutant
***************
*** 459,465 ****
                  }
               else
                  {
!                  unclePtr = grParentPtr->leftChildPtr;
                  }
              }
          }
--- 459,465 ----
                  }
               else
                  {
!                  /*unclePtr = grParentPtr->leftChildPtr;*/
                  }
              }
          }


********************************************************************************
MUTANT #348:
RedBlackTreeUtility.mutant.1019.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot = NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #349:
RedBlackTreeUtility.mutant.883.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if(1==1)
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #350:
RedBlackTreeUtility.mutant.20.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (0==1)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #351:
RedBlackTreeUtility.mutant.101.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      /*if (wkgPtr != NULL)*/
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #352:
RedBlackTreeUtility.mutant.1135.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 1 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #353:
RedBlackTreeUtility.mutant.447.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color != RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #354:
RedBlackTreeUtility.mutant.56.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr == NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #355:
RedBlackTreeUtility.mutant.102.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (!(wkgPtr != NULL))
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #356:
RedBlackTreeUtility.mutant.913.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( (2+1), treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #357:
RedBlackTreeUtility.mutant.69.c: ./RedBlackTreeUtility.c:71
*** Original
--- Mutant
***************
*** 68,73 ****
--- 68,74 ----
      }
  
  /*
+ continue;
  Name: createNodeFromData
  Process: creates a Red Black tree node from the node data given,
           all links are set to NULL


********************************************************************************
MUTANT #358:
RedBlackTreeUtility.mutant.365.c: ./RedBlackTreeUtility.c:373
*** Original
--- Mutant
***************
*** 370,376 ****
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);
--- 370,376 ----
       else if (diff < 0)
          {
           // check if left child is not null
!          if (wkgPtr->leftChildPtr = NULL)
              {
               // recurse to the left and return result
               return insertHelper(wkgPtr->leftChildPtr, inData);


********************************************************************************
MUTANT #359:
RedBlackTreeUtility.mutant.575.c: ./RedBlackTreeUtility.c:549
*** Original
--- Mutant
***************
*** 546,552 ****
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("   - Uncle is black\n");
  
               // check for right-right case
               if (parentPtr->rightChildPtr == wkgPtr)
--- 546,552 ----
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
!              /*printf("   - Uncle is black\n");*/
  
               // check for right-right case
               if (parentPtr->rightChildPtr == wkgPtr)


********************************************************************************
MUTANT #360:
RedBlackTreeUtility.mutant.1102.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower ( nodeHeight - workingLevel + 1 , 2) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #361:
RedBlackTreeUtility.mutant.1060.c: ./RedBlackTreeUtility.c:943
*** Original
--- Mutant
***************
*** 940,946 ****
     {
      int leadingSpaces;
    
!     if( *rowStartFlag )
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
--- 940,946 ----
     {
      int leadingSpaces;
    
!     if (!( *rowStartFlag ))
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  


********************************************************************************
MUTANT #362:
RedBlackTreeUtility.mutant.901.c: ./RedBlackTreeUtility.c:833
*** Original
--- Mutant
***************
*** 830,836 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
--- 830,836 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! //
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );


********************************************************************************
MUTANT #363:
RedBlackTreeUtility.mutant.853.c: ./RedBlackTreeUtility.c:791
*** Original
--- Mutant
***************
*** 788,794 ****
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
!         else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
--- 788,794 ----
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
!         /*else*/
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #364:
RedBlackTreeUtility.mutant.627.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (*treeRoot > wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #365:
RedBlackTreeUtility.mutant.450.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color > RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #366:
RedBlackTreeUtility.mutant.267.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      return -(1+1);
      }
  
  /*


********************************************************************************
MUTANT #367:
RedBlackTreeUtility.mutant.748.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr > oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #368:
RedBlackTreeUtility.mutant.1143.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent + 1 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #369:
RedBlackTreeUtility.mutant.253.c: ./RedBlackTreeUtility.c:267
*** Original
--- Mutant
***************
*** 264,270 ****
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
!          rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
           return getMax(leftHeight, rightHeight) + 1;
--- 264,270 ----
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
!          /*rightHeight = findTreeHeight(localPtr->rightChildPtr);*/
  
           // add 1 to the max of the two sizes and return it
           return getMax(leftHeight, rightHeight) + 1;


********************************************************************************
MUTANT #370:
RedBlackTreeUtility.mutant.588.c: ./RedBlackTreeUtility.c:557
*** Original
--- Mutant
***************
*** 554,560 ****
                   // print debugging statements
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
!                  printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
--- 554,560 ----
                   // print debugging statements
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
!                  printf("");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent


********************************************************************************
MUTANT #371:
RedBlackTreeUtility.mutant.493.c: ./RedBlackTreeUtility.c:488
*** Original
--- Mutant
***************
*** 485,491 ****
               unclePtr->color = BLACK;
  
               // change grandparent to Red
!              grParentPtr->color = RED;
  
               // resolve grandparent
               resolveRBT(treeRoot, grParentPtr);
--- 485,491 ----
               unclePtr->color = BLACK;
  
               // change grandparent to Red
!              /*grParentPtr->color = RED;*/
  
               // resolve grandparent
               resolveRBT(treeRoot, grParentPtr);


********************************************************************************
MUTANT #372:
RedBlackTreeUtility.mutant.1027.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel >= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #373:
RedBlackTreeUtility.mutant.1142.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if(1==1)
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #374:
RedBlackTreeUtility.mutant.546.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (1==1)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #375:
RedBlackTreeUtility.mutant.523.c: ./RedBlackTreeUtility.c:505
*** Original
--- Mutant
***************
*** 502,508 ****
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
!                  printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
--- 502,508 ----
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
!                  /*printf("      - Rotate Right from left side of ");*/
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  


********************************************************************************
MUTANT #376:
RedBlackTreeUtility.mutant.265.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      return 1;
      }
  
  /*


********************************************************************************
MUTANT #377:
RedBlackTreeUtility.mutant.1106.c: ./RedBlackTreeUtility.c:957
*** Original
--- Mutant
***************
*** 954,960 ****
  
      displayChars( leadingSpaces, SPACE );
    
!     printf( "%c", data );         
     }
  
  /*
--- 954,960 ----
  
      displayChars( leadingSpaces, SPACE );
    
!     printf( "", data );         
     }
  
  /*


********************************************************************************
MUTANT #378:
RedBlackTreeUtility.mutant.1022.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if(1==1)
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #379:
RedBlackTreeUtility.mutant.30.c: ./RedBlackTreeUtility.c:45
*** Original
--- Mutant
***************
*** 42,48 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! */
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;
--- 42,48 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! //
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;


********************************************************************************
MUTANT #380:
RedBlackTreeUtility.mutant.120.c: ./RedBlackTreeUtility.c:141
*** Original
--- Mutant
***************
*** 138,144 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
--- 138,144 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          /*printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);*/
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }


********************************************************************************
MUTANT #381:
RedBlackTreeUtility.mutant.198.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (traverseCode <= INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #382:
RedBlackTreeUtility.mutant.66.c: ./RedBlackTreeUtility.c:63
*** Original
--- Mutant
***************
*** 60,66 ****
  
           if (copiedNode->rightChildPtr != NULL)
              {
!              copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
          }
  
--- 60,66 ----
  
           if (copiedNode->rightChildPtr != NULL)
              {
!              /*copiedNode->rightChildPtr->parentPtr = copiedNode;*/
              }
          }
  


********************************************************************************
MUTANT #383:
RedBlackTreeUtility.mutant.941.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel / workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #384:
RedBlackTreeUtility.mutant.701.c: ./RedBlackTreeUtility.c:672
*** Original
--- Mutant
***************
*** 669,674 ****
--- 669,675 ----
      }
  
  /*
+ continue;
  Name: rotateRight
  Process: "rotates" nodes to the right by resetting pointers
           to related nodes


********************************************************************************
MUTANT #385:
RedBlackTreeUtility.mutant.1122.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if (!( other > max ))
         {
          max = other;
         }


********************************************************************************
MUTANT #386:
RedBlackTreeUtility.mutant.1031.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = (1+1); displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #387:
RedBlackTreeUtility.mutant.489.c: ./RedBlackTreeUtility.c:481
*** Original
--- Mutant
***************
*** 478,484 ****
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
!              printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;
--- 478,484 ----
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
!              printf("");
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;


********************************************************************************
MUTANT #388:
RedBlackTreeUtility.mutant.577.c: ./RedBlackTreeUtility.c:552
*** Original
--- Mutant
***************
*** 549,555 ****
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
--- 549,555 ----
               printf("   - Uncle is black\n");
  
               // check for right-right case
!              if (parentPtr->rightChildPtr <= wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");


********************************************************************************
MUTANT #389:
RedBlackTreeUtility.mutant.294.c: ./RedBlackTreeUtility.c:320
*** Original
--- Mutant
***************
*** 317,323 ****
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
!      else
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
--- 317,323 ----
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
!      /*else*/
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper


********************************************************************************
MUTANT #390:
RedBlackTreeUtility.mutant.399.c: ./RedBlackTreeUtility.c:418
*** Original
--- Mutant
***************
*** 415,421 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;
--- 415,421 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! %/
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;


********************************************************************************
MUTANT #391:
RedBlackTreeUtility.mutant.1068.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 1, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #392:
RedBlackTreeUtility.mutant.1069.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( -1, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #393:
RedBlackTreeUtility.mutant.481.c: ./RedBlackTreeUtility.c:477
*** Original
--- Mutant
***************
*** 474,480 ****
           if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
!              printf("   - Uncle is red\n");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
--- 474,480 ----
           if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
!              printf("");
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");


********************************************************************************
MUTANT #394:
RedBlackTreeUtility.mutant.1140.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if (!( exponent > 0 ))
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #395:
RedBlackTreeUtility.mutant.757.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && (1==1))
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #396:
RedBlackTreeUtility.mutant.227.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      /*else if (traverseCode == PREORDER_TRAVERSE)*/
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #397:
RedBlackTreeUtility.mutant.312.c: ./RedBlackTreeUtility.c:336
*** Original
--- Mutant
***************
*** 333,339 ****
  
           // call resolver function to resolve
           // function: resolveRBT
!          resolveRBT(&treeRoot, insertedNodePtr);
  
           return insertedNodePtr;
          }
--- 333,339 ----
  
           // call resolver function to resolve
           // function: resolveRBT
!          /*resolveRBT(&treeRoot, insertedNodePtr);*/
  
           return insertedNodePtr;
          }


********************************************************************************
MUTANT #398:
RedBlackTreeUtility.mutant.416.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (0==1)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #399:
RedBlackTreeUtility.mutant.451.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color < RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #400:
RedBlackTreeUtility.mutant.163.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr == NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #401:
RedBlackTreeUtility.mutant.666.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr >= oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #402:
RedBlackTreeUtility.mutant.174.c: ./RedBlackTreeUtility.c:198
*** Original
--- Mutant
***************
*** 195,201 ****
      {
       if (wkgPtr != NULL)
          {
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");
--- 195,201 ----
      {
       if (wkgPtr != NULL)
          {
!          if (0==1)
              {
               *rowStartFlag = false;
               printf("\nPreorder :  ");


********************************************************************************
MUTANT #403:
RedBlackTreeUtility.mutant.784.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if(0==1)
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #404:
RedBlackTreeUtility.mutant.112.c: ./RedBlackTreeUtility.c:134
*** Original
--- Mutant
***************
*** 131,137 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nInorder  :  ");
              }
           else
              {
--- 131,137 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              /*printf("\nInorder  :  ");*/
              }
           else
              {


********************************************************************************
MUTANT #405:
RedBlackTreeUtility.mutant.1116.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if( other < max )
         {
          max = other;
         }


********************************************************************************
MUTANT #406:
RedBlackTreeUtility.mutant.728.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr >= oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #407:
RedBlackTreeUtility.mutant.1005.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 0;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #408:
RedBlackTreeUtility.mutant.455.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (!(parentPtr != NULL && parentPtr->color == RED))
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #409:
RedBlackTreeUtility.mutant.315.c: ./RedBlackTreeUtility.c:345
*** Original
--- Mutant
***************
*** 342,347 ****
--- 342,348 ----
      }
  
  /*
+ break;
  Name: insertHelper
  Process: recursively finds place to add node, 
           places node using "look down" strategy,


********************************************************************************
MUTANT #410:
RedBlackTreeUtility.mutant.822.c: ./RedBlackTreeUtility.c:779
*** Original
--- Mutant
***************
*** 776,782 ****
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
!         else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
--- 776,782 ----
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
!         
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #411:
RedBlackTreeUtility.mutant.418.c: ./RedBlackTreeUtility.c:450
*** Original
--- Mutant
***************
*** 447,453 ****
  
       if (parentPtr != NULL)
          {
!          grParentPtr = parentPtr->parentPtr;
  
           if (grParentPtr != NULL)
              {
--- 447,453 ----
  
       if (parentPtr != NULL)
          {
!          /*grParentPtr = parentPtr->parentPtr;*/
  
           if (grParentPtr != NULL)
              {


********************************************************************************
MUTANT #412:
RedBlackTreeUtility.mutant.1085.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight / workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #413:
RedBlackTreeUtility.mutant.259.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + -1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #414:
RedBlackTreeUtility.mutant.202.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (!(traverseCode == INORDER_TRAVERSE))
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #415:
RedBlackTreeUtility.mutant.882.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if(0==1)
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #416:
RedBlackTreeUtility.mutant.839.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if (!( workingNode->rightChildPtr != NULL ))
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #417:
RedBlackTreeUtility.mutant.969.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay < 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #418:
RedBlackTreeUtility.mutant.825.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel * 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #419:
RedBlackTreeUtility.mutant.667.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr > oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #420:
RedBlackTreeUtility.mutant.223.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode <= PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #421:
RedBlackTreeUtility.mutant.982.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while(!( nodesToDisplay > 0 ))
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #422:
RedBlackTreeUtility.mutant.1095.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - -1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #423:
RedBlackTreeUtility.mutant.988.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,884 ****
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
         }
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
!         displayValue( charOut , displayLevel, nodeHeight, rowStartFlag );
        
          nodesToDisplay--;
         }


********************************************************************************
MUTANT #424:
RedBlackTreeUtility.mutant.590.c: ./RedBlackTreeUtility.c:558
*** Original
--- Mutant
***************
*** 555,561 ****
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
!                  printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
--- 555,561 ----
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
!                  printf("");
  
                   // rotate left, old top = grandparent, new top = parent
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);


********************************************************************************
MUTANT #425:
RedBlackTreeUtility.mutant.495.c: ./RedBlackTreeUtility.c:491
*** Original
--- Mutant
***************
*** 488,494 ****
               grParentPtr->color = RED;
  
               // resolve grandparent
!              resolveRBT(treeRoot, grParentPtr);
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
--- 488,494 ----
               grParentPtr->color = RED;
  
               // resolve grandparent
!              /*resolveRBT(treeRoot, grParentPtr);*/
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 


********************************************************************************
MUTANT #426:
RedBlackTreeUtility.mutant.1050.c: ./RedBlackTreeUtility.c:919
*** Original
--- Mutant
***************
*** 916,922 ****
             }
         }
    
!     else
         {
          printf( "\nEmpty Tree - No Display" );
         }
--- 916,922 ----
             }
         }
    
!     /*else*/
         {
          printf( "\nEmpty Tree - No Display" );
         }


********************************************************************************
MUTANT #427:
RedBlackTreeUtility.mutant.956.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if(0==1)
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #428:
RedBlackTreeUtility.mutant.117.c: ./RedBlackTreeUtility.c:138
*** Original
--- Mutant
***************
*** 135,141 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 135,141 ----
              }
           else
              {
!              /*printf("%s ", SEMICOLON_BREAK);*/
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #429:
RedBlackTreeUtility.mutant.1007.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + -1;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #430:
RedBlackTreeUtility.mutant.871.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars < 0 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #431:
RedBlackTreeUtility.mutant.908.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 0 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #432:
RedBlackTreeUtility.mutant.782.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     /*if( ctrlCode == NODE_COLOR )*/
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #433:
RedBlackTreeUtility.mutant.152.c: ./RedBlackTreeUtility.c:174
*** Original
--- Mutant
***************
*** 171,177 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 171,177 ----
              }
           else
              {
!              printf ( SEMICOLON_BREAK,"%s ");
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #434:
RedBlackTreeUtility.mutant.351.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff != 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #435:
RedBlackTreeUtility.mutant.222.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode != PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #436:
RedBlackTreeUtility.mutant.1138.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > (0-1) )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #437:
RedBlackTreeUtility.mutant.1090.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 0 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #438:
RedBlackTreeUtility.mutant.1052.c: ./RedBlackTreeUtility.c:921
*** Original
--- Mutant
***************
*** 918,924 ****
    
      else
         {
!         printf( "\nEmpty Tree - No Display" );
         }
     }
  
--- 918,924 ----
    
      else
         {
!         printf( "" );
         }
     }
  


********************************************************************************
MUTANT #439:
RedBlackTreeUtility.mutant.1032.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = (1-1); displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #440:
RedBlackTreeUtility.mutant.434.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr < parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #441:
RedBlackTreeUtility.mutant.541.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr >= grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #442:
RedBlackTreeUtility.mutant.977.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay > (0-1) )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #443:
RedBlackTreeUtility.mutant.254.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) - 1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #444:
RedBlackTreeUtility.mutant.887.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars + 1, outChar );
         }
     }
  


********************************************************************************
MUTANT #445:
RedBlackTreeUtility.mutant.457.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (1==1)
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #446:
RedBlackTreeUtility.mutant.158.c: ./RedBlackTreeUtility.c:182
*** Original
--- Mutant
***************
*** 179,184 ****
--- 179,185 ----
      }
  
  /*
+ continue;
  Name: displayPreOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using pre order strategy


********************************************************************************
MUTANT #447:
RedBlackTreeUtility.mutant.490.c: ./RedBlackTreeUtility.c:481
*** Original
--- Mutant
***************
*** 478,484 ****
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
!              printf("      - Resolving Grandparent\n");
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;
--- 478,484 ----
               printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
!              /*printf("      - Resolving Grandparent\n");*/
  
               // change parent and uncle to Black
               parentPtr->color = BLACK;


********************************************************************************
MUTANT #448:
RedBlackTreeUtility.mutant.833.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr == NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #449:
RedBlackTreeUtility.mutant.400.c: ./RedBlackTreeUtility.c:421
*** Original
--- Mutant
***************
*** 418,424 ****
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr == NULL;
      }
  
  /*
--- 418,424 ----
  */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
!      return localPtr != NULL;
      }
  
  /*


********************************************************************************
MUTANT #450:
RedBlackTreeUtility.mutant.916.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + (2-1) );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #451:
RedBlackTreeUtility.mutant.717.c: ./RedBlackTreeUtility.c:698
*** Original
--- Mutant
***************
*** 695,701 ****
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (oldTopPtr->leftChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;
--- 695,701 ----
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
  
       // check if old top's new left child is not NULL
!      if (0==1)
          {
           // link new right child back up to old top
           oldTopPtr->leftChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #452:
RedBlackTreeUtility.mutant.944.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 1, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #453:
RedBlackTreeUtility.mutant.153.c: ./RedBlackTreeUtility.c:174
*** Original
--- Mutant
***************
*** 171,177 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 171,177 ----
              }
           else
              {
!              /*printf("%s ", SEMICOLON_BREAK);*/
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #454:
RedBlackTreeUtility.mutant.104.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (1==1)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #455:
RedBlackTreeUtility.mutant.144.c: ./RedBlackTreeUtility.c:167
*** Original
--- Mutant
***************
*** 164,170 ****
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");
--- 164,170 ----
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (0==1)
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");


********************************************************************************
MUTANT #456:
RedBlackTreeUtility.mutant.929.c: ./RedBlackTreeUtility.c:843
*** Original
--- Mutant
***************
*** 840,846 ****
  
      if( dividerChar == THIN_DIVIDER )
         {
!         printf( "\n" );
         }
  
      printf( "\n" );
--- 840,846 ----
  
      if( dividerChar == THIN_DIVIDER )
         {
!         printf( "" );
         }
  
      printf( "\n" );


********************************************************************************
MUTANT #457:
RedBlackTreeUtility.mutant.396.c: ./RedBlackTreeUtility.c:418
*** Original
--- Mutant
***************
*** 415,421 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;
--- 415,421 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! +/
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;


********************************************************************************
MUTANT #458:
RedBlackTreeUtility.mutant.250.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (0==1)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #459:
RedBlackTreeUtility.mutant.692.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (0==1)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #460:
RedBlackTreeUtility.mutant.754.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (0==1)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #461:
RedBlackTreeUtility.mutant.1029.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 0; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #462:
RedBlackTreeUtility.mutant.686.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr > oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #463:
RedBlackTreeUtility.mutant.838.c: ./RedBlackTreeUtility.c:785
*** Original
--- Mutant
***************
*** 782,788 ****
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 782,788 ----
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
!         if( workingNode->rightChildPtr = NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #464:
RedBlackTreeUtility.mutant.543.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr < grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #465:
RedBlackTreeUtility.mutant.352.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 1)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #466:
RedBlackTreeUtility.mutant.438.c: ./RedBlackTreeUtility.c:458
*** Original
--- Mutant
***************
*** 455,461 ****
  
               if (grParentPtr->leftChildPtr == parentPtr)
                  {
!                  unclePtr = grParentPtr->rightChildPtr;
                  }
               else
                  {
--- 455,461 ----
  
               if (grParentPtr->leftChildPtr == parentPtr)
                  {
!                  /*unclePtr = grParentPtr->rightChildPtr;*/
                  }
               else
                  {


********************************************************************************
MUTANT #467:
RedBlackTreeUtility.mutant.1134.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent != 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #468:
RedBlackTreeUtility.mutant.236.c: ./RedBlackTreeUtility.c:249
*** Original
--- Mutant
***************
*** 246,251 ****
--- 246,252 ----
      }
  
  /*
+ break;
  Name: findTreeHeight
  Process: recursively finds height of tree
  Function input/parameters: working pointer for recursion (RedBlackNodeType *)


********************************************************************************
MUTANT #469:
RedBlackTreeUtility.mutant.1082.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) + 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #470:
RedBlackTreeUtility.mutant.1141.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if(0==1)
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #471:
RedBlackTreeUtility.mutant.930.c: ./RedBlackTreeUtility.c:843
*** Original
--- Mutant
***************
*** 840,846 ****
  
      if( dividerChar == THIN_DIVIDER )
         {
!         printf( "\n" );
         }
  
      printf( "\n" );
--- 840,846 ----
  
      if( dividerChar == THIN_DIVIDER )
         {
!         /*printf( "\n" );*/
         }
  
      printf( "\n" );


********************************************************************************
MUTANT #472:
RedBlackTreeUtility.mutant.310.c: ./RedBlackTreeUtility.c:332
*** Original
--- Mutant
***************
*** 329,335 ****
          {
           // print inserting/resolving statement
           // function: printf
!          printf("\nInserting %c and resolving\n", inData);
  
           // call resolver function to resolve
           // function: resolveRBT
--- 329,335 ----
          {
           // print inserting/resolving statement
           // function: printf
!          /*printf("\nInserting %c and resolving\n", inData);*/
  
           // call resolver function to resolve
           // function: resolveRBT


********************************************************************************
MUTANT #473:
RedBlackTreeUtility.mutant.1083.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight * workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #474:
RedBlackTreeUtility.mutant.874.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars <= 0 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #475:
RedBlackTreeUtility.mutant.264.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      return +1;
      }
  
  /*


********************************************************************************
MUTANT #476:
RedBlackTreeUtility.mutant.427.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (0==1)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #477:
RedBlackTreeUtility.mutant.1150.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) % base;
         }
    
      return 1;


********************************************************************************
MUTANT #478:
RedBlackTreeUtility.mutant.154.c: ./RedBlackTreeUtility.c:177
*** Original
--- Mutant
***************
*** 174,180 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
          }
      }
  
--- 174,180 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("", wkgPtr->data, (char)wkgPtr->color);
          }
      }
  


********************************************************************************
MUTANT #479:
RedBlackTreeUtility.mutant.1136.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > -1 )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #480:
RedBlackTreeUtility.mutant.1009.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + (2-1);
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #481:
RedBlackTreeUtility.mutant.1126.c: ./RedBlackTreeUtility.c:979
*** Original
--- Mutant
***************
*** 976,982 ****
          max = other;
         }
    
!     return max;
     }
  
  /*
--- 976,982 ----
          max = other;
         }
    
!     /*return max;*/
     }
  
  /*


********************************************************************************
MUTANT #482:
RedBlackTreeUtility.mutant.1010.c: ./RedBlackTreeUtility.c:903
*** Original
--- Mutant
***************
*** 900,906 ****
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = 1;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )
--- 900,906 ----
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = 0;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )


********************************************************************************
MUTANT #483:
RedBlackTreeUtility.mutant.910.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 1 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #484:
RedBlackTreeUtility.mutant.7.c: ./RedBlackTreeUtility.c:12
*** Original
--- Mutant
***************
*** 9,14 ****
--- 9,15 ----
  // functions
  
  /*
+ continue;
  Name: clearTree
  Process: recursively returns dynamically allocated data to the OS
           using a post order traversal strategy


********************************************************************************
MUTANT #485:
RedBlackTreeUtility.mutant.968.c: ./RedBlackTreeUtility.c:875
*** Original
--- Mutant
***************
*** 872,878 ****
        
          if( ctrlCode == NODE_COLOR )
             {
!             charOut = 'B';
             }
         }
    
--- 872,878 ----
        
          if( ctrlCode == NODE_COLOR )
             {
!             /*charOut = 'B';*/
             }
         }
    


********************************************************************************
MUTANT #486:
RedBlackTreeUtility.mutant.429.c: ./RedBlackTreeUtility.c:454
*** Original
--- Mutant
***************
*** 451,457 ****
  
           if (grParentPtr != NULL)
              {
!              greatGrParentPtr = grParentPtr->parentPtr;
  
               if (grParentPtr->leftChildPtr == parentPtr)
                  {
--- 451,457 ----
  
           if (grParentPtr != NULL)
              {
!              /*greatGrParentPtr = grParentPtr->parentPtr;*/
  
               if (grParentPtr->leftChildPtr == parentPtr)
                  {


********************************************************************************
MUTANT #487:
RedBlackTreeUtility.mutant.746.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr <= oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #488:
RedBlackTreeUtility.mutant.586.c: ./RedBlackTreeUtility.c:556
*** Original
--- Mutant
***************
*** 553,559 ****
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
!                  printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
--- 553,559 ----
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
!                  printf("");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  


********************************************************************************
MUTANT #489:
RedBlackTreeUtility.mutant.1077.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel - 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #490:
RedBlackTreeUtility.mutant.359.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!       if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #491:
RedBlackTreeUtility.mutant.251.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (1==1)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #492:
RedBlackTreeUtility.mutant.89.c: ./RedBlackTreeUtility.c:113
*** Original
--- Mutant
***************
*** 110,115 ****
--- 110,116 ----
      }
  
  /*
+ break;
  Name: displayInOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using in order strategy


********************************************************************************
MUTANT #493:
RedBlackTreeUtility.mutant.230.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (1==1)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #494:
RedBlackTreeUtility.mutant.1121.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     /*if( other > max )*/
         {
          max = other;
         }


********************************************************************************
MUTANT #495:
RedBlackTreeUtility.mutant.698.c: ./RedBlackTreeUtility.c:664
*** Original
--- Mutant
***************
*** 661,667 ****
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
!          oldParent->rightChildPtr = newTopPtr;
          }
  
       // return new top pointer
--- 661,667 ----
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
!          /*oldParent->rightChildPtr = newTopPtr;*/
          }
  
       // return new top pointer


********************************************************************************
MUTANT #496:
RedBlackTreeUtility.mutant.984.c: ./RedBlackTreeUtility.c:881
*** Original
--- Mutant
***************
*** 878,883 ****
--- 878,884 ----
    
      while( nodesToDisplay > 0 )
         {
+        continue;
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;


********************************************************************************
MUTANT #497:
RedBlackTreeUtility.mutant.821.c: ./RedBlackTreeUtility.c:779
*** Original
--- Mutant
***************
*** 776,782 ****
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
!         else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
--- 776,782 ----
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
!         /*else*/
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #498:
RedBlackTreeUtility.mutant.946.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( (2+1), displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #499:
RedBlackTreeUtility.mutant.45.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr == NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #500:
RedBlackTreeUtility.mutant.430.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr != parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #501:
RedBlackTreeUtility.mutant.1087.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight % workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #502:
RedBlackTreeUtility.mutant.77.c: ./RedBlackTreeUtility.c:88
*** Original
--- Mutant
***************
*** 85,91 ****
  
       newNode->color = (Colors)nodeColor;
       newNode->data = data;
!      newNode->parentPtr = NULL;
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
  
--- 85,91 ----
  
       newNode->color = (Colors)nodeColor;
       newNode->data = data;
!      /*newNode->parentPtr = NULL;*/
       newNode->leftChildPtr = NULL;
       newNode->rightChildPtr = NULL;
  


********************************************************************************
MUTANT #503:
RedBlackTreeUtility.mutant.67.c: ./RedBlackTreeUtility.c:67
*** Original
--- Mutant
***************
*** 64,70 ****
              }
          }
  
!      return copiedNode;
      }
  
  /*
--- 64,70 ----
              }
          }
  
!      /*return copiedNode;*/
      }
  
  /*


********************************************************************************
MUTANT #504:
RedBlackTreeUtility.mutant.905.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight / 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #505:
RedBlackTreeUtility.mutant.1118.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if( other >= max )
         {
          max = other;
         }


********************************************************************************
MUTANT #506:
RedBlackTreeUtility.mutant.617.c: ./RedBlackTreeUtility.c:583
*** Original
--- Mutant
***************
*** 580,586 ****
                      }
  
                   // swap parent and grandparent colors
!                  swapColors(parentPtr, grParentPtr);
                  }
               // otherwise, assume right-left case
               else
--- 580,586 ----
                      }
  
                   // swap parent and grandparent colors
!                  /*swapColors(parentPtr, grParentPtr);*/
                  }
               // otherwise, assume right-left case
               else


********************************************************************************
MUTANT #507:
RedBlackTreeUtility.mutant.1040.c: ./RedBlackTreeUtility.c:910
*** Original
--- Mutant
***************
*** 907,913 ****
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
!             rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
--- 907,913 ----
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
!             /*rowStartFlag = true;*/
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #508:
RedBlackTreeUtility.mutant.1020.c: ./RedBlackTreeUtility.c:906
*** Original
--- Mutant
***************
*** 903,909 ****
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
--- 903,909 ----
      int workingLevel = 1;
      bool rowStartFlag;
  
!     if (!( rbTreeRoot != NULL ))
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {


********************************************************************************
MUTANT #509:
RedBlackTreeUtility.mutant.846.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel % 1, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #510:
RedBlackTreeUtility.mutant.1049.c: ./RedBlackTreeUtility.c:915
*** Original
--- Mutant
***************
*** 912,918 ****
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
!             printf( "\n" );
             }
         }
    
--- 912,918 ----
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
!             /*printf( "\n" );*/
             }
         }
    


********************************************************************************
MUTANT #511:
RedBlackTreeUtility.mutant.1137.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > (0+1) )
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #512:
RedBlackTreeUtility.mutant.178.c: ./RedBlackTreeUtility.c:201
*** Original
--- Mutant
***************
*** 198,204 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nPreorder :  ");
              }
           else
              {
--- 198,204 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              /*printf("\nPreorder :  ");*/
              }
           else
              {


********************************************************************************
MUTANT #513:
RedBlackTreeUtility.mutant.82.c: ./RedBlackTreeUtility.c:96
*** Original
--- Mutant
***************
*** 93,98 ****
--- 93,99 ----
      }
  
  /*
+ continue;
  Name: createNodeFromNode
  Process: allocates memory for node,
           copies an individual tree node from another node,


********************************************************************************
MUTANT #514:
RedBlackTreeUtility.mutant.629.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      /*if (*treeRoot == wkgPtr)*/
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #515:
RedBlackTreeUtility.mutant.1000.c: ./RedBlackTreeUtility.c:899
*** Original
--- Mutant
***************
*** 896,902 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
--- 896,902 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: findTreeHeight, displayAtTreeLevel, printf
! %/
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;


********************************************************************************
MUTANT #516:
RedBlackTreeUtility.mutant.845.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel / 1, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #517:
RedBlackTreeUtility.mutant.349.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff <= 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #518:
RedBlackTreeUtility.mutant.1139.c: ./RedBlackTreeUtility.c:995
*** Original
--- Mutant
***************
*** 992,998 ****
  */
  int toPower( int base, int exponent )
     {
!     if( exponent > 0 )
         {
          return toPower( base, exponent - 1 ) * base;
         }
--- 992,998 ----
  */
  int toPower( int base, int exponent )
     {
!     /*if( exponent > 0 )*/
         {
          return toPower( base, exponent - 1 ) * base;
         }


********************************************************************************
MUTANT #519:
RedBlackTreeUtility.mutant.1152.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - -1 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #520:
RedBlackTreeUtility.mutant.1096.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( (2+1), nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #521:
RedBlackTreeUtility.mutant.506.c: ./RedBlackTreeUtility.c:495
*** Original
--- Mutant
***************
*** 492,498 ****
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 492,498 ----
              }
           // otherwise, assume uncle is black, check for left cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->leftChildPtr > parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #522:
RedBlackTreeUtility.mutant.566.c: ./RedBlackTreeUtility.c:545
*** Original
--- Mutant
***************
*** 542,548 ****
                  }
              }
           // otherwise, check for right cases
!          else if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
--- 542,548 ----
                  }
              }
           // otherwise, check for right cases
!           if (grParentPtr != NULL 
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement


********************************************************************************
MUTANT #523:
RedBlackTreeUtility.mutant.726.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr != oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #524:
RedBlackTreeUtility.mutant.269.c: ./RedBlackTreeUtility.c:274
*** Original
--- Mutant
***************
*** 271,277 ****
          }
  
       // otherwise, assume null and return a -1
!      return -1;
      }
  
  /*
--- 271,277 ----
          }
  
       // otherwise, assume null and return a -1
!      /*return -1;*/
      }
  
  /*


********************************************************************************
MUTANT #525:
RedBlackTreeUtility.mutant.695.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && (1==1))
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #526:
RedBlackTreeUtility.mutant.149.c: ./RedBlackTreeUtility.c:172
*** Original
--- Mutant
***************
*** 169,175 ****
               *rowStartFlag = false;
               printf("\nPostorder:  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 169,175 ----
               *rowStartFlag = false;
               printf("\nPostorder:  ");
              }
!          /*else*/
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #527:
RedBlackTreeUtility.mutant.1094.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + -1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #528:
RedBlackTreeUtility.mutant.847.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 0, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #529:
RedBlackTreeUtility.mutant.963.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if( ctrlCode < NODE_COLOR )
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #530:
RedBlackTreeUtility.mutant.615.c: ./RedBlackTreeUtility.c:579
*** Original
--- Mutant
***************
*** 576,582 ****
                   else
                      {
                       // link great grandparent to new top
!                      greatGrParentPtr->rightChildPtr = newTopPtr;
                      }
  
                   // swap parent and grandparent colors
--- 576,582 ----
                   else
                      {
                       // link great grandparent to new top
!                      /*greatGrParentPtr->rightChildPtr = newTopPtr;*/
                      }
  
                   // swap parent and grandparent colors


********************************************************************************
MUTANT #531:
RedBlackTreeUtility.mutant.1042.c: ./RedBlackTreeUtility.c:914
*** Original
--- Mutant
***************
*** 911,916 ****
--- 911,917 ----
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
+                           break;
            
              printf( "\n" );
             }


********************************************************************************
MUTANT #532:
RedBlackTreeUtility.mutant.544.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (!(greatGrParentPtr->leftChildPtr == grParentPtr))
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #533:
RedBlackTreeUtility.mutant.884.c: ./RedBlackTreeUtility.c:814
*** Original
--- Mutant
***************
*** 811,817 ****
     {
      if( numChars > 0 )
         {
!         printf( "%c", outChar );
        
          displayChars( numChars - 1, outChar );
         }
--- 811,817 ----
     {
      if( numChars > 0 )
         {
!         printf( "", outChar );
        
          displayChars( numChars - 1, outChar );
         }


********************************************************************************
MUTANT #534:
RedBlackTreeUtility.mutant.37.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr = NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #535:
RedBlackTreeUtility.mutant.376.c: ./RedBlackTreeUtility.c:389
*** Original
--- Mutant
***************
*** 386,392 ****
           return wkgPtr->leftChildPtr;
          }
       // otherwise, assume data is greater than working node
!      else
          {
           // check if right child is not null
           if (wkgPtr->rightChildPtr != NULL)
--- 386,392 ----
           return wkgPtr->leftChildPtr;
          }
       // otherwise, assume data is greater than working node
!      /*else*/
          {
           // check if right child is not null
           if (wkgPtr->rightChildPtr != NULL)


********************************************************************************
MUTANT #536:
RedBlackTreeUtility.mutant.876.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 1 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #537:
RedBlackTreeUtility.mutant.788.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel <= displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #538:
RedBlackTreeUtility.mutant.1039.c: ./RedBlackTreeUtility.c:911
*** Original
--- Mutant
***************
*** 908,913 ****
--- 908,914 ----
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
+             continue;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #539:
RedBlackTreeUtility.mutant.88.c: ./RedBlackTreeUtility.c:109
*** Original
--- Mutant
***************
*** 106,112 ****
  */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
!      return createNodeFromData(srcPtr->data, srcPtr->color);
      }
  
  /*
--- 106,112 ----
  */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
!      /*return createNodeFromData(srcPtr->data, srcPtr->color);*/
      }
  
  /*


********************************************************************************
MUTANT #540:
RedBlackTreeUtility.mutant.657.c: ./RedBlackTreeUtility.c:652
*** Original
--- Mutant
***************
*** 649,655 ****
       if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
!          oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
          }
  
       // point new top's left child to old top
--- 649,655 ----
       if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
!          /*oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;*/
          }
  
       // point new top's left child to old top


********************************************************************************
MUTANT #541:
RedBlackTreeUtility.mutant.1120.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if( other != max )
         {
          max = other;
         }


********************************************************************************
MUTANT #542:
RedBlackTreeUtility.mutant.514.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr >= wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #543:
RedBlackTreeUtility.mutant.181.c: ./RedBlackTreeUtility.c:205
*** Original
--- Mutant
***************
*** 202,208 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 202,208 ----
              }
           else
              {
!              printf("", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #544:
RedBlackTreeUtility.mutant.739.c: ./RedBlackTreeUtility.c:709
*** Original
--- Mutant
***************
*** 706,712 ****
  
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
!          oldParent->leftChildPtr = newTopPtr;
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
--- 706,712 ----
  
       if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
!          /*oldParent->leftChildPtr = newTopPtr;*/
          }
       else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {


********************************************************************************
MUTANT #545:
RedBlackTreeUtility.mutant.637.c: ./RedBlackTreeUtility.c:609
*** Original
--- Mutant
***************
*** 606,611 ****
--- 606,612 ----
  
       // display structure for debugging if not the first value inserted
       /*
+      continue;
       if (wkgPtr->leftChildPtr != NULL || wkgPtr->rightChildPtr != NULL 
           || wkgPtr->parentPtr != NULL)
          {


********************************************************************************
MUTANT #546:
RedBlackTreeUtility.mutant.542.c: ./RedBlackTreeUtility.c:519
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr > grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #547:
RedBlackTreeUtility.mutant.0.c: ./RedBlackTreeUtility.c:5
*** Original
--- Mutant
***************
*** 2,8 ****
  #include "RedBlackTreeUtility.h"
  
  // constants
! const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
  const char THIN_DIVIDER = '-';
  
--- 2,8 ----
  #include "RedBlackTreeUtility.h"
  
  // constants
! const char SEMICOLON_BREAK[] = "";
  const char THICK_DIVIDER = '=';
  const char THIN_DIVIDER = '-';
  


********************************************************************************
MUTANT #548:
RedBlackTreeUtility.mutant.914.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + (2+1) );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #549:
RedBlackTreeUtility.mutant.584.c: ./RedBlackTreeUtility.c:555
*** Original
--- Mutant
***************
*** 552,558 ****
               if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
--- 552,558 ----
               if (parentPtr->rightChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");


********************************************************************************
MUTANT #550:
RedBlackTreeUtility.mutant.124.c: ./RedBlackTreeUtility.c:148
*** Original
--- Mutant
***************
*** 145,150 ****
--- 145,151 ----
      }
  
  /*
+ continue;
  Name: displayPostOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using post order strategy


********************************************************************************
MUTANT #551:
RedBlackTreeUtility.mutant.65.c: ./RedBlackTreeUtility.c:61
*** Original
--- Mutant
***************
*** 58,64 ****
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (copiedNode->rightChildPtr != NULL)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }
--- 58,64 ----
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
  
!          if (1==1)
              {
               copiedNode->rightChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #552:
RedBlackTreeUtility.mutant.826.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel / 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #553:
RedBlackTreeUtility.mutant.263.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          /*return getMax(leftHeight, rightHeight) + 1;*/
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #554:
RedBlackTreeUtility.mutant.950.c: ./RedBlackTreeUtility.c:869
*** Original
--- Mutant
***************
*** 866,872 ****
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel == workingLevel )
         {
          charOut = DASH;
        
--- 866,872 ----
      int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
!     if( displayLevel <= workingLevel )
         {
          charOut = DASH;
        


********************************************************************************
MUTANT #555:
RedBlackTreeUtility.mutant.972.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay <= 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #556:
RedBlackTreeUtility.mutant.947.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( (2-1), displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #557:
RedBlackTreeUtility.mutant.707.c: ./RedBlackTreeUtility.c:692
*** Original
--- Mutant
***************
*** 689,695 ****
       newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
!      oldTopPtr->parentPtr = newTopPtr;
  
       // point old top's left child to new top's right child
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;
--- 689,695 ----
       newTopPtr->parentPtr = oldParent;
  
       // point old top's parent to new top
!      /*oldTopPtr->parentPtr = newTopPtr;*/
  
       // point old top's left child to new top's right child
       oldTopPtr->leftChildPtr = newTopPtr->rightChildPtr;


********************************************************************************
MUTANT #558:
RedBlackTreeUtility.mutant.1124.c: ./RedBlackTreeUtility.c:974
*** Original
--- Mutant
***************
*** 971,977 ****
     {
      int max = one;
    
!     if( other > max )
         {
          max = other;
         }
--- 971,977 ----
     {
      int max = one;
    
!     if(1==1)
         {
          max = other;
         }


********************************************************************************
MUTANT #559:
RedBlackTreeUtility.mutant.343.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || (0==1))
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #560:
RedBlackTreeUtility.mutant.524.c: ./RedBlackTreeUtility.c:506
*** Original
--- Mutant
***************
*** 503,509 ****
                   // print debugging statements
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
!                  printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
--- 503,509 ----
                   // print debugging statements
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
!                  printf("");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent


********************************************************************************
MUTANT #561:
RedBlackTreeUtility.mutant.168.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr = NULL)
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #562:
RedBlackTreeUtility.mutant.1003.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) / 2;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #563:
RedBlackTreeUtility.mutant.976.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay > (0+1) )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #564:
RedBlackTreeUtility.mutant.1161.c: ./RedBlackTreeUtility.c:1000
*** Original
--- Mutant
***************
*** 997,1002 ****
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 1;
     }
  
--- 997,1002 ----
          return toPower( base, exponent - 1 ) * base;
         }
    
!     /*return 1;*/
     }
  


********************************************************************************
MUTANT #565:
RedBlackTreeUtility.mutant.394.c: ./RedBlackTreeUtility.c:410
*** Original
--- Mutant
***************
*** 407,412 ****
--- 407,413 ----
      }
  
  /*
+ break;
  Name: isEmpty
  Process: returns true if tree is empty, false otherwise
  Function input/parameters: tree root pointer (RedBlackNodeType *)


********************************************************************************
MUTANT #566:
RedBlackTreeUtility.mutant.777.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode != NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #567:
RedBlackTreeUtility.mutant.628.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (*treeRoot < wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #568:
RedBlackTreeUtility.mutant.209.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode != POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #569:
RedBlackTreeUtility.mutant.147.c: ./RedBlackTreeUtility.c:170
*** Original
--- Mutant
***************
*** 167,173 ****
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("\nPostorder:  ");
              }
           else
              {
--- 167,173 ----
           if (*rowStartFlag)
              {
               *rowStartFlag = false;
!              printf("");
              }
           else
              {


********************************************************************************
MUTANT #570:
RedBlackTreeUtility.mutant.959.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if( ctrlCode != NODE_COLOR )
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #571:
RedBlackTreeUtility.mutant.917.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower ( treeHeight + 2 , 2);
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #572:
RedBlackTreeUtility.mutant.129.c: ./RedBlackTreeUtility.c:162
*** Original
--- Mutant
***************
*** 159,165 ****
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 159,165 ----
  */
  void displayPostOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr == NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #573:
RedBlackTreeUtility.mutant.770.c: ./RedBlackTreeUtility.c:734
*** Original
--- Mutant
***************
*** 731,737 ****
      {
       Colors tempColor = one->color;
       one->color = other->color;
!      other->color = tempColor;
      }
  
  ////////////////////////////////////////////////////////////////////////////////
--- 731,737 ----
      {
       Colors tempColor = one->color;
       one->color = other->color;
!      /*other->color = tempColor;*/
      }
  
  ////////////////////////////////////////////////////////////////////////////////


********************************************************************************
MUTANT #574:
RedBlackTreeUtility.mutant.176.c: ./RedBlackTreeUtility.c:200
*** Original
--- Mutant
***************
*** 197,203 ****
          {
           if (*rowStartFlag)
              {
!              *rowStartFlag = false;
               printf("\nPreorder :  ");
              }
           else
--- 197,203 ----
          {
           if (*rowStartFlag)
              {
!              /**rowStartFlag = false;*/
               printf("\nPreorder :  ");
              }
           else


********************************************************************************
MUTANT #575:
RedBlackTreeUtility.mutant.191.c: ./RedBlackTreeUtility.c:216
*** Original
--- Mutant
***************
*** 213,218 ****
--- 213,219 ----
      }
  
  /*
+ break;
  Name: displayTree
  Process: controller function for calling appropriate tree traversal
  Function input/parameters: pointer to current tree root (RedBlackNodeType *),


********************************************************************************
MUTANT #576:
RedBlackTreeUtility.mutant.897.c: ./RedBlackTreeUtility.c:821
*** Original
--- Mutant
***************
*** 818,823 ****
--- 818,824 ----
     }
  
  /*
+ break;
  Name: displayDivider
  Process: displays divider of correct length for tree
           using either THICK_DIVIDER or THIN_DIVIDER 


********************************************************************************
MUTANT #577:
RedBlackTreeUtility.mutant.638.c: ./RedBlackTreeUtility.c:623
*** Original
--- Mutant
***************
*** 620,625 ****
--- 620,626 ----
      }
  
  /*
+ break;
  Name: rotateLeft
  Process: "rotates" nodes to the left by resetting pointers
           to related nodes


********************************************************************************
MUTANT #578:
RedBlackTreeUtility.mutant.1047.c: ./RedBlackTreeUtility.c:916
*** Original
--- Mutant
***************
*** 913,918 ****
--- 913,919 ----
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
              printf( "\n" );
+             continue;
             }
         }
    


********************************************************************************
MUTANT #579:
RedBlackTreeUtility.mutant.1100.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + (1-1) ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #580:
RedBlackTreeUtility.mutant.1149.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) / base;
         }
    
      return 1;


********************************************************************************
MUTANT #581:
RedBlackTreeUtility.mutant.229.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (0==1)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #582:
RedBlackTreeUtility.mutant.736.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && (1==1))
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #583:
RedBlackTreeUtility.mutant.43.c: ./RedBlackTreeUtility.c:53
*** Original
--- Mutant
***************
*** 50,56 ****
       if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
!          copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
           if (copiedNode->leftChildPtr != NULL)
--- 50,56 ----
       if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
!          /*copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);*/
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
           if (copiedNode->leftChildPtr != NULL)


********************************************************************************
MUTANT #584:
RedBlackTreeUtility.mutant.220.c: ./RedBlackTreeUtility.c:239
*** Original
--- Mutant
***************
*** 236,242 ****
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
--- 236,242 ----
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
!          printf("");
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {


********************************************************************************
MUTANT #585:
RedBlackTreeUtility.mutant.277.c: ./RedBlackTreeUtility.c:293
*** Original
--- Mutant
***************
*** 290,295 ****
--- 290,296 ----
      }
  
  /*
+ break;
  Name: insert
  Process: sets first node if tree is empty, otherwise calls helper
           to set nodes, then calls RBT resolver to rebalance tree


********************************************************************************
MUTANT #586:
RedBlackTreeUtility.mutant.156.c: ./RedBlackTreeUtility.c:177
*** Original
--- Mutant
***************
*** 174,180 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
          }
      }
  
--- 174,180 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          /*printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);*/
          }
      }
  


********************************************************************************
MUTANT #587:
RedBlackTreeUtility.mutant.1156.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         /*return toPower( base, exponent - 1 ) * base;*/
         }
    
      return 1;


********************************************************************************
MUTANT #588:
RedBlackTreeUtility.mutant.685.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr >= oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #589:
RedBlackTreeUtility.mutant.967.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if(1==1)
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #590:
RedBlackTreeUtility.mutant.625.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (*treeRoot <= wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #591:
RedBlackTreeUtility.mutant.891.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 0, outChar );
         }
     }
  


********************************************************************************
MUTANT #592:
RedBlackTreeUtility.mutant.1070.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( (2+1), nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #593:
RedBlackTreeUtility.mutant.926.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if (!( dividerChar == THIN_DIVIDER ))
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #594:
RedBlackTreeUtility.mutant.150.c: ./RedBlackTreeUtility.c:172
*** Original
--- Mutant
***************
*** 169,175 ****
               *rowStartFlag = false;
               printf("\nPostorder:  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 169,175 ----
               *rowStartFlag = false;
               printf("\nPostorder:  ");
              }
!          
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #595:
RedBlackTreeUtility.mutant.249.c: ./RedBlackTreeUtility.c:263
*** Original
--- Mutant
***************
*** 260,266 ****
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (localPtr != NULL)
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);
--- 260,266 ----
       int leftHeight, rightHeight;
  
       // check if local pointer is not null
!      if (!(localPtr != NULL))
          {
           // recursively count size of left and right trees
           leftHeight = findTreeHeight(localPtr->leftChildPtr);


********************************************************************************
MUTANT #596:
RedBlackTreeUtility.mutant.295.c: ./RedBlackTreeUtility.c:320
*** Original
--- Mutant
***************
*** 317,323 ****
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
!      else
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper
--- 317,323 ----
           treeRoot = insertedNodePtr;
          }
       // otherwise, assume root exists
!      
          {
           // call insert helper to attempt to insert, save result
           // funtion: insertHelper


********************************************************************************
MUTANT #597:
RedBlackTreeUtility.mutant.589.c: ./RedBlackTreeUtility.c:557
*** Original
--- Mutant
***************
*** 554,560 ****
                   // print debugging statements
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
!                  printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
--- 554,560 ----
                   // print debugging statements
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
!                  /*printf("grandparent\n");*/
                   printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent


********************************************************************************
MUTANT #598:
RedBlackTreeUtility.mutant.994.c: ./RedBlackTreeUtility.c:883
*** Original
--- Mutant
***************
*** 880,886 ****
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
!         nodesToDisplay--;
         }
     }
  
--- 880,886 ----
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
!         /*nodesToDisplay--;*/
         }
     }
  


********************************************************************************
MUTANT #599:
RedBlackTreeUtility.mutant.574.c: ./RedBlackTreeUtility.c:549
*** Original
--- Mutant
***************
*** 546,552 ****
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("   - Uncle is black\n");
  
               // check for right-right case
               if (parentPtr->rightChildPtr == wkgPtr)
--- 546,552 ----
                    && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
!              printf("");
  
               // check for right-right case
               if (parentPtr->rightChildPtr == wkgPtr)


********************************************************************************
MUTANT #600:
RedBlackTreeUtility.mutant.358.c: ./RedBlackTreeUtility.c:370
*** Original
--- Mutant
***************
*** 367,373 ****
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (diff < 0)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)
--- 367,373 ----
           return NULL;
          }
       // otherwise, check if incoming data is less than working node
!      else if (1==1)
          {
           // check if left child is not null
           if (wkgPtr->leftChildPtr != NULL)


********************************************************************************
MUTANT #601:
RedBlackTreeUtility.mutant.170.c: ./RedBlackTreeUtility.c:196
*** Original
--- Mutant
***************
*** 193,199 ****
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (wkgPtr != NULL)
          {
           if (*rowStartFlag)
              {
--- 193,199 ----
  */
  void displayPreOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {
!      if (!(wkgPtr != NULL))
          {
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #602:
RedBlackTreeUtility.mutant.462.c: ./RedBlackTreeUtility.c:471
*** Original
--- Mutant
***************
*** 468,474 ****
       if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
!          printf("   - Parent is red\n");
  
           // check if uncle is not null and red
           if (unclePtr != NULL && unclePtr->color == RED)
--- 468,474 ----
       if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
!          /*printf("   - Parent is red\n");*/
  
           // check if uncle is not null and red
           if (unclePtr != NULL && unclePtr->color == RED)


********************************************************************************
MUTANT #603:
RedBlackTreeUtility.mutant.87.c: ./RedBlackTreeUtility.c:109
*** Original
--- Mutant
***************
*** 106,112 ****
  */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
!      return createNodeFromData(srcPtr->data, srcPtr->color);
      }
  
  /*
--- 106,112 ----
  */
  RedBlackNodeType *createNodeFromNode( RedBlackNodeType *srcPtr )
      {
!      return createNodeFromData ( srcPtr->color,srcPtr->data);
      }
  
  /*


********************************************************************************
MUTANT #604:
RedBlackTreeUtility.mutant.519.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (1==1)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #605:
RedBlackTreeUtility.mutant.1158.c: ./RedBlackTreeUtility.c:1000
*** Original
--- Mutant
***************
*** 997,1002 ****
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 1;
     }
  
--- 997,1002 ----
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return -1;
     }
  


********************************************************************************
MUTANT #606:
RedBlackTreeUtility.mutant.655.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (0==1)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #607:
RedBlackTreeUtility.mutant.607.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr < grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #608:
RedBlackTreeUtility.mutant.1012.c: ./RedBlackTreeUtility.c:903
*** Original
--- Mutant
***************
*** 900,906 ****
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = 1;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )
--- 900,906 ----
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = (1+1);
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )


********************************************************************************
MUTANT #609:
RedBlackTreeUtility.mutant.1146.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent % 1 ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #610:
RedBlackTreeUtility.mutant.965.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if (!( ctrlCode == NODE_COLOR ))
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #611:
RedBlackTreeUtility.mutant.557.c: ./RedBlackTreeUtility.c:538
*** Original
--- Mutant
***************
*** 535,541 ****
               else
                  {
                   // rotate left, old top = parent, new top = working node
!                  rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);
--- 535,541 ----
               else
                  {
                   // rotate left, old top = parent, new top = working node
!                  /*rotateLeft(wkgPtr, parentPtr);*/
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);


********************************************************************************
MUTANT #612:
RedBlackTreeUtility.mutant.626.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (*treeRoot >= wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #613:
RedBlackTreeUtility.mutant.844.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel * 1, rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #614:
RedBlackTreeUtility.mutant.1099.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( (2-1), nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #615:
RedBlackTreeUtility.mutant.824.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel - 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #616:
RedBlackTreeUtility.mutant.38.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      /*if (srcPtr != NULL)*/
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #617:
RedBlackTreeUtility.mutant.143.c: ./RedBlackTreeUtility.c:167
*** Original
--- Mutant
***************
*** 164,170 ****
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (*rowStartFlag)
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");
--- 164,170 ----
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
!          if (!(*rowStartFlag))
              {
               *rowStartFlag = false;
               printf("\nPostorder:  ");


********************************************************************************
MUTANT #618:
RedBlackTreeUtility.mutant.1101.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - (1-1);
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #619:
RedBlackTreeUtility.mutant.433.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr > parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #620:
RedBlackTreeUtility.mutant.214.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (!(traverseCode == POSTORDER_TRAVERSE))
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #621:
RedBlackTreeUtility.mutant.271.c: ./RedBlackTreeUtility.c:278
*** Original
--- Mutant
***************
*** 275,280 ****
--- 275,281 ----
      }
  
  /*
+ continue;
  Name: initializeRBT
  Process: returns NULL to tree root pointer to prepare tree for use
  Function input/parameters: none


********************************************************************************
MUTANT #622:
RedBlackTreeUtility.mutant.960.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         if( ctrlCode <= NODE_COLOR )
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #623:
RedBlackTreeUtility.mutant.224.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode >= PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #624:
RedBlackTreeUtility.mutant.636.c: ./RedBlackTreeUtility.c:609
*** Original
--- Mutant
***************
*** 606,611 ****
--- 606,612 ----
  
       // display structure for debugging if not the first value inserted
       /*
+      break;
       if (wkgPtr->leftChildPtr != NULL || wkgPtr->rightChildPtr != NULL 
           || wkgPtr->parentPtr != NULL)
          {


********************************************************************************
MUTANT #625:
RedBlackTreeUtility.mutant.1088.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) % 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #626:
RedBlackTreeUtility.mutant.806.c: ./RedBlackTreeUtility.c:773
*** Original
--- Mutant
***************
*** 770,776 ****
    
      else
         {
!         if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
--- 770,776 ----
    
      else
         {
!         if( workingNode->leftChildPtr = NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #627:
RedBlackTreeUtility.mutant.964.c: ./RedBlackTreeUtility.c:873
*** Original
--- Mutant
***************
*** 870,876 ****
         {
          charOut = DASH;
        
!         if( ctrlCode == NODE_COLOR )
             {
              charOut = 'B';
             }
--- 870,876 ----
         {
          charOut = DASH;
        
!         /*if( ctrlCode == NODE_COLOR )*/
             {
              charOut = 'B';
             }


********************************************************************************
MUTANT #628:
RedBlackTreeUtility.mutant.849.c: ./RedBlackTreeUtility.c:788
*** Original
--- Mutant
***************
*** 785,791 ****
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
          else
--- 785,791 ----
          if( workingNode->rightChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->rightChildPtr, nodeHeight,
!                        displayLevel, workingLevel + (1+1), rowStartFlag, ctrlCode );
             }
  
          else


********************************************************************************
MUTANT #629:
RedBlackTreeUtility.mutant.1153.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - (1+1) ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #630:
RedBlackTreeUtility.mutant.855.c: ./RedBlackTreeUtility.c:793
*** Original
--- Mutant
***************
*** 790,796 ****
  
          else
             {
!             displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
--- 790,796 ----
  
          else
             {
!             displayEmptyNodeSpaces ( displayLevel, nodeHeight, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }


********************************************************************************
MUTANT #631:
RedBlackTreeUtility.mutant.587.c: ./RedBlackTreeUtility.c:556
*** Original
--- Mutant
***************
*** 553,559 ****
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
!                  printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  
--- 553,559 ----
                  {
                   // print debugging statements
                   printf("   - Right Right Case\n");
!                  /*printf("      - Rotate Left from right side of ");*/
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
  


********************************************************************************
MUTANT #632:
RedBlackTreeUtility.mutant.624.c: ./RedBlackTreeUtility.c:598
*** Original
--- Mutant
***************
*** 595,601 ****
          }
  
       // finally, check if this is root node
!      if (*treeRoot == wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");
--- 595,601 ----
          }
  
       // finally, check if this is root node
!      if (*treeRoot != wkgPtr)
          {
           // print debugging statement
           printf("   - Root color set to black\n");


********************************************************************************
MUTANT #633:
RedBlackTreeUtility.mutant.204.c: ./RedBlackTreeUtility.c:231
*** Original
--- Mutant
***************
*** 228,234 ****
      {
       bool rowStartFlag = true;
       
!      if (traverseCode == INORDER_TRAVERSE)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 228,234 ----
      {
       bool rowStartFlag = true;
       
!      if (1==1)
          {
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #634:
RedBlackTreeUtility.mutant.816.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + -1, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #635:
RedBlackTreeUtility.mutant.792.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if (!( workingLevel == displayLevel ))
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #636:
RedBlackTreeUtility.mutant.19.c: ./RedBlackTreeUtility.c:24
*** Original
--- Mutant
***************
*** 21,27 ****
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (localPtr != NULL)
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
--- 21,27 ----
  */
  RedBlackNodeType *clearTree( RedBlackNodeType *localPtr )
      {
!      if (!(localPtr != NULL))
          {
           clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);


********************************************************************************
MUTANT #637:
RedBlackTreeUtility.mutant.1048.c: ./RedBlackTreeUtility.c:915
*** Original
--- Mutant
***************
*** 912,918 ****
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
!             printf( "\n" );
             }
         }
    
--- 912,918 ----
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 
                            displayLevel, workingLevel, &rowStartFlag, ctrlCode );
            
!             printf( "" );
             }
         }
    


********************************************************************************
MUTANT #638:
RedBlackTreeUtility.mutant.186.c: ./RedBlackTreeUtility.c:208
*** Original
--- Mutant
***************
*** 205,211 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
--- 205,211 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          /*printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);*/
  
           displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);


********************************************************************************
MUTANT #639:
RedBlackTreeUtility.mutant.823.c: ./RedBlackTreeUtility.c:781
*** Original
--- Mutant
***************
*** 778,784 ****
    
          else
             {
!             displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
--- 778,784 ----
    
          else
             {
!             displayEmptyNodeSpaces ( displayLevel, nodeHeight, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
             }
        


********************************************************************************
MUTANT #640:
RedBlackTreeUtility.mutant.1037.c: ./RedBlackTreeUtility.c:910
*** Original
--- Mutant
***************
*** 907,912 ****
--- 907,913 ----
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
+            continue;
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 


********************************************************************************
MUTANT #641:
RedBlackTreeUtility.mutant.54.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (1==1)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #642:
RedBlackTreeUtility.mutant.1104.c: ./RedBlackTreeUtility.c:955
*** Original
--- Mutant
***************
*** 952,958 ****
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
!     displayChars( leadingSpaces, SPACE );
    
      printf( "%c", data );         
     }
--- 952,958 ----
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
!     displayChars ( SPACE , leadingSpaces);
    
      printf( "%c", data );         
     }


********************************************************************************
MUTANT #643:
RedBlackTreeUtility.mutant.1013.c: ./RedBlackTreeUtility.c:903
*** Original
--- Mutant
***************
*** 900,906 ****
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = 1;
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )
--- 900,906 ----
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
      int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
!     int workingLevel = (1-1);
      bool rowStartFlag;
  
      if( rbTreeRoot != NULL )


********************************************************************************
MUTANT #644:
RedBlackTreeUtility.mutant.1091.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 0;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #645:
RedBlackTreeUtility.mutant.1033.c: ./RedBlackTreeUtility.c:909
*** Original
--- Mutant
***************
*** 906,911 ****
--- 906,912 ----
      if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
+         break;
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #646:
RedBlackTreeUtility.mutant.684.c: ./RedBlackTreeUtility.c:662
*** Original
--- Mutant
***************
*** 659,665 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 659,665 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr <= oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #647:
RedBlackTreeUtility.mutant.468.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color != RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #648:
RedBlackTreeUtility.mutant.142.c: ./RedBlackTreeUtility.c:165
*** Original
--- Mutant
***************
*** 162,168 ****
       if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
              {
--- 162,168 ----
       if (wkgPtr != NULL)
          {
           displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
!          /*displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);*/
  
           if (*rowStartFlag)
              {


********************************************************************************
MUTANT #649:
RedBlackTreeUtility.mutant.526.c: ./RedBlackTreeUtility.c:507
*** Original
--- Mutant
***************
*** 504,510 ****
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
!                  printf("      - Swap grandparent/parent colors\n");
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
--- 504,510 ----
                   printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
!                  printf("");
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);


********************************************************************************
MUTANT #650:
RedBlackTreeUtility.mutant.406.c: ./RedBlackTreeUtility.c:425
*** Original
--- Mutant
***************
*** 422,427 ****
--- 422,428 ----
      }
  
  /*
+ break;
  Name: resolveRBT
  Process: recursively checks tree for need to rebalance, 
           conducts rebalance as needed


********************************************************************************
MUTANT #651:
RedBlackTreeUtility.mutant.970.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     while( nodesToDisplay == 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #652:
RedBlackTreeUtility.mutant.180.c: ./RedBlackTreeUtility.c:203
*** Original
--- Mutant
***************
*** 200,206 ****
               *rowStartFlag = false;
               printf("\nPreorder :  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 200,206 ----
               *rowStartFlag = false;
               printf("\nPreorder :  ");
              }
!          
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #653:
RedBlackTreeUtility.mutant.341.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (0==1)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #654:
RedBlackTreeUtility.mutant.113.c: ./RedBlackTreeUtility.c:136
*** Original
--- Mutant
***************
*** 133,139 ****
               *rowStartFlag = false;
               printf("\nInorder  :  ");
              }
!          else
              {
               printf("%s ", SEMICOLON_BREAK);
              }
--- 133,139 ----
               *rowStartFlag = false;
               printf("\nInorder  :  ");
              }
!          /*else*/
              {
               printf("%s ", SEMICOLON_BREAK);
              }


********************************************************************************
MUTANT #655:
RedBlackTreeUtility.mutant.934.c: ./RedBlackTreeUtility.c:850
*** Original
--- Mutant
***************
*** 847,852 ****
--- 847,853 ----
     }
  
  /*
+ continue;
  Name: displayEmptyNodeSpaces
  Process: displays the appropriate number of dashes for a given level
           for null nodes, can display either dashes or 'B's


********************************************************************************
MUTANT #656:
RedBlackTreeUtility.mutant.386.c: ./RedBlackTreeUtility.c:392
*** Original
--- Mutant
***************
*** 389,395 ****
       else
          {
           // check if right child is not null
!          if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);
--- 389,395 ----
       else
          {
           // check if right child is not null
!          if (0==1)
              {
               // recurse to the right and return result
               return insertHelper(wkgPtr->rightChildPtr, inData);


********************************************************************************
MUTANT #657:
RedBlackTreeUtility.mutant.996.c: ./RedBlackTreeUtility.c:888
*** Original
--- Mutant
***************
*** 885,890 ****
--- 885,891 ----
     }
  
  /*
+ continue;
  Name: displayTreeStructure
  Process: repeatedly calls other function to display 
           the structure of an RB tree, can display either dashes or 'B's,


********************************************************************************
MUTANT #658:
RedBlackTreeUtility.mutant.22.c: ./RedBlackTreeUtility.c:26
*** Original
--- Mutant
***************
*** 23,29 ****
      {
       if (localPtr != NULL)
          {
!          clearTree(localPtr->leftChildPtr);
           clearTree(localPtr->rightChildPtr);
           free(localPtr);
          }
--- 23,29 ----
      {
       if (localPtr != NULL)
          {
!          /*clearTree(localPtr->leftChildPtr);*/
           clearTree(localPtr->rightChildPtr);
           free(localPtr);
          }


********************************************************************************
MUTANT #659:
RedBlackTreeUtility.mutant.791.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel < displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #660:
RedBlackTreeUtility.mutant.389.c: ./RedBlackTreeUtility.c:395
*** Original
--- Mutant
***************
*** 392,398 ****
           if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
!              return insertHelper(wkgPtr->rightChildPtr, inData);
              }
           
           // otherwise, assume null and create new node, link to right child
--- 392,398 ----
           if (wkgPtr->rightChildPtr != NULL)
              {
               // recurse to the right and return result
!              /*return insertHelper(wkgPtr->rightChildPtr, inData);*/
              }
           
           // otherwise, assume null and create new node, link to right child


********************************************************************************
MUTANT #661:
RedBlackTreeUtility.mutant.1054.c: ./RedBlackTreeUtility.c:926
*** Original
--- Mutant
***************
*** 923,928 ****
--- 923,929 ----
     }
  
  /*
+ break;
  Name: displayValue
  Process: displays a tree character value or color letter (R/B)
           after a calculated set of leading spaces


********************************************************************************
MUTANT #662:
RedBlackTreeUtility.mutant.1103.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         /*leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;*/
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #663:
RedBlackTreeUtility.mutant.1127.c: ./RedBlackTreeUtility.c:983
*** Original
--- Mutant
***************
*** 980,985 ****
--- 980,986 ----
     }
  
  /*
+ break;
  Name: toPower
  Process: recursively calculates a base to exponent value 
           for positive integer exponents


********************************************************************************
MUTANT #664:
RedBlackTreeUtility.mutant.392.c: ./RedBlackTreeUtility.c:402
*** Original
--- Mutant
***************
*** 399,405 ****
           wkgPtr->rightChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
!          wkgPtr->rightChildPtr->parentPtr = wkgPtr;
  
           // return new node (new right child)
           return wkgPtr->rightChildPtr;
--- 399,405 ----
           wkgPtr->rightChildPtr = createNodeFromData(inData, RED);
  
           // link new child back up to working node
!          /*wkgPtr->rightChildPtr->parentPtr = wkgPtr;*/
  
           // return new node (new right child)
           return wkgPtr->rightChildPtr;


********************************************************************************
MUTANT #665:
RedBlackTreeUtility.mutant.903.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight - 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #666:
RedBlackTreeUtility.mutant.1064.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight * workingLevel );
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #667:
RedBlackTreeUtility.mutant.668.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr < oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #668:
RedBlackTreeUtility.mutant.395.c: ./RedBlackTreeUtility.c:410
*** Original
--- Mutant
***************
*** 407,412 ****
--- 407,413 ----
      }
  
  /*
+ continue;
  Name: isEmpty
  Process: returns true if tree is empty, false otherwise
  Function input/parameters: tree root pointer (RedBlackNodeType *)


********************************************************************************
MUTANT #669:
RedBlackTreeUtility.mutant.778.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode <= NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #670:
RedBlackTreeUtility.mutant.188.c: ./RedBlackTreeUtility.c:210
*** Original
--- Mutant
***************
*** 207,213 ****
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
--- 207,213 ----
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          /*displayPreOrder(wkgPtr->leftChildPtr, rowStartFlag);*/
           displayPreOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }


********************************************************************************
MUTANT #671:
RedBlackTreeUtility.mutant.478.c: ./RedBlackTreeUtility.c:474
*** Original
--- Mutant
***************
*** 471,477 ****
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && unclePtr->color == RED)
              {
               // print debugging statements
               printf("   - Uncle is red\n");
--- 471,477 ----
           printf("   - Parent is red\n");
  
           // check if uncle is not null and red
!          if (unclePtr != NULL && (1==1))
              {
               // print debugging statements
               printf("   - Uncle is red\n");


********************************************************************************
MUTANT #672:
RedBlackTreeUtility.mutant.51.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          /*if (copiedNode->leftChildPtr != NULL)*/
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #673:
RedBlackTreeUtility.mutant.857.c: ./RedBlackTreeUtility.c:794
*** Original
--- Mutant
***************
*** 791,797 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }              
         }
     }
--- 791,797 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel * 1, rowStartFlag, ctrlCode );
             }              
         }
     }


********************************************************************************
MUTANT #674:
RedBlackTreeUtility.mutant.886.c: ./RedBlackTreeUtility.c:814
*** Original
--- Mutant
***************
*** 811,817 ****
     {
      if( numChars > 0 )
         {
!         printf( "%c", outChar );
        
          displayChars( numChars - 1, outChar );
         }
--- 811,817 ----
     {
      if( numChars > 0 )
         {
!         /*printf( "%c", outChar );*/
        
          displayChars( numChars - 1, outChar );
         }


********************************************************************************
MUTANT #675:
RedBlackTreeUtility.mutant.431.c: ./RedBlackTreeUtility.c:456
*** Original
--- Mutant
***************
*** 453,459 ****
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr == parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }
--- 453,459 ----
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
!              if (grParentPtr->leftChildPtr <= parentPtr)
                  {
                   unclePtr = grParentPtr->rightChildPtr;
                  }


********************************************************************************
MUTANT #676:
RedBlackTreeUtility.mutant.747.c: ./RedBlackTreeUtility.c:711
*** Original
--- Mutant
***************
*** 708,714 ****
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr == oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }
--- 708,714 ----
          {
           oldParent->leftChildPtr = newTopPtr;
          }
!      else if (oldParent != NULL && oldParent->rightChildPtr >= oldTopPtr)
          {
           oldParent->rightChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #677:
RedBlackTreeUtility.mutant.4.c: ./RedBlackTreeUtility.c:7
*** Original
--- Mutant
***************
*** 4,10 ****
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '-';
  
  // functions
  
--- 4,10 ----
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '/';
  
  // functions
  


********************************************************************************
MUTANT #678:
RedBlackTreeUtility.mutant.781.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode < NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #679:
RedBlackTreeUtility.mutant.1074.c: ./RedBlackTreeUtility.c:947
*** Original
--- Mutant
***************
*** 944,950 ****
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
!         *rowStartFlag = false;
         }
    
      else
--- 944,950 ----
         {
          leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
!         /**rowStartFlag = false;*/
         }
    
      else


********************************************************************************
MUTANT #680:
RedBlackTreeUtility.mutant.570.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr > parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #681:
RedBlackTreeUtility.mutant.513.c: ./RedBlackTreeUtility.c:501
*** Original
--- Mutant
***************
*** 498,504 ****
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");
--- 498,504 ----
               printf("   - Uncle is black\n");
  
               // check for left-left case
!              if (parentPtr->leftChildPtr <= wkgPtr)
                  {
                   // print debugging statements
                   printf("   - Left Left Case\n");


********************************************************************************
MUTANT #682:
RedBlackTreeUtility.mutant.1115.c: ./RedBlackTreeUtility.c:970
*** Original
--- Mutant
***************
*** 967,973 ****
  Device output/monitor: none
  Dependencies: none
  */
! int getMax( int one, int other )
     {
      int max = one;
    
--- 967,973 ----
  Device output/monitor: none
  Dependencies: none
  */
! int getMax ( int other , int one)
     {
      int max = one;
    


********************************************************************************
MUTANT #683:
RedBlackTreeUtility.mutant.605.c: ./RedBlackTreeUtility.c:570
*** Original
--- Mutant
***************
*** 567,573 ****
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;
--- 567,573 ----
                       *treeRoot = newTopPtr;
                      }
                   // otherwise, check if grandparent is left child
!                  else if (greatGrParentPtr->leftChildPtr >= grParentPtr)
                      {
                       // link great grandparent to new top
                       greatGrParentPtr->leftChildPtr = newTopPtr;


********************************************************************************
MUTANT #684:
RedBlackTreeUtility.mutant.794.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if(1==1)
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #685:
RedBlackTreeUtility.mutant.1125.c: ./RedBlackTreeUtility.c:976
*** Original
--- Mutant
***************
*** 973,979 ****
    
      if( other > max )
         {
!         max = other;
         }
    
      return max;
--- 973,979 ----
    
      if( other > max )
         {
!         /*max = other;*/
         }
    
      return max;


********************************************************************************
MUTANT #686:
RedBlackTreeUtility.mutant.1006.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 1;
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #687:
RedBlackTreeUtility.mutant.798.c: ./RedBlackTreeUtility.c:768
*** Original
--- Mutant
***************
*** 765,771 ****
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
      else
--- 765,771 ----
     
      if( workingLevel == displayLevel )
         {
!         /*displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );*/
         }
    
      else


********************************************************************************
MUTANT #688:
RedBlackTreeUtility.mutant.1159.c: ./RedBlackTreeUtility.c:1000
*** Original
--- Mutant
***************
*** 997,1002 ****
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return 1;
     }
  
--- 997,1002 ----
          return toPower( base, exponent - 1 ) * base;
         }
    
!     return (1+1);
     }
  


********************************************************************************
MUTANT #689:
RedBlackTreeUtility.mutant.397.c: ./RedBlackTreeUtility.c:418
*** Original
--- Mutant
***************
*** 415,421 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;
--- 415,421 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! -/
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;


********************************************************************************
MUTANT #690:
RedBlackTreeUtility.mutant.413.c: ./RedBlackTreeUtility.c:448
*** Original
--- Mutant
***************
*** 445,451 ****
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr != NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  
--- 445,451 ----
       RedBlackNodeType* unclePtr = NULL;
       RedBlackNodeType* newTopPtr;
  
!      if (parentPtr = NULL)
          {
           grParentPtr = parentPtr->parentPtr;
  


********************************************************************************
MUTANT #691:
RedBlackTreeUtility.mutant.115.c: ./RedBlackTreeUtility.c:138
*** Original
--- Mutant
***************
*** 135,141 ****
              }
           else
              {
!              printf("%s ", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
--- 135,141 ----
              }
           else
              {
!              printf("", SEMICOLON_BREAK);
              }
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);


********************************************************************************
MUTANT #692:
RedBlackTreeUtility.mutant.1108.c: ./RedBlackTreeUtility.c:957
*** Original
--- Mutant
***************
*** 954,960 ****
  
      displayChars( leadingSpaces, SPACE );
    
!     printf( "%c", data );         
     }
  
  /*
--- 954,960 ----
  
      displayChars( leadingSpaces, SPACE );
    
!     /*printf( "%c", data );         */
     }
  
  /*


********************************************************************************
MUTANT #693:
RedBlackTreeUtility.mutant.1109.c: ./RedBlackTreeUtility.c:961
*** Original
--- Mutant
***************
*** 958,963 ****
--- 958,964 ----
     }
  
  /*
+ break;
  Name: getMax
  Process: finds the maximum between two values, returns
  Function input/parameters: two values (int)


********************************************************************************
MUTANT #694:
RedBlackTreeUtility.mutant.639.c: ./RedBlackTreeUtility.c:623
*** Original
--- Mutant
***************
*** 620,625 ****
--- 620,626 ----
      }
  
  /*
+ continue;
  Name: rotateLeft
  Process: "rotates" nodes to the left by resetting pointers
           to related nodes


********************************************************************************
MUTANT #695:
RedBlackTreeUtility.mutant.943.c: ./RedBlackTreeUtility.c:866
*** Original
--- Mutant
***************
*** 863,869 ****
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 2, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )
--- 863,869 ----
                          int displayLevel, int workingLevel, 
                                       bool *rowStartFlag, ControlCodes ctrlCode )
     {
!     int nodesToDisplay = toPower( 0, displayLevel - workingLevel ); 
      char charOut = SPACE;
    
      if( displayLevel == workingLevel )


********************************************************************************
MUTANT #696:
RedBlackTreeUtility.mutant.556.c: ./RedBlackTreeUtility.c:538
*** Original
--- Mutant
***************
*** 535,541 ****
               else
                  {
                   // rotate left, old top = parent, new top = working node
!                  rotateLeft(wkgPtr, parentPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);
--- 535,541 ----
               else
                  {
                   // rotate left, old top = parent, new top = working node
!                  rotateLeft ( parentPtr,wkgPtr);
  
                   // resolve parent
                   resolveRBT(treeRoot, parentPtr);


********************************************************************************
MUTANT #697:
RedBlackTreeUtility.mutant.42.c: ./RedBlackTreeUtility.c:52
*** Original
--- Mutant
***************
*** 49,55 ****
  
       if (srcPtr != NULL)
          {
!          copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
--- 49,55 ----
  
       if (srcPtr != NULL)
          {
!          /*copiedNode = createNodeFromNode(srcPtr);*/
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  


********************************************************************************
MUTANT #698:
RedBlackTreeUtility.mutant.377.c: ./RedBlackTreeUtility.c:389
*** Original
--- Mutant
***************
*** 386,392 ****
           return wkgPtr->leftChildPtr;
          }
       // otherwise, assume data is greater than working node
!      else
          {
           // check if right child is not null
           if (wkgPtr->rightChildPtr != NULL)
--- 386,392 ----
           return wkgPtr->leftChildPtr;
          }
       // otherwise, assume data is greater than working node
!      
          {
           // check if right child is not null
           if (wkgPtr->rightChildPtr != NULL)


********************************************************************************
MUTANT #699:
RedBlackTreeUtility.mutant.231.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!       if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #700:
RedBlackTreeUtility.mutant.140.c: ./RedBlackTreeUtility.c:164
*** Original
--- Mutant
***************
*** 161,167 ****
      {
       if (wkgPtr != NULL)
          {
!          displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)
--- 161,167 ----
      {
       if (wkgPtr != NULL)
          {
!          /*displayPostOrder(wkgPtr->leftChildPtr, rowStartFlag);*/
           displayPostOrder(wkgPtr->rightChildPtr, rowStartFlag);
  
           if (*rowStartFlag)


********************************************************************************
MUTANT #701:
RedBlackTreeUtility.mutant.520.c: ./RedBlackTreeUtility.c:504
*** Original
--- Mutant
***************
*** 501,507 ****
               if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
--- 501,507 ----
               if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");


********************************************************************************
MUTANT #702:
RedBlackTreeUtility.mutant.484.c: ./RedBlackTreeUtility.c:478
*** Original
--- Mutant
***************
*** 475,481 ****
              {
               // print debugging statements
               printf("   - Uncle is red\n");
!              printf("      - Grandparent set to red\n");
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");
--- 475,481 ----
              {
               // print debugging statements
               printf("   - Uncle is red\n");
!              /*printf("      - Grandparent set to red\n");*/
               printf("      - Uncle set to black\n");
               printf("      - Parent set to black\n");
               printf("      - Resolving Grandparent\n");


********************************************************************************
MUTANT #703:
RedBlackTreeUtility.mutant.854.c: ./RedBlackTreeUtility.c:791
*** Original
--- Mutant
***************
*** 788,794 ****
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
!         else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );
--- 788,794 ----
                         displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
  
!         
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
                                       workingLevel + 1, rowStartFlag, ctrlCode );


********************************************************************************
MUTANT #704:
RedBlackTreeUtility.mutant.811.c: ./RedBlackTreeUtility.c:776
*** Original
--- Mutant
***************
*** 773,779 ****
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel + 1, rowStartFlag, ctrlCode );
             }
    
          else
--- 773,779 ----
          if( workingNode->leftChildPtr != NULL )
             {
              displayAtTreeLevel( workingNode->leftChildPtr, nodeHeight,
!                        displayLevel, workingLevel - 1, rowStartFlag, ctrlCode );
             }
    
          else


********************************************************************************
MUTANT #705:
RedBlackTreeUtility.mutant.672.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (0==1)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #706:
RedBlackTreeUtility.mutant.228.c: ./RedBlackTreeUtility.c:241
*** Original
--- Mutant
***************
*** 238,244 ****
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == PREORDER_TRAVERSE)
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 238,244 ----
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (!(traverseCode == PREORDER_TRAVERSE))
          {
           displayPreOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #707:
RedBlackTreeUtility.mutant.872.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars == 0 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #708:
RedBlackTreeUtility.mutant.922.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar >= THIN_DIVIDER )
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #709:
RedBlackTreeUtility.mutant.398.c: ./RedBlackTreeUtility.c:418
*** Original
--- Mutant
***************
*** 415,421 ****
  Device input/---: none
  Device output/---: none
  Dependencies: none
! */
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;
--- 415,421 ----
  Device input/---: none
  Device output/---: none
  Dependencies: none
! //
  bool isEmpty( RedBlackNodeType *localPtr )
      {
       return localPtr == NULL;


********************************************************************************
MUTANT #710:
RedBlackTreeUtility.mutant.591.c: ./RedBlackTreeUtility.c:558
*** Original
--- Mutant
***************
*** 555,561 ****
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
!                  printf("      - Swap grandparent/parent colors\n");
  
                   // rotate left, old top = grandparent, new top = parent
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);
--- 555,561 ----
                   printf("   - Right Right Case\n");
                   printf("      - Rotate Left from right side of ");
                   printf("grandparent\n");
!                  /*printf("      - Swap grandparent/parent colors\n");*/
  
                   // rotate left, old top = grandparent, new top = parent
                   newTopPtr = rotateLeft(parentPtr, grParentPtr);


********************************************************************************
MUTANT #711:
RedBlackTreeUtility.mutant.53.c: ./RedBlackTreeUtility.c:56
*** Original
--- Mutant
***************
*** 53,59 ****
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (copiedNode->leftChildPtr != NULL)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }
--- 53,59 ----
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
           copiedNode->rightChildPtr = copyTree(srcPtr->rightChildPtr);
  
!          if (0==1)
              {
               copiedNode->leftChildPtr->parentPtr = copiedNode;
              }


********************************************************************************
MUTANT #712:
RedBlackTreeUtility.mutant.110.c: ./RedBlackTreeUtility.c:133
*** Original
--- Mutant
***************
*** 130,136 ****
  
           if (*rowStartFlag)
              {
!              *rowStartFlag = false;
               printf("\nInorder  :  ");
              }
           else
--- 130,136 ----
  
           if (*rowStartFlag)
              {
!              /**rowStartFlag = false;*/
               printf("\nInorder  :  ");
              }
           else


********************************************************************************
MUTANT #713:
RedBlackTreeUtility.mutant.321.c: ./RedBlackTreeUtility.c:361
*** Original
--- Mutant
***************
*** 358,364 ****
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)
--- 358,364 ----
  RedBlackNodeType *insertHelper( RedBlackNodeType *wkgPtr, char inData )
      {
       // initialize variables
!      int diff = (int)inData + (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
       if (wkgPtr == NULL || diff == 0)


********************************************************************************
MUTANT #714:
RedBlackTreeUtility.mutant.1098.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - (1+1);
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #715:
RedBlackTreeUtility.mutant.665.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr <= oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #716:
RedBlackTreeUtility.mutant.458.c: ./RedBlackTreeUtility.c:468
*** Original
--- Mutant
***************
*** 465,471 ****
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && parentPtr->color == RED)
          {
           // print debugging statement
           printf("   - Parent is red\n");
--- 465,471 ----
          }
  
       // check if parent is not null and red
!      if (parentPtr != NULL && (1==1))
          {
           // print debugging statement
           printf("   - Parent is red\n");


********************************************************************************
MUTANT #717:
RedBlackTreeUtility.mutant.31.c: ./RedBlackTreeUtility.c:45
*** Original
--- Mutant
***************
*** 42,48 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! */
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;
--- 42,48 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! %/
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;


********************************************************************************
MUTANT #718:
RedBlackTreeUtility.mutant.1034.c: ./RedBlackTreeUtility.c:909
*** Original
--- Mutant
***************
*** 906,911 ****
--- 906,912 ----
      if( rbTreeRoot != NULL )
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
+         continue;
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #719:
RedBlackTreeUtility.mutant.424.c: ./RedBlackTreeUtility.c:452
*** Original
--- Mutant
***************
*** 449,455 ****
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr != NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  
--- 449,455 ----
          {
           grParentPtr = parentPtr->parentPtr;
  
!          if (grParentPtr = NULL)
              {
               greatGrParentPtr = grParentPtr->parentPtr;
  


********************************************************************************
MUTANT #720:
RedBlackTreeUtility.mutant.780.c: ./RedBlackTreeUtility.c:761
*** Original
--- Mutant
***************
*** 758,764 ****
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode == NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }
--- 758,764 ----
     {
      char charOut = workingNode->data;
    
!     if( ctrlCode > NODE_COLOR )
         {
          charOut = (char)workingNode->color;      
         }


********************************************************************************
MUTANT #721:
RedBlackTreeUtility.mutant.899.c: ./RedBlackTreeUtility.c:833
*** Original
--- Mutant
***************
*** 830,836 ****
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! */
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
--- 830,836 ----
  Device input/file: none
  Device output/monitor: characters displayed as specified
  Dependencies: printf
! +/
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );


********************************************************************************
MUTANT #722:
RedBlackTreeUtility.mutant.652.c: ./RedBlackTreeUtility.c:649
*** Original
--- Mutant
***************
*** 646,652 ****
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr != NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;
--- 646,652 ----
       oldTopPtr->rightChildPtr = newTopPtr->leftChildPtr;
  
       // check if old top's new right child is not NULL
!      if (oldTopPtr->rightChildPtr = NULL)
          {
           // link new right child back up to old top
           oldTopPtr->rightChildPtr->parentPtr = oldTopPtr;


********************************************************************************
MUTANT #723:
RedBlackTreeUtility.mutant.28.c: ./RedBlackTreeUtility.c:45
*** Original
--- Mutant
***************
*** 42,48 ****
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! */
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;
--- 42,48 ----
  Device input/---: none
  Device output/---: none
  Dependencies: createNodeFromNode, copyTree (recursively)
! +/
  RedBlackNodeType *copyTree( RedBlackNodeType *srcPtr )
      {
       RedBlackNodeType* copiedNode = NULL;


********************************************************************************
MUTANT #724:
RedBlackTreeUtility.mutant.371.c: ./RedBlackTreeUtility.c:376
*** Original
--- Mutant
***************
*** 373,379 ****
           if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
!              return insertHelper(wkgPtr->leftChildPtr, inData);
              }
  
           // otherwise, assume null and create new node, link to left child
--- 373,379 ----
           if (wkgPtr->leftChildPtr != NULL)
              {
               // recurse to the left and return result
!              /*return insertHelper(wkgPtr->leftChildPtr, inData);*/
              }
  
           // otherwise, assume null and create new node, link to left child


********************************************************************************
MUTANT #725:
RedBlackTreeUtility.mutant.1030.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = -1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #726:
RedBlackTreeUtility.mutant.1072.c: ./RedBlackTreeUtility.c:945
*** Original
--- Mutant
***************
*** 942,948 ****
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel );
  
          *rowStartFlag = false;
         }
--- 942,948 ----
    
      if( *rowStartFlag )
         {
!         leadingSpaces = toPower ( nodeHeight - workingLevel , 2);
  
          *rowStartFlag = false;
         }


********************************************************************************
MUTANT #727:
RedBlackTreeUtility.mutant.1025.c: ./RedBlackTreeUtility.c:908
*** Original
--- Mutant
***************
*** 905,911 ****
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            
--- 905,911 ----
  
      if( rbTreeRoot != NULL )
         {
!         for( displayLevel = 1; displayLevel < nodeHeight; displayLevel++ )
             {
              rowStartFlag = true;
            


********************************************************************************
MUTANT #728:
RedBlackTreeUtility.mutant.122.c: ./RedBlackTreeUtility.c:143
*** Original
--- Mutant
***************
*** 140,146 ****
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
      }
  
--- 140,146 ----
  
           printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
!          /*displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);*/
          }
      }
  


********************************************************************************
MUTANT #729:
RedBlackTreeUtility.mutant.118.c: ./RedBlackTreeUtility.c:141
*** Original
--- Mutant
***************
*** 138,144 ****
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("%c/%c", wkgPtr->data, (char)wkgPtr->color);
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }
--- 138,144 ----
               printf("%s ", SEMICOLON_BREAK);
              }
  
!          printf("", wkgPtr->data, (char)wkgPtr->color);
  
           displayInOrder(wkgPtr->rightChildPtr, rowStartFlag);
          }


********************************************************************************
MUTANT #730:
RedBlackTreeUtility.mutant.568.c: ./RedBlackTreeUtility.c:546
*** Original
--- Mutant
***************
*** 543,549 ****
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr == parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");
--- 543,549 ----
              }
           // otherwise, check for right cases
           else if (grParentPtr != NULL 
!                   && grParentPtr->rightChildPtr <= parentPtr)
              {
               // print debugging statement
               printf("   - Uncle is black\n");


********************************************************************************
MUTANT #731:
RedBlackTreeUtility.mutant.1008.c: ./RedBlackTreeUtility.c:902
*** Original
--- Mutant
***************
*** 899,905 ****
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + 2;
      int workingLevel = 1;
      bool rowStartFlag;
  
--- 899,905 ----
  */
  void displayTreeStructure( RedBlackNodeType *rbTreeRoot, ControlCodes ctrlCode )
     {
!     int displayLevel, nodeHeight = findTreeHeight( rbTreeRoot ) + (2+1);
      int workingLevel = 1;
      bool rowStartFlag;
  


********************************************************************************
MUTANT #732:
RedBlackTreeUtility.mutant.980.c: ./RedBlackTreeUtility.c:879
*** Original
--- Mutant
***************
*** 876,882 ****
             }
         }
    
!     while( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
--- 876,882 ----
             }
         }
    
!     if( nodesToDisplay > 0 )
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #733:
RedBlackTreeUtility.mutant.890.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         displayChars( numChars % 1, outChar );
         }
     }
  


********************************************************************************
MUTANT #734:
RedBlackTreeUtility.mutant.730.c: ./RedBlackTreeUtility.c:707
*** Original
--- Mutant
***************
*** 704,710 ****
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 704,710 ----
       // point new top's right child to old top
       newTopPtr->rightChildPtr = oldTopPtr;
  
!      if (oldParent != NULL && oldParent->leftChildPtr < oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #735:
RedBlackTreeUtility.mutant.896.c: ./RedBlackTreeUtility.c:816
*** Original
--- Mutant
***************
*** 813,819 ****
         {
          printf( "%c", outChar );
        
!         displayChars( numChars - 1, outChar );
         }
     }
  
--- 813,819 ----
         {
          printf( "%c", outChar );
        
!         /*displayChars( numChars - 1, outChar );*/
         }
     }
  


********************************************************************************
MUTANT #736:
RedBlackTreeUtility.mutant.924.c: ./RedBlackTreeUtility.c:841
*** Original
--- Mutant
***************
*** 838,844 ****
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar == THIN_DIVIDER )
         {
          printf( "\n" );
         }
--- 838,844 ----
  
      displayChars( numChars, dividerChar );
  
!     if( dividerChar < THIN_DIVIDER )
         {
          printf( "\n" );
         }


********************************************************************************
MUTANT #737:
RedBlackTreeUtility.mutant.796.c: ./RedBlackTreeUtility.c:768
*** Original
--- Mutant
***************
*** 765,771 ****
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
      else
--- 765,771 ----
     
      if( workingLevel == displayLevel )
         {
!         displayValue( charOut , workingLevel, nodeHeight, rowStartFlag );
         }
    
      else


********************************************************************************
MUTANT #738:
RedBlackTreeUtility.mutant.40.c: ./RedBlackTreeUtility.c:50
*** Original
--- Mutant
***************
*** 47,53 ****
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (srcPtr != NULL)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);
--- 47,53 ----
      {
       RedBlackNodeType* copiedNode = NULL;
  
!      if (0==1)
          {
           copiedNode = createNodeFromNode(srcPtr);
           copiedNode->leftChildPtr = copyTree(srcPtr->leftChildPtr);


********************************************************************************
MUTANT #739:
RedBlackTreeUtility.mutant.904.c: ./RedBlackTreeUtility.c:837
*** Original
--- Mutant
***************
*** 834,840 ****
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight + 2 );
  
      displayChars( numChars, dividerChar );
  
--- 834,840 ----
  void displayDivider( RedBlackNodeType *rootPtr, char dividerChar )
     {
      int treeHeight = findTreeHeight( rootPtr );
!     int numChars = toPower( 2, treeHeight * 2 );
  
      displayChars( numChars, dividerChar );
  


********************************************************************************
MUTANT #740:
RedBlackTreeUtility.mutant.1154.c: ./RedBlackTreeUtility.c:997
*** Original
--- Mutant
***************
*** 994,1000 ****
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - 1 ) * base;
         }
    
      return 1;
--- 994,1000 ----
     {
      if( exponent > 0 )
         {
!         return toPower( base, exponent - (1-1) ) * base;
         }
    
      return 1;


********************************************************************************
MUTANT #741:
RedBlackTreeUtility.mutant.877.c: ./RedBlackTreeUtility.c:812
*** Original
--- Mutant
***************
*** 809,815 ****
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > 0 )
         {
          printf( "%c", outChar );
        
--- 809,815 ----
  */
  void displayChars( int numChars, char outChar )
     {
!     if( numChars > -1 )
         {
          printf( "%c", outChar );
        


********************************************************************************
MUTANT #742:
RedBlackTreeUtility.mutant.221.c: ./RedBlackTreeUtility.c:239
*** Original
--- Mutant
***************
*** 236,242 ****
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
!          printf("\n");
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {
--- 236,242 ----
       else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
!          /*printf("\n");*/
          }
       else if (traverseCode == PREORDER_TRAVERSE)
          {


********************************************************************************
MUTANT #743:
RedBlackTreeUtility.mutant.537.c: ./RedBlackTreeUtility.c:513
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (1==1)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->leftChildPtr = newTopPtr;
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #744:
RedBlackTreeUtility.mutant.255.c: ./RedBlackTreeUtility.c:270
*** Original
--- Mutant
***************
*** 267,273 ****
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) + 1;
          }
  
       // otherwise, assume null and return a -1
--- 267,273 ----
           rightHeight = findTreeHeight(localPtr->rightChildPtr);
  
           // add 1 to the max of the two sizes and return it
!          return getMax(leftHeight, rightHeight) * 1;
          }
  
       // otherwise, assume null and return a -1


********************************************************************************
MUTANT #745:
RedBlackTreeUtility.mutant.800.c: ./RedBlackTreeUtility.c:771
*** Original
--- Mutant
***************
*** 768,774 ****
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
!     else
         {
          if( workingNode->leftChildPtr != NULL )
             {
--- 768,774 ----
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
    
!     
         {
          if( workingNode->leftChildPtr != NULL )
             {


********************************************************************************
MUTANT #746:
RedBlackTreeUtility.mutant.830.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + (1+1), rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #747:
RedBlackTreeUtility.mutant.1036.c: ./RedBlackTreeUtility.c:910
*** Original
--- Mutant
***************
*** 907,912 ****
--- 907,913 ----
         {
          for( displayLevel = 1; displayLevel <= nodeHeight; displayLevel++ )
             {
+            break;
              rowStartFlag = true;
            
              displayAtTreeLevel( rbTreeRoot, nodeHeight, 


********************************************************************************
MUTANT #748:
RedBlackTreeUtility.mutant.1079.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel / 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #749:
RedBlackTreeUtility.mutant.1053.c: ./RedBlackTreeUtility.c:921
*** Original
--- Mutant
***************
*** 918,924 ****
    
      else
         {
!         printf( "\nEmpty Tree - No Display" );
         }
     }
  
--- 918,924 ----
    
      else
         {
!         /*printf( "\nEmpty Tree - No Display" );*/
         }
     }
  


********************************************************************************
MUTANT #750:
RedBlackTreeUtility.mutant.521.c: ./RedBlackTreeUtility.c:504
*** Original
--- Mutant
***************
*** 501,507 ****
               if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  printf("   - Left Left Case\n");
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");
--- 501,507 ----
               if (parentPtr->leftChildPtr == wkgPtr)
                  {
                   // print debugging statements
!                  /*printf("   - Left Left Case\n");*/
                   printf("      - Rotate Right from left side of ");
                   printf("grandparent\n");
                   printf("      - Swap grandparent/parent colors\n");


********************************************************************************
MUTANT #751:
RedBlackTreeUtility.mutant.5.c: ./RedBlackTreeUtility.c:7
*** Original
--- Mutant
***************
*** 4,10 ****
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '-';
  
  // functions
  
--- 4,10 ----
  // constants
  const char SEMICOLON_BREAK[] = "; ";
  const char THICK_DIVIDER = '=';
! const char THIN_DIVIDER = '%';
  
  // functions
  


********************************************************************************
MUTANT #752:
RedBlackTreeUtility.mutant.793.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if(0==1)
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #753:
RedBlackTreeUtility.mutant.123.c: ./RedBlackTreeUtility.c:148
*** Original
--- Mutant
***************
*** 145,150 ****
--- 145,151 ----
      }
  
  /*
+ break;
  Name: displayPostOrder
  Process: traverses across tree, prints semicolon-delimited list,
           displays "data / color" using post order strategy


********************************************************************************
MUTANT #754:
RedBlackTreeUtility.mutant.992.c: ./RedBlackTreeUtility.c:884
*** Original
--- Mutant
***************
*** 881,886 ****
--- 881,887 ----
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        
          nodesToDisplay--;
+         break;
         }
     }
  


********************************************************************************
MUTANT #755:
RedBlackTreeUtility.mutant.768.c: ./RedBlackTreeUtility.c:730
*** Original
--- Mutant
***************
*** 727,733 ****
  Device output/---: none
  Dependencies: none
  */
! void swapColors( RedBlackNodeType *one, RedBlackNodeType *other )
      {
       Colors tempColor = one->color;
       one->color = other->color;
--- 727,733 ----
  Device output/---: none
  Dependencies: none
  */
! void swapColors ( RedBlackNodeType *other , RedBlackNodeType *one)
      {
       Colors tempColor = one->color;
       one->color = other->color;


********************************************************************************
MUTANT #756:
RedBlackTreeUtility.mutant.548.c: ./RedBlackTreeUtility.c:522
*** Original
--- Mutant
***************
*** 508,513 ****
--- 508,564 ----
  
                   // rotate right, old top = grandparent, new top = parent
                   newTopPtr = rotateRight(parentPtr, grParentPtr);
+ 
+                  // check if new top is now the root
+                  if (greatGrParentPtr == NULL)
+                     {
+                      // update root pointer to new top
+                      *treeRoot = newTopPtr;
+                     }
+                  // otherwise, check if grandparent is left child
+                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
+                     {
+                      // link great grandparent to new top
+                      /*greatGrParentPtr->leftChildPtr = newTopPtr;*/
+                     }
+                  // otherwise, assume grandparent is right child
+                  else
+                     {
+                      // link great grandparent to new top
+                      greatGrParentPtr->rightChildPtr = newTopPtr;
+                     }
+ 
+                  // swap parent and grandparent colors
+                  swapColors(parentPtr, grParentPtr);
+                 }
+              // otherwise, assume left-right case
+              else
+                 {
+                  // rotate left, old top = parent, new top = working node
+                  rotateLeft(wkgPtr, parentPtr);
+ 
+                  // resolve parent
+                  resolveRBT(treeRoot, parentPtr);
+                 }
+             }
+          // otherwise, check for right cases
+          else if (grParentPtr != NULL 
+                   && grParentPtr->rightChildPtr == parentPtr)
+             {
+              // print debugging statement
+              printf("   - Uncle is black\n");
+ 
+              // check for right-right case
+              if (parentPtr->rightChildPtr == wkgPtr)
+                 {
+                  // print debugging statements
+                  printf("   - Right Right Case\n");
+                  printf("      - Rotate Left from right side of ");
+                  printf("grandparent\n");
+                  printf("      - Swap grandparent/parent colors\n");
+ 
+                  // rotate left, old top = grandparent, new top = parent
+                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
  
                   // check if new top is now the root
                   if (greatGrParentPtr == NULL)
***************
*** 531,587 ****
                   // swap parent and grandparent colors
                   swapColors(parentPtr, grParentPtr);
                  }
-              // otherwise, assume left-right case
-              else
-                 {
-                  // rotate left, old top = parent, new top = working node
-                  rotateLeft(wkgPtr, parentPtr);
- 
-                  // resolve parent
-                  resolveRBT(treeRoot, parentPtr);
-                 }
-             }
-          // otherwise, check for right cases
-          else if (grParentPtr != NULL 
-                   && grParentPtr->rightChildPtr == parentPtr)
-             {
-              // print debugging statement
-              printf("   - Uncle is black\n");
- 
-              // check for right-right case
-              if (parentPtr->rightChildPtr == wkgPtr)
-                 {
-                  // print debugging statements
-                  printf("   - Right Right Case\n");
-                  printf("      - Rotate Left from right side of ");
-                  printf("grandparent\n");
-                  printf("      - Swap grandparent/parent colors\n");
- 
-                  // rotate left, old top = grandparent, new top = parent
-                  newTopPtr = rotateLeft(parentPtr, grParentPtr);
- 
-                  // check if new top is now the root
-                  if (greatGrParentPtr == NULL)
-                     {
-                      // update root pointer to new top
-                      *treeRoot = newTopPtr;
-                     }
-                  // otherwise, check if grandparent is left child
-                  else if (greatGrParentPtr->leftChildPtr == grParentPtr)
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->leftChildPtr = newTopPtr;
-                     }
-                  // otherwise, assume grandparent is right child
-                  else
-                     {
-                      // link great grandparent to new top
-                      greatGrParentPtr->rightChildPtr = newTopPtr;
-                     }
- 
-                  // swap parent and grandparent colors
-                  swapColors(parentPtr, grParentPtr);
-                 }
               // otherwise, assume right-left case
               else
                  {
--- 582,587 ----


********************************************************************************
MUTANT #757:
RedBlackTreeUtility.mutant.1093.c: ./RedBlackTreeUtility.c:952
*** Original
--- Mutant
***************
*** 949,955 ****
    
      else
         {
!         leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );
--- 949,955 ----
    
      else
         {
!         leadingSpaces = toPower( -1, nodeHeight - workingLevel + 1 ) - 1;
         }
  
      displayChars( leadingSpaces, SPACE );


********************************************************************************
MUTANT #758:
RedBlackTreeUtility.mutant.217.c: ./RedBlackTreeUtility.c:236
*** Original
--- Mutant
***************
*** 233,239 ****
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!      else if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");
--- 233,239 ----
           displayInOrder(rootPtr, &rowStartFlag);
           printf("\n");
          }
!       if (traverseCode == POSTORDER_TRAVERSE)
          {
           displayPostOrder(rootPtr, &rowStartFlag);
           printf("\n");


********************************************************************************
MUTANT #759:
RedBlackTreeUtility.mutant.664.c: ./RedBlackTreeUtility.c:658
*** Original
--- Mutant
***************
*** 655,661 ****
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr == oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }
--- 655,661 ----
       // point new top's left child to old top
       newTopPtr->leftChildPtr = oldTopPtr;
       
!      if (oldParent != NULL && oldParent->leftChildPtr != oldTopPtr)
          {
           oldParent->leftChildPtr = newTopPtr;
          }


********************************************************************************
MUTANT #760:
RedBlackTreeUtility.mutant.95.c: ./RedBlackTreeUtility.c:127
*** Original
--- Mutant
***************
*** 124,130 ****
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr != NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  
--- 124,130 ----
  */
  void displayInOrder( RedBlackNodeType *wkgPtr, bool *rowStartFlag )
      {     
!      if (wkgPtr == NULL)
          {
           displayInOrder(wkgPtr->leftChildPtr, rowStartFlag);
  


********************************************************************************
MUTANT #761:
RedBlackTreeUtility.mutant.344.c: ./RedBlackTreeUtility.c:364
*** Original
--- Mutant
***************
*** 361,367 ****
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if (wkgPtr == NULL || diff == 0)
          {
           // return null if so
           return NULL;
--- 361,367 ----
       int diff = (int)inData - (int)wkgPtr->data;
  
       // check if working pointer is null or if incoming data is a duplicate
!      if ((0==1) || diff == 0)
          {
           // return null if so
           return NULL;


********************************************************************************
MUTANT #762:
RedBlackTreeUtility.mutant.979.c: ./RedBlackTreeUtility.c:880
*** Original
--- Mutant
***************
*** 877,882 ****
--- 877,883 ----
         }
    
      while( nodesToDisplay > 0 )
+     continue;
         {
          displayValue( charOut, nodeHeight, displayLevel, rowStartFlag );
        


********************************************************************************
MUTANT #763:
RedBlackTreeUtility.mutant.787.c: ./RedBlackTreeUtility.c:766
*** Original
--- Mutant
***************
*** 763,769 ****
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel == displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }
--- 763,769 ----
          charOut = (char)workingNode->color;      
         }
     
!     if( workingLevel != displayLevel )
         {
          displayValue( charOut, nodeHeight, workingLevel, rowStartFlag );
         }


********************************************************************************
MUTANT #764:
RedBlackTreeUtility.mutant.828.c: ./RedBlackTreeUtility.c:782
*** Original
--- Mutant
***************
*** 779,785 ****
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 1, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )
--- 779,785 ----
          else
             {
              displayEmptyNodeSpaces( nodeHeight, displayLevel, 
!                                      workingLevel + 0, rowStartFlag, ctrlCode );
             }
        
          if( workingNode->rightChildPtr != NULL )


********************************************************************************
MUTANT #765:
RedBlackTreeUtility.mutant.1105.c: ./RedBlackTreeUtility.c:955
*** Original
--- Mutant
***************
*** 952,958 ****
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
!     displayChars( leadingSpaces, SPACE );
    
      printf( "%c", data );         
     }
--- 952,958 ----
          leadingSpaces = toPower( 2, nodeHeight - workingLevel + 1 ) - 1;
         }
  
!     /*displayChars( leadingSpaces, SPACE );*/
    
      printf( "%c", data );         
     }


********************************************************************************
MUTANT #766:
RedBlackTreeUtility.mutant.68.c: ./RedBlackTreeUtility.c:71
*** Original
--- Mutant
***************
*** 68,73 ****
--- 68,74 ----
      }
  
  /*
+ break;
  Name: createNodeFromData
  Process: creates a Red Black tree node from the node data given,
           all links are set to NULL


